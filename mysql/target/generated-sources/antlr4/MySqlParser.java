// Generated from MySqlParser.g4 by ANTLR 4.7

    package com.antlr.grammarsv4.mysql;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ANALYZE=8, AND=9, AS=10, ASC=11, BEFORE=12, BETWEEN=13, 
		BOTH=14, BY=15, CALL=16, CASCADE=17, CASE=18, CAST=19, CHANGE=20, CHARACTER=21, 
		CHECK=22, COLLATE=23, COLUMN=24, CONDITION=25, CONSTRAINT=26, CONTINUE=27, 
		CONVERT=28, CREATE=29, CROSS=30, CURRENT_USER=31, CURSOR=32, DATABASE=33, 
		DATABASES=34, DECLARE=35, DEFAULT=36, DELAYED=37, DELETE=38, DESC=39, 
		DESCRIBE=40, DETERMINISTIC=41, DISTINCT=42, DISTINCTROW=43, DROP=44, EACH=45, 
		ELSE=46, ELSEIF=47, ENCLOSED=48, ESCAPED=49, EXISTS=50, EXIT=51, EXPLAIN=52, 
		FALSE=53, FETCH=54, FOR=55, FORCE=56, FOREIGN=57, FROM=58, FULLTEXT=59, 
		GRANT=60, GROUP=61, HAVING=62, HIGH_PRIORITY=63, IF=64, IGNORE=65, IN=66, 
		INDEX=67, INFILE=68, INNER=69, INOUT=70, INSERT=71, INTERVAL=72, INTO=73, 
		IS=74, ITERATE=75, JOIN=76, KEY=77, KEYS=78, KILL=79, LEADING=80, LEAVE=81, 
		LEFT=82, LIKE=83, LIMIT=84, LINEAR=85, LINES=86, LOAD=87, LOCK=88, LOOP=89, 
		LOW_PRIORITY=90, MASTER_BIND=91, MASTER_SSL_VERIFY_SERVER_CERT=92, MATCH=93, 
		MAXVALUE=94, MODIFIES=95, NATURAL=96, NOTNULL=97, NOT=98, NO_WRITE_TO_BINLOG=99, 
		NULL_LITERAL=100, ON=101, OPTIMIZE=102, OPTION=103, OPTIONALLY=104, OR=105, 
		ORDER=106, OUT=107, OUTER=108, OUTFILE=109, PARTITION=110, PRIMARY=111, 
		PROCEDURE=112, PURGE=113, RANGE=114, READ=115, READS=116, REFERENCES=117, 
		REGEXP=118, RELEASE=119, RENAME=120, REPEAT=121, REPLACE=122, REQUIRE=123, 
		RESTRICT=124, RETURN=125, REVOKE=126, RIGHT=127, RLIKE=128, SCHEMA=129, 
		SCHEMAS=130, SELECT=131, SET=132, SEPARATOR=133, SHOW=134, SPATIAL=135, 
		SQL=136, SQLEXCEPTION=137, SQLSTATE=138, SQLWARNING=139, SQL_BIG_RESULT=140, 
		SQL_CALC_FOUND_ROWS=141, SQL_SMALL_RESULT=142, SSL=143, STARTING=144, 
		STRAIGHT_JOIN=145, TABLE=146, TERMINATED=147, THEN=148, TO=149, TRAILING=150, 
		TRIGGER=151, TRUE=152, UNDO=153, UNION=154, UNIQUE=155, UNLOCK=156, UNSIGNED=157, 
		UPDATE=158, USAGE=159, USE=160, USING=161, VALUES=162, WHEN=163, WHERE=164, 
		WHILE=165, WITH=166, WRITE=167, XOR=168, ZEROFILL=169, TINYINT=170, SMALLINT=171, 
		MEDIUMINT=172, INT=173, INTEGER=174, BIGINT=175, REAL=176, DOUBLE=177, 
		FLOAT=178, DECIMAL=179, NUMERIC=180, DATE=181, TIME=182, TIMESTAMP=183, 
		DATETIME=184, YEAR=185, CHAR=186, VARCHAR=187, BINARY=188, VARBINARY=189, 
		TINYBLOB=190, BLOB=191, MEDIUMBLOB=192, LONGBLOB=193, TINYTEXT=194, TEXT=195, 
		MEDIUMTEXT=196, LONGTEXT=197, ENUM=198, YEAR_MONTH=199, DAY_HOUR=200, 
		DAY_MINUTE=201, DAY_SECOND=202, HOUR_MINUTE=203, HOUR_SECOND=204, MINUTE_SECOND=205, 
		SECOND_MICROSECOND=206, MINUTE_MICROSECOND=207, HOUR_MICROSECOND=208, 
		DAY_MICROSECOND=209, AVG=210, BIT_AND=211, BIT_OR=212, BIT_XOR=213, COUNT=214, 
		GROUP_CONCAT=215, MAX=216, MIN=217, STD=218, STDDEV=219, STDDEV_POP=220, 
		STDDEV_SAMP=221, SUM=222, VAR_POP=223, VAR_SAMP=224, VARIANCE=225, CURRENT_DATE=226, 
		CURRENT_TIME=227, CURRENT_TIMESTAMP=228, LOCALTIME=229, CURDATE=230, CURTIME=231, 
		DATE_ADD=232, DATE_SUB=233, EXTRACT=234, LOCALTIMESTAMP=235, NOW=236, 
		POSITION=237, SUBSTR=238, SUBSTRING=239, SYSDATE=240, TRIM=241, UTC_DATE=242, 
		UTC_TIME=243, UTC_TIMESTAMP=244, ACCOUNT=245, ACTION=246, AFTER=247, AGGREGATE=248, 
		ALGORITHM=249, ANY=250, AT=251, AUTHORS=252, AUTOCOMMIT=253, AUTOEXTEND_SIZE=254, 
		AUTO_INCREMENT=255, AVG_ROW_LENGTH=256, BEGIN=257, BINLOG=258, BIT=259, 
		BLOCK=260, BTREE=261, CACHE=262, CASCADED=263, CHAIN=264, CHANGED=265, 
		CHANNEL=266, CHECKSUM=267, CIPHER=268, CLIENT=269, CLOSE=270, COALESCE=271, 
		CODE=272, COLUMNS=273, COLUMN_FORMAT=274, COMMENT=275, COMMIT=276, COMPACT=277, 
		COMPLETION=278, COMPRESSED=279, COMPRESSION=280, CONCURRENT=281, CONNECTION=282, 
		CONSISTENT=283, CONTAINS=284, CONTEXT=285, CONTRIBUTORS=286, COPY=287, 
		CPU=288, DATA=289, DATAFILE=290, DEALLOCATE=291, DEFAULT_AUTH=292, DEFINER=293, 
		DELAY_KEY_WRITE=294, DES_KEY_FILE=295, DIRECTORY=296, DISABLE=297, DISCARD=298, 
		DISK=299, DO=300, DUMPFILE=301, DUPLICATE=302, DYNAMIC=303, ENABLE=304, 
		ENCRYPTION=305, END=306, ENDS=307, ENGINE=308, ENGINES=309, ERROR=310, 
		ERRORS=311, ESCAPE=312, EVEN=313, EVENT=314, EVENTS=315, EVERY=316, EXCHANGE=317, 
		EXCLUSIVE=318, EXPIRE=319, EXPORT=320, EXTENDED=321, EXTENT_SIZE=322, 
		FAST=323, FAULTS=324, FIELDS=325, FILE_BLOCK_SIZE=326, FILTER=327, FIRST=328, 
		FIXED=329, FLUSH=330, FOLLOWS=331, FOUND=332, FULL=333, FUNCTION=334, 
		GENERAL=335, GLOBAL=336, GRANTS=337, GROUP_REPLICATION=338, HANDLER=339, 
		HASH=340, HELP=341, HOST=342, HOSTS=343, IDENTIFIED=344, IGNORE_SERVER_IDS=345, 
		IMPORT=346, INDEXES=347, INITIAL_SIZE=348, INPLACE=349, INSERT_METHOD=350, 
		INSTALL=351, INSTANCE=352, INVOKER=353, IO=354, IO_THREAD=355, IPC=356, 
		ISOLATION=357, ISSUER=358, JSON=359, KEY_BLOCK_SIZE=360, LANGUAGE=361, 
		LAST=362, LEAVES=363, LESS=364, LEVEL=365, LIST=366, LOCAL=367, LOGFILE=368, 
		LOGS=369, MASTER=370, MASTER_AUTO_POSITION=371, MASTER_CONNECT_RETRY=372, 
		MASTER_DELAY=373, MASTER_HEARTBEAT_PERIOD=374, MASTER_HOST=375, MASTER_LOG_FILE=376, 
		MASTER_LOG_POS=377, MASTER_PASSWORD=378, MASTER_PORT=379, MASTER_RETRY_COUNT=380, 
		MASTER_SSL=381, MASTER_SSL_CA=382, MASTER_SSL_CAPATH=383, MASTER_SSL_CERT=384, 
		MASTER_SSL_CIPHER=385, MASTER_SSL_CRL=386, MASTER_SSL_CRLPATH=387, MASTER_SSL_KEY=388, 
		MASTER_TLS_VERSION=389, MASTER_USER=390, MAX_CONNECTIONS_PER_HOUR=391, 
		MAX_QUERIES_PER_HOUR=392, MAX_ROWS=393, MAX_SIZE=394, MAX_UPDATES_PER_HOUR=395, 
		MAX_USER_CONNECTIONS=396, MEDIUM=397, MERGE=398, MID=399, MIGRATE=400, 
		MIN_ROWS=401, MODE=402, MODIFY=403, MUTEX=404, MYSQL=405, NAME=406, NAMES=407, 
		NCHAR=408, NEVER=409, NEXT=410, NO=411, NODEGROUP=412, NONE=413, OFFLINE=414, 
		OFFSET=415, OJ=416, OLD_PASSWORD=417, ONE=418, ONLINE=419, ONLY=420, OPEN=421, 
		OPTIMIZER_COSTS=422, OPTIONS=423, OWNER=424, PACK_KEYS=425, PAGE=426, 
		PARSER=427, PARTIAL=428, PARTITIONING=429, PARTITIONS=430, PASSWORD=431, 
		PHASE=432, PLUGIN=433, PLUGIN_DIR=434, PLUGINS=435, PORT=436, PRECEDES=437, 
		PREPARE=438, PRESERVE=439, PREV=440, PROCESSLIST=441, PROFILE=442, PROFILES=443, 
		PROXY=444, QUERY=445, QUICK=446, REBUILD=447, RECOVER=448, REDO_BUFFER_SIZE=449, 
		REDUNDANT=450, RELAY=451, RELAY_LOG_FILE=452, RELAY_LOG_POS=453, RELAYLOG=454, 
		REMOVE=455, REORGANIZE=456, REPAIR=457, REPLICATE_DO_DB=458, REPLICATE_DO_TABLE=459, 
		REPLICATE_IGNORE_DB=460, REPLICATE_IGNORE_TABLE=461, REPLICATE_REWRITE_DB=462, 
		REPLICATE_WILD_DO_TABLE=463, REPLICATE_WILD_IGNORE_TABLE=464, REPLICATION=465, 
		RESET=466, RESUME=467, RETURNS=468, ROLLBACK=469, ROLLUP=470, ROTATE=471, 
		ROW=472, ROWS=473, ROW_FORMAT=474, SAVEPOINT=475, SCHEDULE=476, SECURITY=477, 
		SERVER=478, SESSION=479, SHARE=480, SHARED=481, SIGNED=482, SIMPLE=483, 
		SLAVE=484, SLOW=485, SNAPSHOT=486, SOCKET=487, SOME=488, SONAME=489, SOUNDS=490, 
		SOURCE=491, SQL_AFTER_GTIDS=492, SQL_AFTER_MTS_GAPS=493, SQL_BEFORE_GTIDS=494, 
		SQL_BUFFER_RESULT=495, SQL_CACHE=496, SQL_NO_CACHE=497, SQL_THREAD=498, 
		START=499, STARTS=500, STATS_AUTO_RECALC=501, STATS_PERSISTENT=502, STATS_SAMPLE_PAGES=503, 
		STATUS=504, STOP=505, STORAGE=506, STRING=507, SUBJECT=508, SUBPARTITION=509, 
		SUBPARTITIONS=510, SUSPEND=511, SWAPS=512, SWITCHES=513, TABLESPACE=514, 
		TEMPORARY=515, TEMPTABLE=516, THAN=517, TRADITIONAL=518, TRANSACTION=519, 
		TRIGGERS=520, TRUNCATE=521, UNDEFINED=522, UNDOFILE=523, UNDO_BUFFER_SIZE=524, 
		UNINSTALL=525, UNKNOWN=526, UNTIL=527, UPGRADE=528, USER=529, USE_FRM=530, 
		USER_RESOURCES=531, VALIDATION=532, VALUE=533, VARIABLES=534, VIEW=535, 
		WAIT=536, WARNINGS=537, WITHOUT=538, WORK=539, WRAPPER=540, X509=541, 
		XA=542, XML=543, EUR=544, USA=545, JIS=546, ISO=547, INTERNAL=548, QUARTER=549, 
		MONTH=550, DAY=551, HOUR=552, MINUTE=553, WEEK=554, SECOND=555, MICROSECOND=556, 
		TABLES=557, ROUTINE=558, EXECUTE=559, FILE=560, PROCESS=561, RELOAD=562, 
		SHUTDOWN=563, SUPER=564, PRIVILEGES=565, ARMSCII8=566, ASCII=567, BIG5=568, 
		CP1250=569, CP1251=570, CP1256=571, CP1257=572, CP850=573, CP852=574, 
		CP866=575, CP932=576, DEC8=577, EUCJPMS=578, EUCKR=579, GB2312=580, GBK=581, 
		GEOSTD8=582, GREEK=583, HEBREW=584, HP8=585, KEYBCS2=586, KOI8R=587, KOI8U=588, 
		LATIN1=589, LATIN2=590, LATIN5=591, LATIN7=592, MACCE=593, MACROMAN=594, 
		SJIS=595, SWE7=596, TIS620=597, UCS2=598, UJIS=599, UTF16=600, UTF16LE=601, 
		UTF32=602, UTF8=603, UTF8MB3=604, UTF8MB4=605, ARCHIVE=606, BLACKHOLE=607, 
		CSV=608, FEDERATED=609, INNODB=610, MEMORY=611, MRG_MYISAM=612, MYISAM=613, 
		NDB=614, NDBCLUSTER=615, PERFOMANCE_SCHEMA=616, REPEATABLE=617, COMMITTED=618, 
		UNCOMMITTED=619, SERIALIZABLE=620, GEOMETRYCOLLECTION=621, LINESTRING=622, 
		MULTILINESTRING=623, MULTIPOINT=624, MULTIPOLYGON=625, POINT=626, POLYGON=627, 
		ABS=628, ACOS=629, ADDDATE=630, ADDTIME=631, AES_DECRYPT=632, AES_ENCRYPT=633, 
		AREA=634, ASBINARY=635, ASIN=636, ASTEXT=637, ASWKB=638, ASWKT=639, ASYMMETRIC_DECRYPT=640, 
		ASYMMETRIC_DERIVE=641, ASYMMETRIC_ENCRYPT=642, ASYMMETRIC_SIGN=643, ASYMMETRIC_VERIFY=644, 
		ATAN=645, ATAN2=646, BENCHMARK=647, BIN=648, BIT_COUNT=649, BIT_LENGTH=650, 
		BUFFER=651, CEIL=652, CEILING=653, CENTROID=654, CHARACTER_LENGTH=655, 
		CHARSET=656, CHAR_LENGTH=657, COERCIBILITY=658, COLLATION=659, COMPRESS=660, 
		CONCAT=661, CONCAT_WS=662, CONNECTION_ID=663, CONV=664, CONVERT_TZ=665, 
		COS=666, COT=667, CRC32=668, CREATE_ASYMMETRIC_PRIV_KEY=669, CREATE_ASYMMETRIC_PUB_KEY=670, 
		CREATE_DH_PARAMETERS=671, CREATE_DIGEST=672, CROSSES=673, DATEDIFF=674, 
		DATE_FORMAT=675, DAYNAME=676, DAYOFMONTH=677, DAYOFWEEK=678, DAYOFYEAR=679, 
		DECODE=680, DEGREES=681, DES_DECRYPT=682, DES_ENCRYPT=683, DIMENSION=684, 
		DISJOINT=685, ELT=686, ENCODE=687, ENCRYPT=688, ENDPOINT=689, ENVELOPE=690, 
		EQUALS=691, EXP=692, EXPORT_SET=693, EXTERIORRING=694, EXTRACTVALUE=695, 
		FIELD=696, FIND_IN_SET=697, FLOOR=698, FORMAT=699, FOUND_ROWS=700, FROM_BASE64=701, 
		FROM_DAYS=702, FROM_UNIXTIME=703, GEOMCOLLFROMTEXT=704, GEOMCOLLFROMWKB=705, 
		GEOMETRYCOLLECTIONFROMTEXT=706, GEOMETRYCOLLECTIONFROMWKB=707, GEOMETRYFROMTEXT=708, 
		GEOMETRYFROMWKB=709, GEOMETRYN=710, GEOMETRYTYPE=711, GEOMFROMTEXT=712, 
		GEOMFROMWKB=713, GET_FORMAT=714, GET_LOCK=715, GLENGTH=716, GREATEST=717, 
		GTID_SUBSET=718, GTID_SUBTRACT=719, HEX=720, IFNULL=721, INET6_ATON=722, 
		INET6_NTOA=723, INET_ATON=724, INET_NTOA=725, INSTR=726, INTERIORRINGN=727, 
		INTERSECTS=728, ISCLOSED=729, ISEMPTY=730, ISNULL=731, ISSIMPLE=732, IS_FREE_LOCK=733, 
		IS_IPV4=734, IS_IPV4_COMPAT=735, IS_IPV4_MAPPED=736, IS_IPV6=737, IS_USED_LOCK=738, 
		LAST_INSERT_ID=739, LCASE=740, LEAST=741, LENGTH=742, LINEFROMTEXT=743, 
		LINEFROMWKB=744, LINESTRINGFROMTEXT=745, LINESTRINGFROMWKB=746, LN=747, 
		LOAD_FILE=748, LOCATE=749, LOG=750, LOG10=751, LOG2=752, LOWER=753, LPAD=754, 
		LTRIM=755, MAKEDATE=756, MAKETIME=757, MAKE_SET=758, MASTER_POS_WAIT=759, 
		MBRCONTAINS=760, MBRDISJOINT=761, MBREQUAL=762, MBRINTERSECTS=763, MBROVERLAPS=764, 
		MBRTOUCHES=765, MBRWITHIN=766, MD5=767, MLINEFROMTEXT=768, MLINEFROMWKB=769, 
		MONTHNAME=770, MPOINTFROMTEXT=771, MPOINTFROMWKB=772, MPOLYFROMTEXT=773, 
		MPOLYFROMWKB=774, MULTILINESTRINGFROMTEXT=775, MULTILINESTRINGFROMWKB=776, 
		MULTIPOINTFROMTEXT=777, MULTIPOINTFROMWKB=778, MULTIPOLYGONFROMTEXT=779, 
		MULTIPOLYGONFROMWKB=780, NAME_CONST=781, NULLIF=782, NUMGEOMETRIES=783, 
		NUMINTERIORRINGS=784, NUMPOINTS=785, OCT=786, OCTET_LENGTH=787, ORD=788, 
		OVERLAPS=789, PERIOD_ADD=790, PERIOD_DIFF=791, PI=792, POINTFROMTEXT=793, 
		POINTFROMWKB=794, POINTN=795, POLYFROMTEXT=796, POLYFROMWKB=797, POLYGONFROMTEXT=798, 
		POLYGONFROMWKB=799, POW=800, POWER=801, QUOTE=802, RADIANS=803, RAND=804, 
		RANDOM_BYTES=805, RELEASE_LOCK=806, REVERSE=807, ROUND=808, ROW_COUNT=809, 
		RPAD=810, RTRIM=811, SEC_TO_TIME=812, SESSION_USER=813, SHA=814, SHA1=815, 
		SHA2=816, SIGN=817, SIN=818, SLEEP=819, SOUNDEX=820, SQL_THREAD_WAIT_AFTER_GTIDS=821, 
		SQRT=822, SRID=823, STARTPOINT=824, STRCMP=825, STR_TO_DATE=826, ST_AREA=827, 
		ST_ASBINARY=828, ST_ASTEXT=829, ST_ASWKB=830, ST_ASWKT=831, ST_BUFFER=832, 
		ST_CENTROID=833, ST_CONTAINS=834, ST_CROSSES=835, ST_DIFFERENCE=836, ST_DIMENSION=837, 
		ST_DISJOINT=838, ST_DISTANCE=839, ST_ENDPOINT=840, ST_ENVELOPE=841, ST_EQUALS=842, 
		ST_EXTERIORRING=843, ST_GEOMCOLLFROMTEXT=844, ST_GEOMCOLLFROMTXT=845, 
		ST_GEOMCOLLFROMWKB=846, ST_GEOMETRYCOLLECTIONFROMTEXT=847, ST_GEOMETRYCOLLECTIONFROMWKB=848, 
		ST_GEOMETRYFROMTEXT=849, ST_GEOMETRYFROMWKB=850, ST_GEOMETRYN=851, ST_GEOMETRYTYPE=852, 
		ST_GEOMFROMTEXT=853, ST_GEOMFROMWKB=854, ST_INTERIORRINGN=855, ST_INTERSECTION=856, 
		ST_INTERSECTS=857, ST_ISCLOSED=858, ST_ISEMPTY=859, ST_ISSIMPLE=860, ST_LINEFROMTEXT=861, 
		ST_LINEFROMWKB=862, ST_LINESTRINGFROMTEXT=863, ST_LINESTRINGFROMWKB=864, 
		ST_NUMGEOMETRIES=865, ST_NUMINTERIORRING=866, ST_NUMINTERIORRINGS=867, 
		ST_NUMPOINTS=868, ST_OVERLAPS=869, ST_POINTFROMTEXT=870, ST_POINTFROMWKB=871, 
		ST_POINTN=872, ST_POLYFROMTEXT=873, ST_POLYFROMWKB=874, ST_POLYGONFROMTEXT=875, 
		ST_POLYGONFROMWKB=876, ST_SRID=877, ST_STARTPOINT=878, ST_SYMDIFFERENCE=879, 
		ST_TOUCHES=880, ST_UNION=881, ST_WITHIN=882, ST_X=883, ST_Y=884, SUBDATE=885, 
		SUBSTRING_INDEX=886, SUBTIME=887, SYSTEM_USER=888, TAN=889, TIMEDIFF=890, 
		TIMESTAMPADD=891, TIMESTAMPDIFF=892, TIME_FORMAT=893, TIME_TO_SEC=894, 
		TOUCHES=895, TO_BASE64=896, TO_DAYS=897, TO_SECONDS=898, UCASE=899, UNCOMPRESS=900, 
		UNCOMPRESSED_LENGTH=901, UNHEX=902, UNIX_TIMESTAMP=903, UPDATEXML=904, 
		UPPER=905, UUID=906, UUID_SHORT=907, VALIDATE_PASSWORD_STRENGTH=908, VERSION=909, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=910, WEEKDAY=911, WEEKOFYEAR=912, WEIGHT_STRING=913, 
		WITHIN=914, YEARWEEK=915, Y_FUNCTION=916, X_FUNCTION=917, VAR_ASSIGN=918, 
		PLUS_ASSIGN=919, MINUS_ASSIGN=920, MULT_ASSIGN=921, DIV_ASSIGN=922, MOD_ASSIGN=923, 
		AND_ASSIGN=924, XOR_ASSIGN=925, OR_ASSIGN=926, STAR=927, DIVIDE=928, MODULE=929, 
		PLUS=930, MINUS=931, DIV=932, MOD=933, EQUAL_SYMBOL=934, GREATER_SYMBOL=935, 
		LESS_SYMBOL=936, EXCLAMATION_SYMBOL=937, BIT_NOT_OP=938, BIT_OR_OP=939, 
		BIT_AND_OP=940, BIT_XOR_OP=941, DOT=942, LR_BRACKET=943, RR_BRACKET=944, 
		COMMA=945, SEMI=946, AT_SIGN=947, ZERO_DECIMAL=948, ONE_DECIMAL=949, TWO_DECIMAL=950, 
		SINGLE_QUOTE_SYMB=951, DOUBLE_QUOTE_SYMB=952, REVERSE_QUOTE_SYMB=953, 
		COLON_SYMB=954, CHARSET_REVERSE_QOUTE_STRING=955, FILESIZE_LITERAL=956, 
		START_NATIONAL_STRING_LITERAL=957, STRING_LITERAL=958, DECIMAL_LITERAL=959, 
		HEXADECIMAL_LITERAL=960, REAL_LITERAL=961, NULL_SPEC_LITERAL=962, BIT_STRING=963, 
		STRING_CHARSET_NAME=964, DOT_ID=965, ID=966, REVERSE_QUOTE_ID=967, STRING_USER_NAME=968, 
		LOCAL_ID=969, GLOBAL_ID=970, ERROR_RECONGNIGION=971;
	public static final int
		RULE_root = 0, RULE_sql_statements = 1, RULE_sql_statement = 2, RULE_empty_statement = 3, 
		RULE_ddl_statement = 4, RULE_dml_statement = 5, RULE_transaction_statement = 6, 
		RULE_replication_statement = 7, RULE_prepared_statement = 8, RULE_compound_statement = 9, 
		RULE_administration_statement = 10, RULE_utility_statement = 11, RULE_create_database = 12, 
		RULE_create_event = 13, RULE_create_index = 14, RULE_create_logfile_group = 15, 
		RULE_create_procedure = 16, RULE_create_function = 17, RULE_create_server = 18, 
		RULE_create_table = 19, RULE_create_tablespace_innodb = 20, RULE_create_tablespace_ndb = 21, 
		RULE_create_trigger = 22, RULE_create_view = 23, RULE_create_database_option = 24, 
		RULE_owner_statement = 25, RULE_schedule_expression = 26, RULE_timestamp_value = 27, 
		RULE_interval_expr = 28, RULE_interval_type = 29, RULE_index_type = 30, 
		RULE_index_option = 31, RULE_proc_param = 32, RULE_func_param = 33, RULE_routine_characteristic = 34, 
		RULE_server_option = 35, RULE_column_def_table_constraints = 36, RULE_column_def_table_constraint = 37, 
		RULE_column_definition = 38, RULE_separate_column_constraint = 39, RULE_table_constraint = 40, 
		RULE_reference_definition = 41, RULE_on_delete_action = 42, RULE_on_update_action = 43, 
		RULE_reference_action_control_type = 44, RULE_index_column_definition = 45, 
		RULE_table_option = 46, RULE_partition_options = 47, RULE_partition_function_definition = 48, 
		RULE_linear_partition_func_def = 49, RULE_partition_def = 50, RULE_subpartition_def = 51, 
		RULE_alter_database = 52, RULE_alter_event = 53, RULE_alter_function = 54, 
		RULE_alter_instance = 55, RULE_alter_logfile_group = 56, RULE_alter_procedure = 57, 
		RULE_alter_server = 58, RULE_alter_table = 59, RULE_alter_tablespace = 60, 
		RULE_alter_view = 61, RULE_alter_table_spec = 62, RULE_drop_database = 63, 
		RULE_drop_event = 64, RULE_drop_index = 65, RULE_drop_logfile_group = 66, 
		RULE_drop_procedure = 67, RULE_drop_function = 68, RULE_drop_server = 69, 
		RULE_drop_table = 70, RULE_drop_tablespace = 71, RULE_drop_trigger = 72, 
		RULE_drop_view = 73, RULE_rename_table = 74, RULE_truncate_table = 75, 
		RULE_call_statement = 76, RULE_delete_statement = 77, RULE_do_statement = 78, 
		RULE_handler_statement = 79, RULE_insert_statement = 80, RULE_load_data_statement = 81, 
		RULE_load_xml_statement = 82, RULE_replace_statement = 83, RULE_select_statement = 84, 
		RULE_update_statement = 85, RULE_insert_statement_value = 86, RULE_update_elem = 87, 
		RULE_col_or_uservar = 88, RULE_single_delete_statement = 89, RULE_multiple_delete_statement = 90, 
		RULE_handler_open_statement = 91, RULE_handler_read_index_statement = 92, 
		RULE_handler_read_statement = 93, RULE_handler_close_statement = 94, RULE_single_update_statement = 95, 
		RULE_multiple_update_statement = 96, RULE_order_by_clause = 97, RULE_order_by_expression = 98, 
		RULE_table_sources = 99, RULE_table_source = 100, RULE_table_source_item = 101, 
		RULE_index_hint = 102, RULE_join_part = 103, RULE_subquery = 104, RULE_query_expression = 105, 
		RULE_query_expression_nointo = 106, RULE_query_specification = 107, RULE_query_specification_nointo = 108, 
		RULE_union_parenth = 109, RULE_union_statement = 110, RULE_select_spec = 111, 
		RULE_select_list = 112, RULE_select_list_elem = 113, RULE_select_into_expression = 114, 
		RULE_from_clause = 115, RULE_group_by_item = 116, RULE_limit_clause = 117, 
		RULE_start_transaction = 118, RULE_begin_work = 119, RULE_commit_work = 120, 
		RULE_rollback_work = 121, RULE_savepoint_statement = 122, RULE_rollback_statement = 123, 
		RULE_release_statement = 124, RULE_lock_tables = 125, RULE_unlock_tables = 126, 
		RULE_set_autocommit_statement = 127, RULE_set_transaction_statement = 128, 
		RULE_transact_option = 129, RULE_lock_table_element = 130, RULE_trans_characteristic = 131, 
		RULE_transaction_level = 132, RULE_change_master = 133, RULE_change_repl_filter = 134, 
		RULE_purge_binary_logs = 135, RULE_reset_master = 136, RULE_reset_slave = 137, 
		RULE_start_slave = 138, RULE_stop_slave = 139, RULE_start_group_repl = 140, 
		RULE_stop_group_repl = 141, RULE_master_option = 142, RULE_string_master_option = 143, 
		RULE_decimal_master_option = 144, RULE_bool_master_option = 145, RULE_channel_option = 146, 
		RULE_repl_filter = 147, RULE_thread_type = 148, RULE_until_option = 149, 
		RULE_start_slave_connection_option = 150, RULE_gtid_set = 151, RULE_xa_start_transaction = 152, 
		RULE_xa_end_transaction = 153, RULE_xa_prepare = 154, RULE_xa_commit_work = 155, 
		RULE_xa_rollback_work = 156, RULE_xa_recover_work = 157, RULE_prepare_statement = 158, 
		RULE_execute_statement = 159, RULE_deallocate_prepare = 160, RULE_routine_body = 161, 
		RULE_block_statement = 162, RULE_case_statement = 163, RULE_if_statement = 164, 
		RULE_iterate_statement = 165, RULE_leave_statement = 166, RULE_loop_statement = 167, 
		RULE_repeat_statement = 168, RULE_return_statement = 169, RULE_while_statement = 170, 
		RULE_cursor_statement = 171, RULE_declare_variable = 172, RULE_declare_condition = 173, 
		RULE_declare_cursor = 174, RULE_declare_handler = 175, RULE_handler_condition_value = 176, 
		RULE_procedure_sql_statement = 177, RULE_alter_user = 178, RULE_create_user = 179, 
		RULE_drop_user = 180, RULE_grant_statement = 181, RULE_grant_proxy = 182, 
		RULE_rename_user = 183, RULE_revoke_statement = 184, RULE_revoke_proxy = 185, 
		RULE_set_password_statement = 186, RULE_user_password_option = 187, RULE_user_auth_option = 188, 
		RULE_tls_option = 189, RULE_user_resource_option = 190, RULE_user_lock_option = 191, 
		RULE_privelege_clause = 192, RULE_privilege = 193, RULE_privilege_level = 194, 
		RULE_set_password_option = 195, RULE_analyze_table = 196, RULE_check_table = 197, 
		RULE_checksum_table = 198, RULE_optimize_table = 199, RULE_repair_table = 200, 
		RULE_check_table_option = 201, RULE_create_udfunction = 202, RULE_install_plugin = 203, 
		RULE_uninstall_plugin = 204, RULE_set_statement = 205, RULE_show_statement = 206, 
		RULE_variable_clause = 207, RULE_show_filter = 208, RULE_show_profile_type = 209, 
		RULE_binlog_statement = 210, RULE_cache_index_statement = 211, RULE_flush_statement = 212, 
		RULE_kill_statement = 213, RULE_load_index_into_cache = 214, RULE_reset_statement = 215, 
		RULE_shutdown_statement = 216, RULE_tbl_index_list = 217, RULE_flush_option = 218, 
		RULE_load_tbl_index_list = 219, RULE_simple_describe_statement = 220, 
		RULE_full_describe_statement = 221, RULE_help_statement = 222, RULE_use_statement = 223, 
		RULE_describe_object_clause = 224, RULE_table_name = 225, RULE_full_id = 226, 
		RULE_full_column_name = 227, RULE_index_col_name = 228, RULE_user_name = 229, 
		RULE_mysql_variable = 230, RULE_charset_name = 231, RULE_collation_name = 232, 
		RULE_engine_name = 233, RULE_uuid_set = 234, RULE_xid = 235, RULE_xid_string_id = 236, 
		RULE_auth_plugin = 237, RULE_id_ = 238, RULE_simple_id = 239, RULE_dot_ext_id = 240, 
		RULE_decimal_literal = 241, RULE_filesize_literal = 242, RULE_string_literal = 243, 
		RULE_boolean_literal = 244, RULE_hexadecimal_literal = 245, RULE_null_notnull = 246, 
		RULE_constant = 247, RULE_data_type = 248, RULE_data_type_to_convert = 249, 
		RULE_spatial_data_type = 250, RULE_length_one_dimension = 251, RULE_length_two_dimension = 252, 
		RULE_length_two_optional_dimension = 253, RULE_id_list = 254, RULE_table_list = 255, 
		RULE_table_pair_list = 256, RULE_index_colname_list = 257, RULE_expression_list = 258, 
		RULE_constant_list = 259, RULE_simple_string_list = 260, RULE_user_var_list = 261, 
		RULE_default_value = 262, RULE_if_exists = 263, RULE_if_not_exists = 264, 
		RULE_function_call = 265, RULE_specific_function_call = 266, RULE_levels_in_weight_string = 267, 
		RULE_aggregate_windowed_function = 268, RULE_scalar_function_name = 269, 
		RULE_function_args = 270, RULE_function_arg = 271, RULE_expression = 272, 
		RULE_boolean_primary = 273, RULE_comparison_operator = 274, RULE_predicate = 275, 
		RULE_bit_expr = 276, RULE_simple_expr = 277, RULE_charset_name_base = 278, 
		RULE_transaction_level_base = 279, RULE_privileges_base = 280, RULE_interval_type_base = 281, 
		RULE_data_type_base = 282, RULE_keywords_can_be_id = 283, RULE_function_name_base = 284;
	public static final String[] ruleNames = {
		"root", "sql_statements", "sql_statement", "empty_statement", "ddl_statement", 
		"dml_statement", "transaction_statement", "replication_statement", "prepared_statement", 
		"compound_statement", "administration_statement", "utility_statement", 
		"create_database", "create_event", "create_index", "create_logfile_group", 
		"create_procedure", "create_function", "create_server", "create_table", 
		"create_tablespace_innodb", "create_tablespace_ndb", "create_trigger", 
		"create_view", "create_database_option", "owner_statement", "schedule_expression", 
		"timestamp_value", "interval_expr", "interval_type", "index_type", "index_option", 
		"proc_param", "func_param", "routine_characteristic", "server_option", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"separate_column_constraint", "table_constraint", "reference_definition", 
		"on_delete_action", "on_update_action", "reference_action_control_type", 
		"index_column_definition", "table_option", "partition_options", "partition_function_definition", 
		"linear_partition_func_def", "partition_def", "subpartition_def", "alter_database", 
		"alter_event", "alter_function", "alter_instance", "alter_logfile_group", 
		"alter_procedure", "alter_server", "alter_table", "alter_tablespace", 
		"alter_view", "alter_table_spec", "drop_database", "drop_event", "drop_index", 
		"drop_logfile_group", "drop_procedure", "drop_function", "drop_server", 
		"drop_table", "drop_tablespace", "drop_trigger", "drop_view", "rename_table", 
		"truncate_table", "call_statement", "delete_statement", "do_statement", 
		"handler_statement", "insert_statement", "load_data_statement", "load_xml_statement", 
		"replace_statement", "select_statement", "update_statement", "insert_statement_value", 
		"update_elem", "col_or_uservar", "single_delete_statement", "multiple_delete_statement", 
		"handler_open_statement", "handler_read_index_statement", "handler_read_statement", 
		"handler_close_statement", "single_update_statement", "multiple_update_statement", 
		"order_by_clause", "order_by_expression", "table_sources", "table_source", 
		"table_source_item", "index_hint", "join_part", "subquery", "query_expression", 
		"query_expression_nointo", "query_specification", "query_specification_nointo", 
		"union_parenth", "union_statement", "select_spec", "select_list", "select_list_elem", 
		"select_into_expression", "from_clause", "group_by_item", "limit_clause", 
		"start_transaction", "begin_work", "commit_work", "rollback_work", "savepoint_statement", 
		"rollback_statement", "release_statement", "lock_tables", "unlock_tables", 
		"set_autocommit_statement", "set_transaction_statement", "transact_option", 
		"lock_table_element", "trans_characteristic", "transaction_level", "change_master", 
		"change_repl_filter", "purge_binary_logs", "reset_master", "reset_slave", 
		"start_slave", "stop_slave", "start_group_repl", "stop_group_repl", "master_option", 
		"string_master_option", "decimal_master_option", "bool_master_option", 
		"channel_option", "repl_filter", "thread_type", "until_option", "start_slave_connection_option", 
		"gtid_set", "xa_start_transaction", "xa_end_transaction", "xa_prepare", 
		"xa_commit_work", "xa_rollback_work", "xa_recover_work", "prepare_statement", 
		"execute_statement", "deallocate_prepare", "routine_body", "block_statement", 
		"case_statement", "if_statement", "iterate_statement", "leave_statement", 
		"loop_statement", "repeat_statement", "return_statement", "while_statement", 
		"cursor_statement", "declare_variable", "declare_condition", "declare_cursor", 
		"declare_handler", "handler_condition_value", "procedure_sql_statement", 
		"alter_user", "create_user", "drop_user", "grant_statement", "grant_proxy", 
		"rename_user", "revoke_statement", "revoke_proxy", "set_password_statement", 
		"user_password_option", "user_auth_option", "tls_option", "user_resource_option", 
		"user_lock_option", "privelege_clause", "privilege", "privilege_level", 
		"set_password_option", "analyze_table", "check_table", "checksum_table", 
		"optimize_table", "repair_table", "check_table_option", "create_udfunction", 
		"install_plugin", "uninstall_plugin", "set_statement", "show_statement", 
		"variable_clause", "show_filter", "show_profile_type", "binlog_statement", 
		"cache_index_statement", "flush_statement", "kill_statement", "load_index_into_cache", 
		"reset_statement", "shutdown_statement", "tbl_index_list", "flush_option", 
		"load_tbl_index_list", "simple_describe_statement", "full_describe_statement", 
		"help_statement", "use_statement", "describe_object_clause", "table_name", 
		"full_id", "full_column_name", "index_col_name", "user_name", "mysql_variable", 
		"charset_name", "collation_name", "engine_name", "uuid_set", "xid", "xid_string_id", 
		"auth_plugin", "id_", "simple_id", "dot_ext_id", "decimal_literal", "filesize_literal", 
		"string_literal", "boolean_literal", "hexadecimal_literal", "null_notnull", 
		"constant", "data_type", "data_type_to_convert", "spatial_data_type", 
		"length_one_dimension", "length_two_dimension", "length_two_optional_dimension", 
		"id_list", "table_list", "table_pair_list", "index_colname_list", "expression_list", 
		"constant_list", "simple_string_list", "user_var_list", "default_value", 
		"if_exists", "if_not_exists", "function_call", "specific_function_call", 
		"levels_in_weight_string", "aggregate_windowed_function", "scalar_function_name", 
		"function_args", "function_arg", "expression", "boolean_primary", "comparison_operator", 
		"predicate", "bit_expr", "simple_expr", "charset_name_base", "transaction_level_base", 
		"privileges_base", "interval_type_base", "data_type_base", "keywords_can_be_id", 
		"function_name_base"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ANALYZE'", 
		"'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", 
		"'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", 
		"'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
		"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
		"'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", 
		"'DESCRIBE'", "'DETERMINISTIC'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
		"'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", 
		"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		"'FROM'", "'FULLTEXT'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
		"'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", 
		"'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", 
		"'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
		"'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
		"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
		"'MODIFIES'", "'NATURAL'", null, "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
		"'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
		"'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
		"'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
		"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESTRICT'", "'RETURN'", 
		"'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
		"'SET'", "'SEPARATOR'", "'SHOW'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
		"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
		"'SQL_SMALL_RESULT'", "'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", 
		"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
		"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
		"'FLOAT'", "'DECIMAL'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
		"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'BINARY'", "'VARBINARY'", 
		"'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
		"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'YEAR_MONTH'", "'DAY_HOUR'", 
		"'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		"'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", 
		"'CHANNEL'", "'CHECKSUM'", "'CIPHER'", "'CLIENT'", "'CLOSE'", "'COALESCE'", 
		"'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
		"'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", 
		"'CONSISTENT'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
		"'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", 
		"'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", 
		"'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
		"'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
		"'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
		"'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
		"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
		"'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", 
		"'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
		"'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
		"'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
		"'INSTALL'", "'INSTANCE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", 
		"'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
		"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
		"'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MID'", "'MIGRATE'", 
		"'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'NAME'", "'NAMES'", 
		"'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", 
		"'OFFSET'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
		"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
		"'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
		"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		"'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", 
		"'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
		"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
		"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
		"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
		"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
		"'RESET'", "'RESUME'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
		"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
		"'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", 
		"'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
		"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STRING'", "'SUBJECT'", "'SUBPARTITION'", 
		"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLESPACE'", 
		"'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
		"'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
		"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
		"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
		"'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
		"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
		"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
		"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
		"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'ARMSCII8'", "'ASCII'", "'BIG5'", 
		"'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
		"'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", 
		"'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", 
		"'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", 
		"'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
		"'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
		"'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
		"'NDB'", "'NDBCLUSTER'", "'PERFOMANCE_SCHEMA'", "'REPEATABLE'", "'COMMITTED'", 
		"'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'LINESTRING'", 
		"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
		"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
		"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
		"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
		"'SHA2'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
		"'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", 
		"'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", 
		"'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
		"'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", 
		"'\"'", "'`'", "':'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", 
		"BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
		"CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
		"CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
		"DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
		"DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", 
		"ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", 
		"FOREIGN", "FROM", "FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
		"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
		"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
		"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MODIFIES", 
		"NATURAL", "NOTNULL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "ON", 
		"OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", 
		"PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", 
		"REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", 
		"RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", 
		"SELECT", "SET", "SEPARATOR", "SHOW", "SPATIAL", "SQL", "SQLEXCEPTION", 
		"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
		"SSL", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", 
		"TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", 
		"UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", 
		"WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", 
		"INT", "INTEGER", "BIGINT", "REAL", "DOUBLE", "FLOAT", "DECIMAL", "NUMERIC", 
		"DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "BINARY", 
		"VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", 
		"TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
		"DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", 
		"MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", 
		"BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", 
		"STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
		"CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", 
		"POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
		"UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
		"ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", 
		"AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BTREE", "CACHE", 
		"CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", 
		"CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", "COMMIT", 
		"COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", 
		"CONSISTENT", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
		"DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
		"DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
		"DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
		"FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", 
		"FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", 
		"GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", 
		"IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
		"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
		"MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
		"MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
		"MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", 
		"MODE", "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER", 
		"NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
		"ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
		"PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
		"PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
		"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
		"QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", 
		"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
		"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
		"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
		"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
		"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		"STATUS", "STOP", "STORAGE", "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
		"SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", "TEMPTABLE", 
		"THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
		"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
		"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
		"VIEW", "WAIT", "WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
		"XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
		"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
		"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
		"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
		"CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", 
		"GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
		"LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", 
		"UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
		"ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
		"MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", "REPEATABLE", "COMMITTED", 
		"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", 
		"MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", 
		"ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
		"ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
		"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
		"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", 
		"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
		"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
		"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
		"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
		"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
		"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
		"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
		"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
		"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
		"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
		"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
		"SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
		"SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
		"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
		"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
		"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
		"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
		"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
		"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
		"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
		"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
		"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
		"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
		"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
		"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
		"ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
		"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
		"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
		"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
		"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
		"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
		"MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
		"EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
		"DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
		"ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public Sql_statementsContext sql_statements() {
			return getRuleContext(Sql_statementsContext.class,0);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN) | (1L << GRANT))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (KILL - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPLACE - 71)) | (1L << (REVOKE - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (BEGIN - 257)) | (1L << (BINLOG - 257)) | (1L << (CACHE - 257)) | (1L << (CHECKSUM - 257)) | (1L << (COMMIT - 257)) | (1L << (DEALLOCATE - 257)) | (1L << (DO - 257)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (FLUSH - 330)) | (1L << (HANDLER - 330)) | (1L << (HELP - 330)) | (1L << (INSTALL - 330)))) != 0) || ((((_la - 438)) & ~0x3f) == 0 && ((1L << (_la - 438)) & ((1L << (PREPARE - 438)) | (1L << (REPAIR - 438)) | (1L << (RESET - 438)) | (1L << (ROLLBACK - 438)) | (1L << (SAVEPOINT - 438)) | (1L << (START - 438)))) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & ((1L << (STOP - 505)) | (1L << (TRUNCATE - 505)) | (1L << (UNINSTALL - 505)) | (1L << (XA - 505)) | (1L << (EXECUTE - 505)) | (1L << (SHUTDOWN - 505)))) != 0) || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(570);
				sql_statements();
				}
			}

			setState(575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS) {
				{
				setState(573);
				match(MINUS);
				setState(574);
				match(MINUS);
				}
			}

			setState(577);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementsContext extends ParserRuleContext {
		public List<Sql_statementContext> sql_statement() {
			return getRuleContexts(Sql_statementContext.class);
		}
		public Sql_statementContext sql_statement(int i) {
			return getRuleContext(Sql_statementContext.class,i);
		}
		public List<Empty_statementContext> empty_statement() {
			return getRuleContexts(Empty_statementContext.class);
		}
		public Empty_statementContext empty_statement(int i) {
			return getRuleContext(Empty_statementContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public Sql_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSql_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSql_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSql_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementsContext sql_statements() throws RecognitionException {
		Sql_statementsContext _localctx = new Sql_statementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sql_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(589);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(587);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(579);
						sql_statement();
						setState(582);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUS) {
							{
							setState(580);
							match(MINUS);
							setState(581);
							match(MINUS);
							}
						}

						setState(584);
						match(SEMI);
						}
						break;
					case SEMI:
						{
						setState(586);
						empty_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(591);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			}
			setState(601);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(592);
				sql_statement();
				setState(598);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					setState(595);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUS) {
						{
						setState(593);
						match(MINUS);
						setState(594);
						match(MINUS);
						}
					}

					setState(597);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(600);
				empty_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Ddl_statementContext ddl_statement() {
			return getRuleContext(Ddl_statementContext.class,0);
		}
		public Dml_statementContext dml_statement() {
			return getRuleContext(Dml_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Replication_statementContext replication_statement() {
			return getRuleContext(Replication_statementContext.class,0);
		}
		public Prepared_statementContext prepared_statement() {
			return getRuleContext(Prepared_statementContext.class,0);
		}
		public Administration_statementContext administration_statement() {
			return getRuleContext(Administration_statementContext.class,0);
		}
		public Utility_statementContext utility_statement() {
			return getRuleContext(Utility_statementContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_statement);
		try {
			setState(610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(603);
				ddl_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(604);
				dml_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(605);
				transaction_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(606);
				replication_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(607);
				prepared_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(608);
				administration_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(609);
				utility_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_statementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEmpty_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEmpty_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEmpty_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_statementContext empty_statement() throws RecognitionException {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_empty_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(612);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_statementContext extends ParserRuleContext {
		public Create_databaseContext create_database() {
			return getRuleContext(Create_databaseContext.class,0);
		}
		public Create_eventContext create_event() {
			return getRuleContext(Create_eventContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_logfile_groupContext create_logfile_group() {
			return getRuleContext(Create_logfile_groupContext.class,0);
		}
		public Create_procedureContext create_procedure() {
			return getRuleContext(Create_procedureContext.class,0);
		}
		public Create_functionContext create_function() {
			return getRuleContext(Create_functionContext.class,0);
		}
		public Create_serverContext create_server() {
			return getRuleContext(Create_serverContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_tablespace_innodbContext create_tablespace_innodb() {
			return getRuleContext(Create_tablespace_innodbContext.class,0);
		}
		public Create_tablespace_ndbContext create_tablespace_ndb() {
			return getRuleContext(Create_tablespace_ndbContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Alter_eventContext alter_event() {
			return getRuleContext(Alter_eventContext.class,0);
		}
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_instanceContext alter_instance() {
			return getRuleContext(Alter_instanceContext.class,0);
		}
		public Alter_logfile_groupContext alter_logfile_group() {
			return getRuleContext(Alter_logfile_groupContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_serverContext alter_server() {
			return getRuleContext(Alter_serverContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_tablespaceContext alter_tablespace() {
			return getRuleContext(Alter_tablespaceContext.class,0);
		}
		public Alter_viewContext alter_view() {
			return getRuleContext(Alter_viewContext.class,0);
		}
		public Drop_databaseContext drop_database() {
			return getRuleContext(Drop_databaseContext.class,0);
		}
		public Drop_eventContext drop_event() {
			return getRuleContext(Drop_eventContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Drop_logfile_groupContext drop_logfile_group() {
			return getRuleContext(Drop_logfile_groupContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_serverContext drop_server() {
			return getRuleContext(Drop_serverContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_tablespaceContext drop_tablespace() {
			return getRuleContext(Drop_tablespaceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Rename_tableContext rename_table() {
			return getRuleContext(Rename_tableContext.class,0);
		}
		public Truncate_tableContext truncate_table() {
			return getRuleContext(Truncate_tableContext.class,0);
		}
		public Ddl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDdl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDdl_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDdl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_statementContext ddl_statement() throws RecognitionException {
		Ddl_statementContext _localctx = new Ddl_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddl_statement);
		try {
			setState(649);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(614);
				create_database();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(615);
				create_event();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(616);
				create_index();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(617);
				create_logfile_group();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(618);
				create_procedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(619);
				create_function();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(620);
				create_server();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(621);
				create_table();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(622);
				create_tablespace_innodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(623);
				create_tablespace_ndb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(624);
				create_trigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(625);
				create_view();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(626);
				alter_database();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(627);
				alter_event();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(628);
				alter_function();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(629);
				alter_instance();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(630);
				alter_logfile_group();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(631);
				alter_procedure();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(632);
				alter_server();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(633);
				alter_table();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(634);
				alter_tablespace();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(635);
				alter_view();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(636);
				drop_database();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(637);
				drop_event();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(638);
				drop_index();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(639);
				drop_logfile_group();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(640);
				drop_procedure();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(641);
				drop_function();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(642);
				drop_server();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(643);
				drop_table();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(644);
				drop_tablespace();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(645);
				drop_trigger();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(646);
				drop_view();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(647);
				rename_table();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(648);
				truncate_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_statementContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Replace_statementContext replace_statement() {
			return getRuleContext(Replace_statementContext.class,0);
		}
		public Call_statementContext call_statement() {
			return getRuleContext(Call_statementContext.class,0);
		}
		public Load_data_statementContext load_data_statement() {
			return getRuleContext(Load_data_statementContext.class,0);
		}
		public Load_xml_statementContext load_xml_statement() {
			return getRuleContext(Load_xml_statementContext.class,0);
		}
		public Do_statementContext do_statement() {
			return getRuleContext(Do_statementContext.class,0);
		}
		public Handler_statementContext handler_statement() {
			return getRuleContext(Handler_statementContext.class,0);
		}
		public Dml_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDml_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDml_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDml_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_statementContext dml_statement() throws RecognitionException {
		Dml_statementContext _localctx = new Dml_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dml_statement);
		try {
			setState(661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(651);
				select_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(652);
				insert_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(653);
				update_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(654);
				delete_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(655);
				replace_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(656);
				call_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(657);
				load_data_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(658);
				load_xml_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(659);
				do_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(660);
				handler_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public Start_transactionContext start_transaction() {
			return getRuleContext(Start_transactionContext.class,0);
		}
		public Begin_workContext begin_work() {
			return getRuleContext(Begin_workContext.class,0);
		}
		public Commit_workContext commit_work() {
			return getRuleContext(Commit_workContext.class,0);
		}
		public Rollback_workContext rollback_work() {
			return getRuleContext(Rollback_workContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Release_statementContext release_statement() {
			return getRuleContext(Release_statementContext.class,0);
		}
		public Lock_tablesContext lock_tables() {
			return getRuleContext(Lock_tablesContext.class,0);
		}
		public Unlock_tablesContext unlock_tables() {
			return getRuleContext(Unlock_tablesContext.class,0);
		}
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transaction_statement);
		try {
			setState(672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(663);
				start_transaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(664);
				begin_work();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(665);
				commit_work();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(666);
				rollback_work();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(667);
				savepoint_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(668);
				rollback_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(669);
				release_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(670);
				lock_tables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(671);
				unlock_tables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replication_statementContext extends ParserRuleContext {
		public Change_masterContext change_master() {
			return getRuleContext(Change_masterContext.class,0);
		}
		public Change_repl_filterContext change_repl_filter() {
			return getRuleContext(Change_repl_filterContext.class,0);
		}
		public Purge_binary_logsContext purge_binary_logs() {
			return getRuleContext(Purge_binary_logsContext.class,0);
		}
		public Reset_masterContext reset_master() {
			return getRuleContext(Reset_masterContext.class,0);
		}
		public Reset_slaveContext reset_slave() {
			return getRuleContext(Reset_slaveContext.class,0);
		}
		public Start_slaveContext start_slave() {
			return getRuleContext(Start_slaveContext.class,0);
		}
		public Stop_slaveContext stop_slave() {
			return getRuleContext(Stop_slaveContext.class,0);
		}
		public Start_group_replContext start_group_repl() {
			return getRuleContext(Start_group_replContext.class,0);
		}
		public Stop_group_replContext stop_group_repl() {
			return getRuleContext(Stop_group_replContext.class,0);
		}
		public Xa_start_transactionContext xa_start_transaction() {
			return getRuleContext(Xa_start_transactionContext.class,0);
		}
		public Xa_end_transactionContext xa_end_transaction() {
			return getRuleContext(Xa_end_transactionContext.class,0);
		}
		public Xa_prepareContext xa_prepare() {
			return getRuleContext(Xa_prepareContext.class,0);
		}
		public Xa_commit_workContext xa_commit_work() {
			return getRuleContext(Xa_commit_workContext.class,0);
		}
		public Xa_rollback_workContext xa_rollback_work() {
			return getRuleContext(Xa_rollback_workContext.class,0);
		}
		public Xa_recover_workContext xa_recover_work() {
			return getRuleContext(Xa_recover_workContext.class,0);
		}
		public Replication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replication_statementContext replication_statement() throws RecognitionException {
		Replication_statementContext _localctx = new Replication_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replication_statement);
		try {
			setState(689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(674);
				change_master();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(675);
				change_repl_filter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(676);
				purge_binary_logs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(677);
				reset_master();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(678);
				reset_slave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(679);
				start_slave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(680);
				stop_slave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(681);
				start_group_repl();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(682);
				stop_group_repl();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(683);
				xa_start_transaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(684);
				xa_end_transaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(685);
				xa_prepare();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(686);
				xa_commit_work();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(687);
				xa_rollback_work();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(688);
				xa_recover_work();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepared_statementContext extends ParserRuleContext {
		public Prepare_statementContext prepare_statement() {
			return getRuleContext(Prepare_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Deallocate_prepareContext deallocate_prepare() {
			return getRuleContext(Deallocate_prepareContext.class,0);
		}
		public Prepared_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepared_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrepared_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrepared_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrepared_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepared_statementContext prepared_statement() throws RecognitionException {
		Prepared_statementContext _localctx = new Prepared_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_prepared_statement);
		try {
			setState(694);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(691);
				prepare_statement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(692);
				execute_statement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(693);
				deallocate_prepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_statementContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Leave_statementContext leave_statement() {
			return getRuleContext(Leave_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Repeat_statementContext repeat_statement() {
			return getRuleContext(Repeat_statementContext.class,0);
		}
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public Iterate_statementContext iterate_statement() {
			return getRuleContext(Iterate_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCompound_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCompound_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCompound_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_statementContext compound_statement() throws RecognitionException {
		Compound_statementContext _localctx = new Compound_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compound_statement);
		try {
			setState(706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(696);
				block_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(697);
				case_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(698);
				if_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(699);
				leave_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(700);
				loop_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(701);
				repeat_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(702);
				while_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(703);
				iterate_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(704);
				return_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(705);
				cursor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Administration_statementContext extends ParserRuleContext {
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Drop_userContext drop_user() {
			return getRuleContext(Drop_userContext.class,0);
		}
		public Grant_statementContext grant_statement() {
			return getRuleContext(Grant_statementContext.class,0);
		}
		public Grant_proxyContext grant_proxy() {
			return getRuleContext(Grant_proxyContext.class,0);
		}
		public Rename_userContext rename_user() {
			return getRuleContext(Rename_userContext.class,0);
		}
		public Revoke_statementContext revoke_statement() {
			return getRuleContext(Revoke_statementContext.class,0);
		}
		public Revoke_proxyContext revoke_proxy() {
			return getRuleContext(Revoke_proxyContext.class,0);
		}
		public Analyze_tableContext analyze_table() {
			return getRuleContext(Analyze_tableContext.class,0);
		}
		public Check_tableContext check_table() {
			return getRuleContext(Check_tableContext.class,0);
		}
		public Checksum_tableContext checksum_table() {
			return getRuleContext(Checksum_tableContext.class,0);
		}
		public Optimize_tableContext optimize_table() {
			return getRuleContext(Optimize_tableContext.class,0);
		}
		public Repair_tableContext repair_table() {
			return getRuleContext(Repair_tableContext.class,0);
		}
		public Create_udfunctionContext create_udfunction() {
			return getRuleContext(Create_udfunctionContext.class,0);
		}
		public Install_pluginContext install_plugin() {
			return getRuleContext(Install_pluginContext.class,0);
		}
		public Uninstall_pluginContext uninstall_plugin() {
			return getRuleContext(Uninstall_pluginContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Show_statementContext show_statement() {
			return getRuleContext(Show_statementContext.class,0);
		}
		public Binlog_statementContext binlog_statement() {
			return getRuleContext(Binlog_statementContext.class,0);
		}
		public Cache_index_statementContext cache_index_statement() {
			return getRuleContext(Cache_index_statementContext.class,0);
		}
		public Flush_statementContext flush_statement() {
			return getRuleContext(Flush_statementContext.class,0);
		}
		public Kill_statementContext kill_statement() {
			return getRuleContext(Kill_statementContext.class,0);
		}
		public Load_index_into_cacheContext load_index_into_cache() {
			return getRuleContext(Load_index_into_cacheContext.class,0);
		}
		public Reset_statementContext reset_statement() {
			return getRuleContext(Reset_statementContext.class,0);
		}
		public Shutdown_statementContext shutdown_statement() {
			return getRuleContext(Shutdown_statementContext.class,0);
		}
		public Administration_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administration_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAdministration_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAdministration_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAdministration_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Administration_statementContext administration_statement() throws RecognitionException {
		Administration_statementContext _localctx = new Administration_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administration_statement);
		try {
			setState(733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(708);
				alter_user();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(709);
				create_user();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(710);
				drop_user();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(711);
				grant_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(712);
				grant_proxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(713);
				rename_user();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(714);
				revoke_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(715);
				revoke_proxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(716);
				analyze_table();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(717);
				check_table();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(718);
				checksum_table();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(719);
				optimize_table();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(720);
				repair_table();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(721);
				create_udfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(722);
				install_plugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(723);
				uninstall_plugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(724);
				set_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(725);
				show_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(726);
				binlog_statement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(727);
				cache_index_statement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(728);
				flush_statement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(729);
				kill_statement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(730);
				load_index_into_cache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(731);
				reset_statement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(732);
				shutdown_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Utility_statementContext extends ParserRuleContext {
		public Simple_describe_statementContext simple_describe_statement() {
			return getRuleContext(Simple_describe_statementContext.class,0);
		}
		public Full_describe_statementContext full_describe_statement() {
			return getRuleContext(Full_describe_statementContext.class,0);
		}
		public Help_statementContext help_statement() {
			return getRuleContext(Help_statementContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public Utility_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utility_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUtility_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUtility_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUtility_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Utility_statementContext utility_statement() throws RecognitionException {
		Utility_statementContext _localctx = new Utility_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utility_statement);
		try {
			setState(739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(735);
				simple_describe_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(736);
				full_describe_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(737);
				help_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(738);
				use_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_databaseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<Create_database_optionContext> create_database_option() {
			return getRuleContexts(Create_database_optionContext.class);
		}
		public Create_database_optionContext create_database_option(int i) {
			return getRuleContext(Create_database_optionContext.class,i);
		}
		public Create_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_databaseContext create_database() throws RecognitionException {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_create_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(741);
			match(CREATE);
			setState(742);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(743);
				if_not_exists();
				}
			}

			setState(746);
			id_();
			setState(750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0)) {
				{
				{
				setState(747);
				create_database_option();
				}
				}
				setState(752);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_eventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public Schedule_expressionContext schedule_expression() {
			return getRuleContext(Schedule_expressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public Routine_bodyContext routine_body() {
			return getRuleContext(Routine_bodyContext.class,0);
		}
		public Owner_statementContext owner_statement() {
			return getRuleContext(Owner_statementContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public Create_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_eventContext create_event() throws RecognitionException {
		Create_eventContext _localctx = new Create_eventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_create_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(753);
			match(CREATE);
			setState(755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(754);
				owner_statement();
				}
			}

			setState(757);
			match(EVENT);
			setState(759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(758);
				if_not_exists();
				}
			}

			setState(761);
			full_id();
			setState(762);
			match(ON);
			setState(763);
			match(SCHEDULE);
			setState(764);
			schedule_expression();
			setState(771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(765);
				match(ON);
				setState(766);
				match(COMPLETION);
				setState(768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(767);
					match(NOT);
					}
				}

				setState(770);
				match(PRESERVE);
				}
			}

			setState(778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(773);
				match(ENABLE);
				}
				break;
			case 2:
				{
				setState(774);
				match(DISABLE);
				}
				break;
			case 3:
				{
				setState(775);
				match(DISABLE);
				setState(776);
				match(ON);
				setState(777);
				match(SLAVE);
				}
				break;
			}
			setState(782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(780);
				match(COMMENT);
				setState(781);
				match(STRING_LITERAL);
				}
			}

			setState(784);
			match(DO);
			setState(785);
			routine_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public Token index_category;
		public Token alg_type;
		public Token lock_type;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public Index_typeContext index_type() {
			return getRuleContext(Index_typeContext.class,0);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(787);
			match(CREATE);
			setState(789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(788);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(791);
				((Create_indexContext)_localctx).index_category = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((Create_indexContext)_localctx).index_category = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(794);
			match(INDEX);
			setState(795);
			id_();
			setState(797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(796);
				index_type();
				}
			}

			setState(799);
			match(ON);
			setState(800);
			table_name();
			setState(801);
			index_colname_list();
			setState(805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
				{
				{
				setState(802);
				index_option();
				}
				}
				setState(807);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(818);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM:
				{
				setState(808);
				match(ALGORITHM);
				setState(810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(809);
					match(EQUAL_SYMBOL);
					}
				}

				setState(812);
				((Create_indexContext)_localctx).alg_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((Create_indexContext)_localctx).alg_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case LOCK:
				{
				setState(813);
				match(LOCK);
				setState(815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(814);
					match(EQUAL_SYMBOL);
					}
				}

				setState(817);
				((Create_indexContext)_localctx).lock_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((Create_indexContext)_localctx).lock_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case EOF:
			case MINUS:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_logfile_groupContext extends ParserRuleContext {
		public Token undo_file;
		public Filesize_literalContext init_size;
		public Filesize_literalContext undo_size;
		public Filesize_literalContext redo_size;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<Filesize_literalContext> filesize_literal() {
			return getRuleContexts(Filesize_literalContext.class);
		}
		public Filesize_literalContext filesize_literal(int i) {
			return getRuleContext(Filesize_literalContext.class,i);
		}
		public Create_logfile_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_logfile_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_logfile_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_logfile_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_logfile_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_logfile_groupContext create_logfile_group() throws RecognitionException {
		Create_logfile_groupContext _localctx = new Create_logfile_groupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_create_logfile_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(820);
			match(CREATE);
			setState(821);
			match(LOGFILE);
			setState(822);
			match(GROUP);
			setState(823);
			id_();
			setState(824);
			match(ADD);
			setState(825);
			match(UNDOFILE);
			setState(826);
			((Create_logfile_groupContext)_localctx).undo_file = match(STRING_LITERAL);
			setState(832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(827);
				match(INITIAL_SIZE);
				setState(829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(828);
					match(EQUAL_SYMBOL);
					}
				}

				setState(831);
				((Create_logfile_groupContext)_localctx).init_size = filesize_literal();
				}
			}

			setState(839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(834);
				match(UNDO_BUFFER_SIZE);
				setState(836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(835);
					match(EQUAL_SYMBOL);
					}
				}

				setState(838);
				((Create_logfile_groupContext)_localctx).undo_size = filesize_literal();
				}
			}

			setState(846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(841);
				match(REDO_BUFFER_SIZE);
				setState(843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(842);
					match(EQUAL_SYMBOL);
					}
				}

				setState(845);
				((Create_logfile_groupContext)_localctx).redo_size = filesize_literal();
				}
			}

			setState(853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(848);
				match(NODEGROUP);
				setState(850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(849);
					match(EQUAL_SYMBOL);
					}
				}

				setState(852);
				id_();
				}
			}

			setState(856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(855);
				match(WAIT);
				}
			}

			setState(863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(858);
				match(COMMENT);
				setState(860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(859);
					match(EQUAL_SYMBOL);
					}
				}

				setState(862);
				((Create_logfile_groupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(865);
			match(ENGINE);
			setState(867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(866);
				match(EQUAL_SYMBOL);
				}
			}

			setState(869);
			engine_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public Routine_bodyContext routine_body() {
			return getRuleContext(Routine_bodyContext.class,0);
		}
		public Owner_statementContext owner_statement() {
			return getRuleContext(Owner_statementContext.class,0);
		}
		public List<Proc_paramContext> proc_param() {
			return getRuleContexts(Proc_paramContext.class);
		}
		public Proc_paramContext proc_param(int i) {
			return getRuleContext(Proc_paramContext.class,i);
		}
		public List<Routine_characteristicContext> routine_characteristic() {
			return getRuleContexts(Routine_characteristicContext.class);
		}
		public Routine_characteristicContext routine_characteristic(int i) {
			return getRuleContext(Routine_characteristicContext.class,i);
		}
		public Create_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedureContext create_procedure() throws RecognitionException {
		Create_procedureContext _localctx = new Create_procedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_create_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(871);
			match(CREATE);
			setState(873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(872);
				owner_statement();
				}
			}

			setState(875);
			match(PROCEDURE);
			setState(876);
			full_id();
			setState(877);
			match(LR_BRACKET);
			setState(879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (IN - 66)) | (1L << (INOUT - 66)) | (1L << (OUT - 66)))) != 0)) {
				{
				setState(878);
				proc_param();
				}
			}

			setState(885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(881);
				match(COMMA);
				setState(882);
				proc_param();
				}
				}
				setState(887);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(888);
			match(RR_BRACKET);
			setState(892);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,47,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(889);
					routine_characteristic();
					}
					} 
				}
				setState(894);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,47,_ctx);
			}
			setState(895);
			routine_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_functionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Routine_bodyContext routine_body() {
			return getRuleContext(Routine_bodyContext.class,0);
		}
		public Owner_statementContext owner_statement() {
			return getRuleContext(Owner_statementContext.class,0);
		}
		public List<Func_paramContext> func_param() {
			return getRuleContexts(Func_paramContext.class);
		}
		public Func_paramContext func_param(int i) {
			return getRuleContext(Func_paramContext.class,i);
		}
		public List<Routine_characteristicContext> routine_characteristic() {
			return getRuleContexts(Routine_characteristicContext.class);
		}
		public Routine_characteristicContext routine_characteristic(int i) {
			return getRuleContext(Routine_characteristicContext.class,i);
		}
		public Create_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_functionContext create_function() throws RecognitionException {
		Create_functionContext _localctx = new Create_functionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_create_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(897);
			match(CREATE);
			setState(899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(898);
				owner_statement();
				}
			}

			setState(901);
			match(FUNCTION);
			setState(902);
			full_id();
			setState(903);
			match(LR_BRACKET);
			setState(905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(904);
				func_param();
				}
			}

			setState(911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(907);
				match(COMMA);
				setState(908);
				func_param();
				}
				}
				setState(913);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(914);
			match(RR_BRACKET);
			setState(915);
			match(RETURNS);
			setState(916);
			data_type();
			setState(920);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(917);
					routine_characteristic();
					}
					} 
				}
				setState(922);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			}
			setState(923);
			routine_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_serverContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public List<Server_optionContext> server_option() {
			return getRuleContexts(Server_optionContext.class);
		}
		public Server_optionContext server_option(int i) {
			return getRuleContext(Server_optionContext.class,i);
		}
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Create_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_serverContext create_server() throws RecognitionException {
		Create_serverContext _localctx = new Create_serverContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_create_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(925);
			match(CREATE);
			setState(926);
			match(SERVER);
			setState(927);
			id_();
			setState(928);
			match(FOREIGN);
			setState(929);
			match(DATA);
			setState(930);
			match(WRAPPER);
			setState(931);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(932);
			match(OPTIONS);
			setState(933);
			match(LR_BRACKET);
			setState(934);
			server_option();
			setState(939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(935);
				match(COMMA);
				setState(936);
				server_option();
				}
				}
				setState(941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(942);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
	 
		public Create_tableContext() { }
		public void copyFrom(Create_tableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColCreateTableContext extends Create_tableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<Table_optionContext> table_option() {
			return getRuleContexts(Table_optionContext.class);
		}
		public Table_optionContext table_option(int i) {
			return getRuleContext(Table_optionContext.class,i);
		}
		public Partition_optionsContext partition_options() {
			return getRuleContext(Partition_optionsContext.class,0);
		}
		public ColCreateTableContext(Create_tableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CopyCreateTableContext extends Create_tableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public CopyCreateTableContext(Create_tableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCopyCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryCreateTableContext extends Create_tableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public List<Table_optionContext> table_option() {
			return getRuleContexts(Table_optionContext.class);
		}
		public Table_optionContext table_option(int i) {
			return getRuleContext(Table_optionContext.class,i);
		}
		public Partition_optionsContext partition_options() {
			return getRuleContext(Partition_optionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public QueryCreateTableContext(Create_tableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_create_table);
		int _la;
		try {
			setState(1022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(944);
				match(CREATE);
				setState(946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(945);
					match(TEMPORARY);
					}
				}

				setState(948);
				match(TABLE);
				setState(950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(949);
					if_not_exists();
					}
				}

				setState(952);
				table_name();
				setState(960);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(953);
					match(LIKE);
					setState(954);
					table_name();
					}
					break;
				case LR_BRACKET:
					{
					setState(955);
					match(LR_BRACKET);
					setState(956);
					match(LIKE);
					setState(957);
					table_name();
					setState(958);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(962);
				match(CREATE);
				setState(964);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(963);
					match(TEMPORARY);
					}
				}

				setState(966);
				match(TABLE);
				setState(968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(967);
					if_not_exists();
					}
				}

				setState(970);
				table_name();
				setState(972);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(971);
					column_def_table_constraints();
					}
					break;
				}
				setState(984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (AUTO_INCREMENT - 255)) | (1L << (AVG_ROW_LENGTH - 255)) | (1L << (CHECKSUM - 255)) | (1L << (COMMENT - 255)) | (1L << (COMPRESSION - 255)) | (1L << (CONNECTION - 255)) | (1L << (DATA - 255)) | (1L << (DELAY_KEY_WRITE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENGINE - 255)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INSERT_METHOD - 350)) | (1L << (KEY_BLOCK_SIZE - 350)) | (1L << (MAX_ROWS - 350)) | (1L << (MIN_ROWS - 350)))) != 0) || ((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (PACK_KEYS - 425)) | (1L << (PASSWORD - 425)) | (1L << (ROW_FORMAT - 425)))) != 0) || ((((_la - 501)) & ~0x3f) == 0 && ((1L << (_la - 501)) & ((1L << (STATS_AUTO_RECALC - 501)) | (1L << (STATS_PERSISTENT - 501)) | (1L << (STATS_SAMPLE_PAGES - 501)) | (1L << (TABLESPACE - 501)))) != 0) || _la==CHARSET) {
					{
					setState(974);
					table_option();
					setState(981);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (AUTO_INCREMENT - 255)) | (1L << (AVG_ROW_LENGTH - 255)) | (1L << (CHECKSUM - 255)) | (1L << (COMMENT - 255)) | (1L << (COMPRESSION - 255)) | (1L << (CONNECTION - 255)) | (1L << (DATA - 255)) | (1L << (DELAY_KEY_WRITE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENGINE - 255)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INSERT_METHOD - 350)) | (1L << (KEY_BLOCK_SIZE - 350)) | (1L << (MAX_ROWS - 350)) | (1L << (MIN_ROWS - 350)))) != 0) || ((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (PACK_KEYS - 425)) | (1L << (PASSWORD - 425)) | (1L << (ROW_FORMAT - 425)))) != 0) || ((((_la - 501)) & ~0x3f) == 0 && ((1L << (_la - 501)) & ((1L << (STATS_AUTO_RECALC - 501)) | (1L << (STATS_PERSISTENT - 501)) | (1L << (STATS_SAMPLE_PAGES - 501)) | (1L << (TABLESPACE - 501)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(976);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(975);
							match(COMMA);
							}
						}

						setState(978);
						table_option();
						}
						}
						setState(983);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(986);
					partition_options();
					}
				}

				setState(990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(989);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(992);
					match(AS);
					}
				}

				setState(995);
				select_statement();
				}
				break;
			case 3:
				_localctx = new ColCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(997);
				match(CREATE);
				setState(999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(998);
					match(TEMPORARY);
					}
				}

				setState(1001);
				match(TABLE);
				setState(1003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1002);
					if_not_exists();
					}
				}

				setState(1005);
				table_name();
				setState(1006);
				column_def_table_constraints();
				setState(1017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (AUTO_INCREMENT - 255)) | (1L << (AVG_ROW_LENGTH - 255)) | (1L << (CHECKSUM - 255)) | (1L << (COMMENT - 255)) | (1L << (COMPRESSION - 255)) | (1L << (CONNECTION - 255)) | (1L << (DATA - 255)) | (1L << (DELAY_KEY_WRITE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENGINE - 255)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INSERT_METHOD - 350)) | (1L << (KEY_BLOCK_SIZE - 350)) | (1L << (MAX_ROWS - 350)) | (1L << (MIN_ROWS - 350)))) != 0) || ((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (PACK_KEYS - 425)) | (1L << (PASSWORD - 425)) | (1L << (ROW_FORMAT - 425)))) != 0) || ((((_la - 501)) & ~0x3f) == 0 && ((1L << (_la - 501)) & ((1L << (STATS_AUTO_RECALC - 501)) | (1L << (STATS_PERSISTENT - 501)) | (1L << (STATS_SAMPLE_PAGES - 501)) | (1L << (TABLESPACE - 501)))) != 0) || _la==CHARSET) {
					{
					setState(1007);
					table_option();
					setState(1014);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (AUTO_INCREMENT - 255)) | (1L << (AVG_ROW_LENGTH - 255)) | (1L << (CHECKSUM - 255)) | (1L << (COMMENT - 255)) | (1L << (COMPRESSION - 255)) | (1L << (CONNECTION - 255)) | (1L << (DATA - 255)) | (1L << (DELAY_KEY_WRITE - 255)) | (1L << (ENCRYPTION - 255)) | (1L << (ENGINE - 255)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (INSERT_METHOD - 350)) | (1L << (KEY_BLOCK_SIZE - 350)) | (1L << (MAX_ROWS - 350)) | (1L << (MIN_ROWS - 350)))) != 0) || ((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (PACK_KEYS - 425)) | (1L << (PASSWORD - 425)) | (1L << (ROW_FORMAT - 425)))) != 0) || ((((_la - 501)) & ~0x3f) == 0 && ((1L << (_la - 501)) & ((1L << (STATS_AUTO_RECALC - 501)) | (1L << (STATS_PERSISTENT - 501)) | (1L << (STATS_SAMPLE_PAGES - 501)) | (1L << (TABLESPACE - 501)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1009);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1008);
							match(COMMA);
							}
						}

						setState(1011);
						table_option();
						}
						}
						setState(1016);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1019);
					partition_options();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tablespace_innodbContext extends ParserRuleContext {
		public Token datafile;
		public Filesize_literalContext fb_size;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public Filesize_literalContext filesize_literal() {
			return getRuleContext(Filesize_literalContext.class,0);
		}
		public Create_tablespace_innodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablespace_innodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_tablespace_innodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_tablespace_innodb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_tablespace_innodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tablespace_innodbContext create_tablespace_innodb() throws RecognitionException {
		Create_tablespace_innodbContext _localctx = new Create_tablespace_innodbContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_create_tablespace_innodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1024);
			match(CREATE);
			setState(1025);
			match(TABLESPACE);
			setState(1026);
			id_();
			setState(1027);
			match(ADD);
			setState(1028);
			match(DATAFILE);
			setState(1029);
			((Create_tablespace_innodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1030);
				match(FILE_BLOCK_SIZE);
				setState(1031);
				match(EQUAL_SYMBOL);
				setState(1032);
				((Create_tablespace_innodbContext)_localctx).fb_size = filesize_literal();
				}
			}

			setState(1040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1035);
				match(ENGINE);
				setState(1037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1036);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1039);
				engine_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tablespace_ndbContext extends ParserRuleContext {
		public Token datafile;
		public Filesize_literalContext extent_size;
		public Filesize_literalContext initial_size;
		public Filesize_literalContext autoextend_size;
		public Filesize_literalContext max_size;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<Filesize_literalContext> filesize_literal() {
			return getRuleContexts(Filesize_literalContext.class);
		}
		public Filesize_literalContext filesize_literal(int i) {
			return getRuleContext(Filesize_literalContext.class,i);
		}
		public Create_tablespace_ndbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablespace_ndb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_tablespace_ndb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_tablespace_ndb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_tablespace_ndb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tablespace_ndbContext create_tablespace_ndb() throws RecognitionException {
		Create_tablespace_ndbContext _localctx = new Create_tablespace_ndbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_create_tablespace_ndb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1042);
			match(CREATE);
			setState(1043);
			match(TABLESPACE);
			setState(1044);
			id_();
			setState(1045);
			match(ADD);
			setState(1046);
			match(DATAFILE);
			setState(1047);
			((Create_tablespace_ndbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1048);
			match(USE);
			setState(1049);
			match(LOGFILE);
			setState(1050);
			match(GROUP);
			setState(1051);
			id_();
			setState(1057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1052);
				match(EXTENT_SIZE);
				setState(1054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1053);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1056);
				((Create_tablespace_ndbContext)_localctx).extent_size = filesize_literal();
				}
			}

			setState(1064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1059);
				match(INITIAL_SIZE);
				setState(1061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1060);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1063);
				((Create_tablespace_ndbContext)_localctx).initial_size = filesize_literal();
				}
			}

			setState(1071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1066);
				match(AUTOEXTEND_SIZE);
				setState(1068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1067);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1070);
				((Create_tablespace_ndbContext)_localctx).autoextend_size = filesize_literal();
				}
			}

			setState(1078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1073);
				match(MAX_SIZE);
				setState(1075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1074);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1077);
				((Create_tablespace_ndbContext)_localctx).max_size = filesize_literal();
				}
			}

			setState(1085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1080);
				match(NODEGROUP);
				setState(1082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1081);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1084);
				id_();
				}
			}

			setState(1088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1087);
				match(WAIT);
				}
			}

			setState(1095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1090);
				match(COMMENT);
				setState(1092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1091);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1094);
				((Create_tablespace_ndbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1097);
			match(ENGINE);
			setState(1099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1098);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1101);
			engine_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public Full_idContext this_trigger;
		public Token trigger_time;
		public Token trigger_event;
		public Full_idContext other_trigger;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(MySqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public Routine_bodyContext routine_body() {
			return getRuleContext(Routine_bodyContext.class,0);
		}
		public List<Full_idContext> full_id() {
			return getRuleContexts(Full_idContext.class);
		}
		public Full_idContext full_id(int i) {
			return getRuleContext(Full_idContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public Owner_statementContext owner_statement() {
			return getRuleContext(Owner_statementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1103);
			match(CREATE);
			setState(1105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1104);
				owner_statement();
				}
			}

			setState(1107);
			match(TRIGGER);
			setState(1108);
			((Create_triggerContext)_localctx).this_trigger = full_id();
			setState(1109);
			((Create_triggerContext)_localctx).trigger_time = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((Create_triggerContext)_localctx).trigger_time = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1110);
			((Create_triggerContext)_localctx).trigger_event = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((Create_triggerContext)_localctx).trigger_event = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1111);
			match(ON);
			setState(1112);
			table_name();
			setState(1113);
			match(FOR);
			setState(1114);
			match(EACH);
			setState(1115);
			match(ROW);
			setState(1118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOLLOWS || _la==PRECEDES) {
				{
				setState(1116);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1117);
				((Create_triggerContext)_localctx).other_trigger = full_id();
				}
			}

			setState(1120);
			routine_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public Token alg_type;
		public Token sec_context;
		public Token check_option;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public Owner_statementContext owner_statement() {
			return getRuleContext(Owner_statementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1122);
			match(CREATE);
			setState(1125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1123);
				match(OR);
				setState(1124);
				match(REPLACE);
				}
			}

			setState(1130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1127);
				match(ALGORITHM);
				setState(1128);
				match(EQUAL_SYMBOL);
				setState(1129);
				((Create_viewContext)_localctx).alg_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((Create_viewContext)_localctx).alg_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1132);
				owner_statement();
				}
			}

			setState(1138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1135);
				match(SQL);
				setState(1136);
				match(SECURITY);
				setState(1137);
				((Create_viewContext)_localctx).sec_context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((Create_viewContext)_localctx).sec_context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1140);
			match(VIEW);
			setState(1141);
			full_id();
			setState(1146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1142);
				match(LR_BRACKET);
				setState(1143);
				id_list();
				setState(1144);
				match(RR_BRACKET);
				}
			}

			setState(1148);
			match(AS);
			setState(1149);
			select_statement();
			setState(1156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1150);
				match(WITH);
				setState(1152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1151);
					((Create_viewContext)_localctx).check_option = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((Create_viewContext)_localctx).check_option = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1154);
				match(CHECK);
				setState(1155);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_optionContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Create_database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_database_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_database_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_database_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_database_optionContext create_database_option() throws RecognitionException {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_create_database_option);
		int _la;
		try {
			setState(1175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1158);
					match(DEFAULT);
					}
				}

				setState(1161);
				match(CHARACTER);
				setState(1162);
				match(SET);
				setState(1164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1163);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1166);
				charset_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1167);
					match(DEFAULT);
					}
				}

				setState(1170);
				match(COLLATE);
				setState(1172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1171);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1174);
				collation_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Owner_statementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public Owner_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOwner_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOwner_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOwner_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Owner_statementContext owner_statement() throws RecognitionException {
		Owner_statementContext _localctx = new Owner_statementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_owner_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1177);
			match(DEFINER);
			setState(1178);
			match(EQUAL_SYMBOL);
			setState(1185);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_USER_NAME:
				{
				setState(1179);
				user_name();
				}
				break;
			case CURRENT_USER:
				{
				setState(1180);
				match(CURRENT_USER);
				setState(1183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1181);
					match(LR_BRACKET);
					setState(1182);
					match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schedule_expressionContext extends ParserRuleContext {
		public Schedule_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schedule_expression; }
	 
		public Schedule_expressionContext() { }
		public void copyFrom(Schedule_expressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends Schedule_expressionContext {
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public Timestamp_valueContext timestamp_value() {
			return getRuleContext(Timestamp_valueContext.class,0);
		}
		public List<Interval_exprContext> interval_expr() {
			return getRuleContexts(Interval_exprContext.class);
		}
		public Interval_exprContext interval_expr(int i) {
			return getRuleContext(Interval_exprContext.class,i);
		}
		public PreciseScheduleContext(Schedule_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreciseSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends Schedule_expressionContext {
		public Timestamp_valueContext startts;
		public Interval_exprContext interval_expr;
		public List<Interval_exprContext> start_intervals = new ArrayList<Interval_exprContext>();
		public Timestamp_valueContext endts;
		public List<Interval_exprContext> end_intervals = new ArrayList<Interval_exprContext>();
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public Interval_typeContext interval_type() {
			return getRuleContext(Interval_typeContext.class,0);
		}
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public List<Timestamp_valueContext> timestamp_value() {
			return getRuleContexts(Timestamp_valueContext.class);
		}
		public Timestamp_valueContext timestamp_value(int i) {
			return getRuleContext(Timestamp_valueContext.class,i);
		}
		public List<Interval_exprContext> interval_expr() {
			return getRuleContexts(Interval_exprContext.class);
		}
		public Interval_exprContext interval_expr(int i) {
			return getRuleContext(Interval_exprContext.class,i);
		}
		public IntervalScheduleContext(Schedule_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schedule_expressionContext schedule_expression() throws RecognitionException {
		Schedule_expressionContext _localctx = new Schedule_expressionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_schedule_expression);
		int _la;
		try {
			setState(1221);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1187);
				match(AT);
				setState(1188);
				timestamp_value();
				setState(1192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERVAL) {
					{
					{
					setState(1189);
					interval_expr();
					}
					}
					setState(1194);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1195);
				match(EVERY);
				setState(1198);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
				case 1:
					{
					setState(1196);
					decimal_literal();
					}
					break;
				case 2:
					{
					setState(1197);
					expression(0);
					}
					break;
				}
				setState(1200);
				interval_type();
				setState(1209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1201);
					match(STARTS);
					setState(1202);
					((IntervalScheduleContext)_localctx).startts = timestamp_value();
					setState(1206);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==INTERVAL) {
						{
						{
						setState(1203);
						((IntervalScheduleContext)_localctx).interval_expr = interval_expr();
						((IntervalScheduleContext)_localctx).start_intervals.add(((IntervalScheduleContext)_localctx).interval_expr);
						}
						}
						setState(1208);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1211);
					match(ENDS);
					setState(1212);
					((IntervalScheduleContext)_localctx).endts = timestamp_value();
					setState(1216);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==INTERVAL) {
						{
						{
						setState(1213);
						((IntervalScheduleContext)_localctx).interval_expr = interval_expr();
						((IntervalScheduleContext)_localctx).end_intervals.add(((IntervalScheduleContext)_localctx).interval_expr);
						}
						}
						setState(1218);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_valueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public String_literalContext string_literal() {
			return getRuleContext(String_literalContext.class,0);
		}
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Timestamp_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTimestamp_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTimestamp_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTimestamp_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timestamp_valueContext timestamp_value() throws RecognitionException {
		Timestamp_valueContext _localctx = new Timestamp_valueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_timestamp_value);
		try {
			setState(1227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1223);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1224);
				string_literal();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1225);
				decimal_literal();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1226);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_exprContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public Interval_typeContext interval_type() {
			return getRuleContext(Interval_typeContext.class,0);
		}
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Interval_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInterval_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInterval_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInterval_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_exprContext interval_expr() throws RecognitionException {
		Interval_exprContext _localctx = new Interval_exprContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_interval_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1229);
			match(INTERVAL);
			setState(1232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(1230);
				decimal_literal();
				}
				break;
			case 2:
				{
				setState(1231);
				expression(0);
				}
				break;
			}
			setState(1234);
			interval_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_typeContext extends ParserRuleContext {
		public Interval_type_baseContext interval_type_base() {
			return getRuleContext(Interval_type_baseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public Interval_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInterval_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInterval_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInterval_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_typeContext interval_type() throws RecognitionException {
		Interval_typeContext _localctx = new Interval_typeContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_interval_type);
		try {
			setState(1249);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1236);
				interval_type_base();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1237);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1238);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1239);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1240);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1241);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1242);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1243);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1244);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1245);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1246);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1247);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1248);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_typeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public Index_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndex_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndex_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndex_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_typeContext index_type() throws RecognitionException {
		Index_typeContext _localctx = new Index_typeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_index_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1251);
			match(USING);
			setState(1252);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public Filesize_literalContext filesize_literal() {
			return getRuleContext(Filesize_literalContext.class,0);
		}
		public Index_typeContext index_type() {
			return getRuleContext(Index_typeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndex_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndex_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndex_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_index_option);
		int _la;
		try {
			setState(1265);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1254);
				match(KEY_BLOCK_SIZE);
				setState(1256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1255);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1258);
				filesize_literal();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1259);
				index_type();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1260);
				match(WITH);
				setState(1261);
				match(PARSER);
				setState(1262);
				id_();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1263);
				match(COMMENT);
				setState(1264);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_paramContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(MySqlParser.INOUT, 0); }
		public Proc_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProc_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProc_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProc_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_paramContext proc_param() throws RecognitionException {
		Proc_paramContext _localctx = new Proc_paramContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_proc_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1267);
			_la = _input.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (IN - 66)) | (1L << (INOUT - 66)) | (1L << (OUT - 66)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1268);
			id_();
			setState(1269);
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_paramContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Func_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunc_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunc_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunc_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_paramContext func_param() throws RecognitionException {
		Func_paramContext _localctx = new Func_paramContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_func_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1271);
			id_();
			setState(1272);
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_characteristicContext extends ParserRuleContext {
		public Routine_characteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_characteristic; }
	 
		public Routine_characteristicContext() { }
		public void copyFrom(Routine_characteristicContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RcSqllangContext extends Routine_characteristicContext {
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public RcSqllangContext(Routine_characteristicContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRcSqllang(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRcSqllang(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRcSqllang(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RcSqldataContext extends Routine_characteristicContext {
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode READS() { return getToken(MySqlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(MySqlParser.MODIFIES, 0); }
		public RcSqldataContext(Routine_characteristicContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRcSqldata(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRcSqldata(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRcSqldata(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RcCommentContext extends Routine_characteristicContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public RcCommentContext(Routine_characteristicContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRcComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRcComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRcComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RcDetermContext extends Routine_characteristicContext {
		public TerminalNode DETERMINISTIC() { return getToken(MySqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RcDetermContext(Routine_characteristicContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRcDeterm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRcDeterm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRcDeterm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RcSecurestmtContext extends Routine_characteristicContext {
		public Token sec_context;
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public RcSecurestmtContext(Routine_characteristicContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRcSecurestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRcSecurestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRcSecurestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_characteristicContext routine_characteristic() throws RecognitionException {
		Routine_characteristicContext _localctx = new Routine_characteristicContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_routine_characteristic);
		int _la;
		try {
			setState(1297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RcCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1274);
				match(COMMENT);
				setState(1275);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RcSqllangContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1276);
				match(LANGUAGE);
				setState(1277);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RcDetermContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1278);
					match(NOT);
					}
				}

				setState(1281);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RcSqldataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1292);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1282);
					match(CONTAINS);
					setState(1283);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1284);
					match(NO);
					setState(1285);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1286);
					match(READS);
					setState(1287);
					match(SQL);
					setState(1288);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1289);
					match(MODIFIES);
					setState(1290);
					match(SQL);
					setState(1291);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RcSecurestmtContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1294);
				match(SQL);
				setState(1295);
				match(SECURITY);
				setState(1296);
				((RcSecurestmtContext)_localctx).sec_context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RcSecurestmtContext)_localctx).sec_context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Server_optionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public Server_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_server_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterServer_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitServer_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitServer_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Server_optionContext server_option() throws RecognitionException {
		Server_optionContext _localctx = new Server_optionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_server_option);
		try {
			setState(1313);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1299);
				match(HOST);
				setState(1300);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1301);
				match(DATABASE);
				setState(1302);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1303);
				match(USER);
				setState(1304);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1305);
				match(PASSWORD);
				setState(1306);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1307);
				match(SOCKET);
				setState(1308);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1309);
				match(OWNER);
				setState(1310);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1311);
				match(PORT);
				setState(1312);
				decimal_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumn_def_table_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumn_def_table_constraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumn_def_table_constraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_column_def_table_constraints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1315);
			match(LR_BRACKET);
			setState(1316);
			column_def_table_constraint();
			setState(1321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1317);
				match(COMMA);
				setState(1318);
				column_def_table_constraint();
				}
				}
				setState(1323);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1324);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
	 
		public Column_def_table_constraintContext() { }
		public void copyFrom(Column_def_table_constraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ConstraintDefinitionContext extends Column_def_table_constraintContext {
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public ConstraintDefinitionContext(Column_def_table_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstraintDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstraintDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstraintDefinition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnDefinitionContext extends Column_def_table_constraintContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public ColumnDefinitionContext(Column_def_table_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDefinitionContext extends Column_def_table_constraintContext {
		public Index_column_definitionContext index_column_definition() {
			return getRuleContext(Index_column_definitionContext.class,0);
		}
		public IndexDefinitionContext(Column_def_table_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_column_def_table_constraint);
		try {
			setState(1331);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDefinitionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1326);
				id_();
				setState(1327);
				column_definition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDefinitionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1329);
				table_constraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDefinitionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1330);
				index_column_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<Separate_column_constraintContext> separate_column_constraint() {
			return getRuleContexts(Separate_column_constraintContext.class);
		}
		public Separate_column_constraintContext separate_column_constraint(int i) {
			return getRuleContext(Separate_column_constraintContext.class,i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1333);
			data_type();
			setState(1337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (DEFAULT - 36)) | (1L << (KEY - 36)) | (1L << (NOTNULL - 36)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (NULL_LITERAL - 100)) | (1L << (PRIMARY - 100)) | (1L << (REFERENCES - 100)) | (1L << (UNIQUE - 100)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (AUTO_INCREMENT - 255)) | (1L << (COLUMN_FORMAT - 255)) | (1L << (COMMENT - 255)))) != 0) || _la==STORAGE || _la==NULL_SPEC_LITERAL) {
				{
				{
				setState(1334);
				separate_column_constraint();
				}
				}
				setState(1339);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Separate_column_constraintContext extends ParserRuleContext {
		public Separate_column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_separate_column_constraint; }
	 
		public Separate_column_constraintContext() { }
		public void copyFrom(Separate_column_constraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColConstrDfltContext extends Separate_column_constraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public ColConstrDfltContext(Separate_column_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColConstrDflt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColConstrDflt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColConstrDflt(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColConstrPKContext extends Separate_column_constraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public ColConstrPKContext(Separate_column_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColConstrPK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColConstrPK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColConstrPK(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColConstrAuIncContext extends Separate_column_constraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public ColConstrAuIncContext(Separate_column_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColConstrAuInc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColConstrAuInc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColConstrAuInc(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColConstrCommentContext extends Separate_column_constraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ColConstrCommentContext(Separate_column_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColConstrComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColConstrComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColConstrComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColConstrNullContext extends Separate_column_constraintContext {
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public ColConstrNullContext(Separate_column_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColConstrNull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColConstrNull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColConstrNull(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColConstrFormContext extends Separate_column_constraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ColConstrFormContext(Separate_column_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColConstrForm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColConstrForm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColConstrForm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColConstrRefdefContext extends Separate_column_constraintContext {
		public Reference_definitionContext reference_definition() {
			return getRuleContext(Reference_definitionContext.class,0);
		}
		public ColConstrRefdefContext(Separate_column_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColConstrRefdef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColConstrRefdef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColConstrRefdef(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColConstrStorageContext extends Separate_column_constraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ColConstrStorageContext(Separate_column_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColConstrStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColConstrStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColConstrStorage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColConstrUKContext extends Separate_column_constraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public ColConstrUKContext(Separate_column_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColConstrUK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColConstrUK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColConstrUK(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Separate_column_constraintContext separate_column_constraint() throws RecognitionException {
		Separate_column_constraintContext _localctx = new Separate_column_constraintContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_separate_column_constraint);
		int _la;
		try {
			setState(1359);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTNULL:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new ColConstrNullContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1340);
				null_notnull();
				}
				break;
			case DEFAULT:
				_localctx = new ColConstrDfltContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1341);
				match(DEFAULT);
				setState(1342);
				default_value();
				}
				break;
			case AUTO_INCREMENT:
				_localctx = new ColConstrAuIncContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1343);
				match(AUTO_INCREMENT);
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new ColConstrPKContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1344);
					match(PRIMARY);
					}
				}

				setState(1347);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new ColConstrUKContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1348);
				match(UNIQUE);
				setState(1350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(1349);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new ColConstrCommentContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1352);
				match(COMMENT);
				setState(1353);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new ColConstrFormContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1354);
				match(COLUMN_FORMAT);
				setState(1355);
				((ColConstrFormContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((ColConstrFormContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new ColConstrStorageContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1356);
				match(STORAGE);
				setState(1357);
				((ColConstrStorageContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((ColConstrStorageContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ColConstrRefdefContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1358);
				reference_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
	 
		public Table_constraintContext() { }
		public void copyFrom(Table_constraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TblConstCheckContext extends Table_constraintContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TblConstCheckContext(Table_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblConstCheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblConstCheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblConstCheck(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblConstrPKContext extends Table_constraintContext {
		public Id_Context constr_name;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public Index_typeContext index_type() {
			return getRuleContext(Index_typeContext.class,0);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TblConstrPKContext(Table_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblConstrPK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblConstrPK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblConstrPK(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblConstrUKContext extends Table_constraintContext {
		public Id_Context constr_name;
		public Id_Context index_name;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public Index_typeContext index_type() {
			return getRuleContext(Index_typeContext.class,0);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TblConstrUKContext(Table_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblConstrUK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblConstrUK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblConstrUK(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblConstrFKContext extends Table_constraintContext {
		public Id_Context constr_name;
		public Id_Context index_name;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public Reference_definitionContext reference_definition() {
			return getRuleContext(Reference_definitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TblConstrFKContext(Table_constraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblConstrFK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblConstrFK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblConstrFK(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_table_constraint);
		int _la;
		try {
			setState(1421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				_localctx = new TblConstrPKContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1361);
					match(CONSTRAINT);
					setState(1363);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
						{
						setState(1362);
						((TblConstrPKContext)_localctx).constr_name = id_();
						}
					}

					}
				}

				setState(1367);
				match(PRIMARY);
				setState(1368);
				match(KEY);
				setState(1370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1369);
					index_type();
					}
				}

				setState(1372);
				index_colname_list();
				setState(1376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1373);
					index_option();
					}
					}
					setState(1378);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new TblConstrUKContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1379);
					match(CONSTRAINT);
					setState(1381);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
						{
						setState(1380);
						((TblConstrUKContext)_localctx).constr_name = id_();
						}
					}

					}
				}

				setState(1385);
				match(UNIQUE);
				setState(1387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1386);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(1389);
					((TblConstrUKContext)_localctx).index_name = id_();
					}
				}

				setState(1393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1392);
					index_type();
					}
				}

				setState(1395);
				index_colname_list();
				setState(1399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1396);
					index_option();
					}
					}
					setState(1401);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new TblConstrFKContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1402);
					match(CONSTRAINT);
					setState(1404);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
						{
						setState(1403);
						((TblConstrFKContext)_localctx).constr_name = id_();
						}
					}

					}
				}

				setState(1408);
				match(FOREIGN);
				setState(1409);
				match(KEY);
				setState(1411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(1410);
					((TblConstrFKContext)_localctx).index_name = id_();
					}
				}

				setState(1413);
				index_colname_list();
				setState(1414);
				reference_definition();
				}
				break;
			case 4:
				_localctx = new TblConstCheckContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1416);
				match(CHECK);
				setState(1417);
				match(LR_BRACKET);
				setState(1418);
				expression(0);
				setState(1419);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_definitionContext extends ParserRuleContext {
		public Token ref_match_type;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public On_delete_actionContext on_delete_action() {
			return getRuleContext(On_delete_actionContext.class,0);
		}
		public On_update_actionContext on_update_action() {
			return getRuleContext(On_update_actionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public Reference_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReference_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReference_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReference_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_definitionContext reference_definition() throws RecognitionException {
		Reference_definitionContext _localctx = new Reference_definitionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_reference_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1423);
			match(REFERENCES);
			setState(1424);
			table_name();
			setState(1425);
			index_colname_list();
			setState(1428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1426);
				match(MATCH);
				setState(1427);
				((Reference_definitionContext)_localctx).ref_match_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((Reference_definitionContext)_localctx).ref_match_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				setState(1430);
				on_delete_action();
				}
				break;
			case 2:
				{
				setState(1431);
				on_update_action();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_delete_actionContext extends ParserRuleContext {
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<Reference_action_control_typeContext> reference_action_control_type() {
			return getRuleContexts(Reference_action_control_typeContext.class);
		}
		public Reference_action_control_typeContext reference_action_control_type(int i) {
			return getRuleContext(Reference_action_control_typeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public On_delete_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOn_delete_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOn_delete_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOn_delete_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_delete_actionContext on_delete_action() throws RecognitionException {
		On_delete_actionContext _localctx = new On_delete_actionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_on_delete_action);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1434);
			match(ON);
			setState(1435);
			match(DELETE);
			setState(1436);
			reference_action_control_type();
			setState(1440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1437);
				match(ON);
				setState(1438);
				match(UPDATE);
				setState(1439);
				reference_action_control_type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_update_actionContext extends ParserRuleContext {
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public List<Reference_action_control_typeContext> reference_action_control_type() {
			return getRuleContexts(Reference_action_control_typeContext.class);
		}
		public Reference_action_control_typeContext reference_action_control_type(int i) {
			return getRuleContext(Reference_action_control_typeContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public On_update_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOn_update_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOn_update_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOn_update_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_update_actionContext on_update_action() throws RecognitionException {
		On_update_actionContext _localctx = new On_update_actionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_on_update_action);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1442);
			match(ON);
			setState(1443);
			match(UPDATE);
			setState(1444);
			reference_action_control_type();
			setState(1448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1445);
				match(ON);
				setState(1446);
				match(DELETE);
				setState(1447);
				reference_action_control_type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_action_control_typeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public Reference_action_control_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_action_control_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReference_action_control_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReference_action_control_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReference_action_control_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_action_control_typeContext reference_action_control_type() throws RecognitionException {
		Reference_action_control_typeContext _localctx = new Reference_action_control_typeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_reference_action_control_type);
		try {
			setState(1456);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1450);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1451);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1452);
				match(SET);
				setState(1453);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1454);
				match(NO);
				setState(1455);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_column_definitionContext extends ParserRuleContext {
		public Index_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_column_definition; }
	 
		public Index_column_definitionContext() { }
		public void copyFrom(Index_column_definitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleIndexContext extends Index_column_definitionContext {
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Index_typeContext index_type() {
			return getRuleContext(Index_typeContext.class,0);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public SimpleIndexContext(Index_column_definitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SpecIndexContext extends Index_column_definitionContext {
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public SpecIndexContext(Index_column_definitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_column_definitionContext index_column_definition() throws RecognitionException {
		Index_column_definitionContext _localctx = new Index_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_index_column_definition);
		int _la;
		try {
			setState(1486);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1458);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(1459);
					id_();
					}
				}

				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1462);
					index_type();
					}
				}

				setState(1465);
				index_colname_list();
				setState(1469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1466);
					index_option();
					}
					}
					setState(1471);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecIndexContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1472);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1473);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(1476);
					id_();
					}
				}

				setState(1479);
				index_colname_list();
				setState(1483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1480);
					index_option();
					}
					}
					setState(1485);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionContext extends ParserRuleContext {
		public Table_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_option; }
	 
		public Table_optionContext() { }
		public void copyFrom(Table_optionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TblOptAvgRLenContext extends Table_optionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TblOptAvgRLenContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptAvgRLen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptAvgRLen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptAvgRLen(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptChkSumContext extends Table_optionContext {
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TblOptChkSumContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptChkSum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptChkSum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptChkSum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptTablespaceContext extends Table_optionContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TblOptTablespaceContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptComprContext extends Table_optionContext {
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TblOptComprContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptCompr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptCompr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptCompr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptStatPersistContext extends Table_optionContext {
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TblOptStatPersistContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptStatPersist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptStatPersist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptStatPersist(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptRowFormatContext extends Table_optionContext {
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TblOptRowFormatContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptConnContext extends Table_optionContext {
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TblOptConnContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptConn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptConn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptConn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptStatAutoRContext extends Table_optionContext {
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TblOptStatAutoRContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptStatAutoR(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptStatAutoR(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptStatAutoR(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptMaxRowsContext extends Table_optionContext {
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TblOptMaxRowsContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptEngineContext extends Table_optionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public TblOptEngineContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptIndexDirContext extends Table_optionContext {
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TblOptIndexDirContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptIndexDir(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptIndexDir(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptIndexDir(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptStatSamplPgContext extends Table_optionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TblOptStatSamplPgContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptStatSamplPg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptStatSamplPg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptStatSamplPg(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptDelKWContext extends Table_optionContext {
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TblOptDelKWContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptDelKW(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptDelKW(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptDelKW(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptDataDirContext extends Table_optionContext {
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TblOptDataDirContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptDataDir(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptDataDir(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptDataDir(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptCommentContext extends Table_optionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TblOptCommentContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptInsMethContext extends Table_optionContext {
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TblOptInsMethContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptInsMeth(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptInsMeth(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptInsMeth(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptMinRowsContext extends Table_optionContext {
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TblOptMinRowsContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptUnionContext extends Table_optionContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TblOptUnionContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptPasswdContext extends Table_optionContext {
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TblOptPasswdContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptPasswd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptPasswd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptPasswd(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptAuIncContext extends Table_optionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TblOptAuIncContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptAuInc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptAuInc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptAuInc(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptPackKContext extends Table_optionContext {
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TblOptPackKContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptPackK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptPackK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptPackK(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptEncrContext extends Table_optionContext {
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TblOptEncrContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptEncr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptEncr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptEncr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptDefCollateContext extends Table_optionContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TblOptDefCollateContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptDefCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptDefCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptDefCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptDefCharSetContext extends Table_optionContext {
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TblOptDefCharSetContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptDefCharSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptDefCharSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptDefCharSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TblOptKeyBlockSzContext extends Table_optionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public Filesize_literalContext filesize_literal() {
			return getRuleContext(Filesize_literalContext.class,0);
		}
		public TblOptKeyBlockSzContext(Table_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTblOptKeyBlockSz(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTblOptKeyBlockSz(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTblOptKeyBlockSz(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_optionContext table_option() throws RecognitionException {
		Table_optionContext _localctx = new Table_optionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_table_option);
		int _la;
		try {
			setState(1636);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				_localctx = new TblOptEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1488);
				match(ENGINE);
				setState(1490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1489);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1492);
				engine_name();
				}
				break;
			case 2:
				_localctx = new TblOptAuIncContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1493);
				match(AUTO_INCREMENT);
				setState(1495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1494);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1497);
				decimal_literal();
				}
				break;
			case 3:
				_localctx = new TblOptAvgRLenContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1498);
				match(AVG_ROW_LENGTH);
				setState(1500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1499);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1502);
				decimal_literal();
				}
				break;
			case 4:
				_localctx = new TblOptDefCharSetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1503);
					match(DEFAULT);
					}
				}

				setState(1509);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1506);
					match(CHARACTER);
					setState(1507);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1508);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1511);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1514);
				charset_name();
				}
				break;
			case 5:
				_localctx = new TblOptChkSumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1515);
				match(CHECKSUM);
				setState(1517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1516);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1519);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TblOptDefCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1520);
					match(DEFAULT);
					}
				}

				setState(1523);
				match(COLLATE);
				setState(1525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1524);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1527);
				collation_name();
				}
				break;
			case 7:
				_localctx = new TblOptCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1528);
				match(COMMENT);
				setState(1530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1529);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1532);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TblOptComprContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1533);
				match(COMPRESSION);
				setState(1535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1534);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1537);
				match(STRING_LITERAL);
				}
				break;
			case 9:
				_localctx = new TblOptConnContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1538);
				match(CONNECTION);
				setState(1540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1539);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1542);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TblOptDataDirContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1543);
				match(DATA);
				setState(1544);
				match(DIRECTORY);
				setState(1546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1545);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1548);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TblOptDelKWContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1549);
				match(DELAY_KEY_WRITE);
				setState(1551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1550);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1553);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TblOptEncrContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1554);
				match(ENCRYPTION);
				setState(1556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1555);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1558);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TblOptIndexDirContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1559);
				match(INDEX);
				setState(1560);
				match(DIRECTORY);
				setState(1562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1561);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1564);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TblOptInsMethContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1565);
				match(INSERT_METHOD);
				setState(1567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1566);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1569);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TblOptKeyBlockSzContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1570);
				match(KEY_BLOCK_SIZE);
				setState(1572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1571);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1574);
				filesize_literal();
				}
				break;
			case 16:
				_localctx = new TblOptMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1575);
				match(MAX_ROWS);
				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1576);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1579);
				decimal_literal();
				}
				break;
			case 17:
				_localctx = new TblOptMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1580);
				match(MIN_ROWS);
				setState(1582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1581);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1584);
				decimal_literal();
				}
				break;
			case 18:
				_localctx = new TblOptPackKContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1585);
				match(PACK_KEYS);
				setState(1587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1586);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1589);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TblOptPasswdContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1590);
				match(PASSWORD);
				setState(1592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1591);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1594);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TblOptRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1595);
				match(ROW_FORMAT);
				setState(1597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1596);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1599);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (COMPACT - 277)) | (1L << (COMPRESSED - 277)) | (1L << (DYNAMIC - 277)) | (1L << (FIXED - 277)))) != 0) || _la==REDUNDANT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TblOptStatAutoRContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1600);
				match(STATS_AUTO_RECALC);
				setState(1602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1601);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1604);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TblOptStatPersistContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1605);
				match(STATS_PERSISTENT);
				setState(1607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1606);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1609);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TblOptStatSamplPgContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1610);
				match(STATS_SAMPLE_PAGES);
				setState(1612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1611);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1614);
				decimal_literal();
				}
				break;
			case 24:
				_localctx = new TblOptTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1615);
				match(TABLESPACE);
				setState(1616);
				id_();
				setState(1619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(1617);
					match(STORAGE);
					setState(1618);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 25:
				_localctx = new TblOptUnionContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1621);
				match(UNION);
				setState(1623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1622);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1625);
				match(LR_BRACKET);
				setState(1626);
				table_name();
				setState(1631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1627);
					match(COMMA);
					setState(1628);
					table_name();
					}
					}
					setState(1633);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1634);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_optionsContext extends ParserRuleContext {
		public Decimal_literalContext part_num;
		public Decimal_literalContext subpart_num;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public Partition_function_definitionContext partition_function_definition() {
			return getRuleContext(Partition_function_definitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public Linear_partition_func_defContext linear_partition_func_def() {
			return getRuleContext(Linear_partition_func_defContext.class,0);
		}
		public List<Partition_defContext> partition_def() {
			return getRuleContexts(Partition_defContext.class);
		}
		public Partition_defContext partition_def(int i) {
			return getRuleContext(Partition_defContext.class,i);
		}
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public Partition_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartition_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartition_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartition_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_optionsContext partition_options() throws RecognitionException {
		Partition_optionsContext _localctx = new Partition_optionsContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_partition_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1638);
			match(PARTITION);
			setState(1639);
			match(BY);
			setState(1640);
			partition_function_definition();
			setState(1643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1641);
				match(PARTITIONS);
				setState(1642);
				((Partition_optionsContext)_localctx).part_num = decimal_literal();
				}
			}

			setState(1652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1645);
				match(SUBPARTITION);
				setState(1646);
				match(BY);
				setState(1647);
				linear_partition_func_def();
				setState(1650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1648);
					match(SUBPARTITIONS);
					setState(1649);
					((Partition_optionsContext)_localctx).subpart_num = decimal_literal();
					}
				}

				}
			}

			setState(1665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(1654);
				match(LR_BRACKET);
				setState(1655);
				partition_def();
				setState(1660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1656);
					match(COMMA);
					setState(1657);
					partition_def();
					}
					}
					setState(1662);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1663);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_function_definitionContext extends ParserRuleContext {
		public Linear_partition_func_defContext linear_partition_func_def() {
			return getRuleContext(Linear_partition_func_defContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public Partition_function_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_function_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartition_function_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartition_function_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartition_function_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_function_definitionContext partition_function_definition() throws RecognitionException {
		Partition_function_definitionContext _localctx = new Partition_function_definitionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_partition_function_definition);
		int _la;
		try {
			setState(1680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY:
			case LINEAR:
			case HASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1667);
				linear_partition_func_def();
				}
				break;
			case RANGE:
			case LIST:
				enterOuterAlt(_localctx, 2);
				{
				setState(1668);
				_la = _input.LA(1);
				if ( !(_la==RANGE || _la==LIST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1678);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1669);
					match(LR_BRACKET);
					setState(1670);
					expression(0);
					setState(1671);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1673);
					match(COLUMNS);
					setState(1674);
					match(LR_BRACKET);
					setState(1675);
					id_list();
					setState(1676);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Linear_partition_func_defContext extends ParserRuleContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public Linear_partition_func_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linear_partition_func_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLinear_partition_func_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLinear_partition_func_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLinear_partition_func_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Linear_partition_func_defContext linear_partition_func_def() throws RecognitionException {
		Linear_partition_func_defContext _localctx = new Linear_partition_func_defContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_linear_partition_func_def);
		int _la;
		try {
			setState(1703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1682);
					match(LINEAR);
					}
				}

				setState(1685);
				match(HASH);
				setState(1686);
				match(LR_BRACKET);
				setState(1687);
				expression(0);
				setState(1688);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1690);
					match(LINEAR);
					}
				}

				setState(1693);
				match(KEY);
				setState(1697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1694);
					match(ALGORITHM);
					setState(1695);
					match(EQUAL_SYMBOL);
					setState(1696);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1699);
				match(LR_BRACKET);
				setState(1700);
				id_list();
				setState(1701);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_defContext extends ParserRuleContext {
		public Token comment;
		public Token data_dir;
		public Token index_dir;
		public Decimal_literalContext max_row_num;
		public Decimal_literalContext min_row_num;
		public Id_Context tblspace_id;
		public Id_Context nodegroup_id;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public List<TerminalNode> DIRECTORY() { return getTokens(MySqlParser.DIRECTORY); }
		public TerminalNode DIRECTORY(int i) {
			return getToken(MySqlParser.DIRECTORY, i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public List<Subpartition_defContext> subpartition_def() {
			return getRuleContexts(Subpartition_defContext.class);
		}
		public Subpartition_defContext subpartition_def(int i) {
			return getRuleContext(Subpartition_defContext.class,i);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public Constant_listContext constant_list() {
			return getRuleContext(Constant_listContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Partition_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartition_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartition_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartition_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_defContext partition_def() throws RecognitionException {
		Partition_defContext _localctx = new Partition_defContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_partition_def);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1705);
			match(PARTITION);
			setState(1706);
			id_();
			setState(1727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(1707);
				match(VALUES);
				setState(1725);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LESS:
					{
					setState(1708);
					match(LESS);
					setState(1709);
					match(THAN);
					setState(1718);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LR_BRACKET:
						{
						setState(1710);
						match(LR_BRACKET);
						setState(1713);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
						case 1:
							{
							setState(1711);
							expression(0);
							}
							break;
						case 2:
							{
							setState(1712);
							constant_list();
							}
							break;
						}
						setState(1715);
						match(RR_BRACKET);
						}
						break;
					case MAXVALUE:
						{
						setState(1717);
						match(MAXVALUE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case IN:
					{
					setState(1720);
					match(IN);
					setState(1721);
					match(LR_BRACKET);
					setState(1722);
					constant_list();
					setState(1723);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE || _la==STORAGE) {
				{
				setState(1730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(1729);
					match(STORAGE);
					}
				}

				setState(1732);
				match(ENGINE);
				setState(1734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1733);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1736);
				engine_name();
				}
			}

			setState(1744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1739);
				match(COMMENT);
				setState(1741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1740);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1743);
				((Partition_defContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATA) {
				{
				setState(1746);
				match(DATA);
				setState(1747);
				match(DIRECTORY);
				setState(1749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1748);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1751);
				((Partition_defContext)_localctx).data_dir = match(STRING_LITERAL);
				}
			}

			setState(1760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX) {
				{
				setState(1754);
				match(INDEX);
				setState(1755);
				match(DIRECTORY);
				setState(1757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1756);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1759);
				((Partition_defContext)_localctx).index_dir = match(STRING_LITERAL);
				}
			}

			setState(1767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_ROWS) {
				{
				setState(1762);
				match(MAX_ROWS);
				setState(1764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1763);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1766);
				((Partition_defContext)_localctx).max_row_num = decimal_literal();
				}
			}

			setState(1774);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MIN_ROWS) {
				{
				setState(1769);
				match(MIN_ROWS);
				setState(1771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1770);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1773);
				((Partition_defContext)_localctx).min_row_num = decimal_literal();
				}
			}

			setState(1781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(1776);
				match(TABLESPACE);
				setState(1778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1777);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1780);
				((Partition_defContext)_localctx).tblspace_id = id_();
				}
			}

			setState(1788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1783);
				match(NODEGROUP);
				setState(1785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1784);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1787);
				((Partition_defContext)_localctx).nodegroup_id = id_();
				}
			}

			setState(1798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1790);
				subpartition_def();
				setState(1795);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1791);
						match(COMMA);
						setState(1792);
						subpartition_def();
						}
						} 
					}
					setState(1797);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_defContext extends ParserRuleContext {
		public Token comment;
		public Token data_dir;
		public Token index_dir;
		public Decimal_literalContext max_row_num;
		public Decimal_literalContext min_row_num;
		public Id_Context tblspace_id;
		public Id_Context nodegroup_id;
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public List<TerminalNode> DIRECTORY() { return getTokens(MySqlParser.DIRECTORY); }
		public TerminalNode DIRECTORY(int i) {
			return getToken(MySqlParser.DIRECTORY, i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public Subpartition_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubpartition_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubpartition_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubpartition_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_defContext subpartition_def() throws RecognitionException {
		Subpartition_defContext _localctx = new Subpartition_defContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_subpartition_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1800);
			match(SUBPARTITION);
			setState(1801);
			id_();
			setState(1810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE || _la==STORAGE) {
				{
				setState(1803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(1802);
					match(STORAGE);
					}
				}

				setState(1805);
				match(ENGINE);
				setState(1807);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1806);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1809);
				engine_name();
				}
			}

			setState(1817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1812);
				match(COMMENT);
				setState(1814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1813);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1816);
				((Subpartition_defContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATA) {
				{
				setState(1819);
				match(DATA);
				setState(1820);
				match(DIRECTORY);
				setState(1822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1821);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1824);
				((Subpartition_defContext)_localctx).data_dir = match(STRING_LITERAL);
				}
			}

			setState(1833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX) {
				{
				setState(1827);
				match(INDEX);
				setState(1828);
				match(DIRECTORY);
				setState(1830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1829);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1832);
				((Subpartition_defContext)_localctx).index_dir = match(STRING_LITERAL);
				}
			}

			setState(1840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_ROWS) {
				{
				setState(1835);
				match(MAX_ROWS);
				setState(1837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1836);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1839);
				((Subpartition_defContext)_localctx).max_row_num = decimal_literal();
				}
			}

			setState(1847);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MIN_ROWS) {
				{
				setState(1842);
				match(MIN_ROWS);
				setState(1844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1843);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1846);
				((Subpartition_defContext)_localctx).min_row_num = decimal_literal();
				}
			}

			setState(1854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(1849);
				match(TABLESPACE);
				setState(1851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1850);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1853);
				((Subpartition_defContext)_localctx).tblspace_id = id_();
				}
			}

			setState(1861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1856);
				match(NODEGROUP);
				setState(1858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1857);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1860);
				((Subpartition_defContext)_localctx).nodegroup_id = id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_databaseContext extends ParserRuleContext {
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
	 
		public Alter_databaseContext() { }
		public void copyFrom(Alter_databaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterDbUpgradeNameContext extends Alter_databaseContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public AlterDbUpgradeNameContext(Alter_databaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterDbUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterDbUpgradeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterDbUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterDbContext extends Alter_databaseContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<Create_database_optionContext> create_database_option() {
			return getRuleContexts(Create_database_optionContext.class);
		}
		public Create_database_optionContext create_database_option(int i) {
			return getRuleContext(Create_database_optionContext.class,i);
		}
		public AlterDbContext(Alter_databaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterDb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_alter_database);
		int _la;
		try {
			setState(1881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				_localctx = new AlterDbContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1863);
				match(ALTER);
				setState(1864);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(1865);
					id_();
					}
				}

				setState(1869); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1868);
					create_database_option();
					}
					}
					setState(1871); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) );
				}
				break;
			case 2:
				_localctx = new AlterDbUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1873);
				match(ALTER);
				setState(1874);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1875);
				id_();
				setState(1876);
				match(UPGRADE);
				setState(1877);
				match(DATA);
				setState(1878);
				match(DIRECTORY);
				setState(1879);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public List<Full_idContext> full_id() {
			return getRuleContexts(Full_idContext.class);
		}
		public Full_idContext full_id(int i) {
			return getRuleContext(Full_idContext.class,i);
		}
		public Owner_statementContext owner_statement() {
			return getRuleContext(Owner_statementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public Schedule_expressionContext schedule_expression() {
			return getRuleContext(Schedule_expressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public Routine_bodyContext routine_body() {
			return getRuleContext(Routine_bodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public Alter_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlter_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlter_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlter_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_eventContext alter_event() throws RecognitionException {
		Alter_eventContext _localctx = new Alter_eventContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1883);
			match(ALTER);
			setState(1885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1884);
				owner_statement();
				}
			}

			setState(1887);
			match(EVENT);
			setState(1888);
			full_id();
			setState(1892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				setState(1889);
				match(ON);
				setState(1890);
				match(SCHEDULE);
				setState(1891);
				schedule_expression();
				}
				break;
			}
			setState(1900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1894);
				match(ON);
				setState(1895);
				match(COMPLETION);
				setState(1897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1896);
					match(NOT);
					}
				}

				setState(1899);
				match(PRESERVE);
				}
			}

			setState(1905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RENAME) {
				{
				setState(1902);
				match(RENAME);
				setState(1903);
				match(TO);
				setState(1904);
				full_id();
				}
			}

			setState(1912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				setState(1907);
				match(ENABLE);
				}
				break;
			case 2:
				{
				setState(1908);
				match(DISABLE);
				}
				break;
			case 3:
				{
				setState(1909);
				match(DISABLE);
				setState(1910);
				match(ON);
				setState(1911);
				match(SLAVE);
				}
				break;
			}
			setState(1916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1914);
				match(COMMENT);
				setState(1915);
				match(STRING_LITERAL);
				}
			}

			setState(1920);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DO) {
				{
				setState(1918);
				match(DO);
				setState(1919);
				routine_body();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public List<Routine_characteristicContext> routine_characteristic() {
			return getRuleContexts(Routine_characteristicContext.class);
		}
		public Routine_characteristicContext routine_characteristic(int i) {
			return getRuleContext(Routine_characteristicContext.class,i);
		}
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_alter_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1922);
			match(ALTER);
			setState(1923);
			match(FUNCTION);
			setState(1924);
			full_id();
			setState(1928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (MODIFIES - 95)) | (1L << (NOT - 95)) | (1L << (READS - 95)) | (1L << (SQL - 95)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(1925);
				routine_characteristic();
				}
				}
				setState(1930);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_instanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Alter_instanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_instance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlter_instance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlter_instance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlter_instance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_instanceContext alter_instance() throws RecognitionException {
		Alter_instanceContext _localctx = new Alter_instanceContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_alter_instance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1931);
			match(ALTER);
			setState(1932);
			match(INSTANCE);
			setState(1933);
			match(ROTATE);
			setState(1934);
			match(INNODB);
			setState(1935);
			match(MASTER);
			setState(1936);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_logfile_groupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public Filesize_literalContext filesize_literal() {
			return getRuleContext(Filesize_literalContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public Alter_logfile_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_logfile_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlter_logfile_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlter_logfile_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlter_logfile_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_logfile_groupContext alter_logfile_group() throws RecognitionException {
		Alter_logfile_groupContext _localctx = new Alter_logfile_groupContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alter_logfile_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1938);
			match(ALTER);
			setState(1939);
			match(LOGFILE);
			setState(1940);
			match(GROUP);
			setState(1941);
			id_();
			setState(1942);
			match(ADD);
			setState(1943);
			match(UNDOFILE);
			setState(1944);
			match(STRING_LITERAL);
			setState(1950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1945);
				match(INITIAL_SIZE);
				setState(1947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1946);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1949);
				filesize_literal();
				}
			}

			setState(1953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1952);
				match(WAIT);
				}
			}

			setState(1955);
			match(ENGINE);
			setState(1957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1956);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1959);
			engine_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public List<Routine_characteristicContext> routine_characteristic() {
			return getRuleContexts(Routine_characteristicContext.class);
		}
		public Routine_characteristicContext routine_characteristic(int i) {
			return getRuleContext(Routine_characteristicContext.class,i);
		}
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alter_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1961);
			match(ALTER);
			setState(1962);
			match(PROCEDURE);
			setState(1963);
			full_id();
			setState(1967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (MODIFIES - 95)) | (1L << (NOT - 95)) | (1L << (READS - 95)) | (1L << (SQL - 95)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(1964);
				routine_characteristic();
				}
				}
				setState(1969);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_serverContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public List<Server_optionContext> server_option() {
			return getRuleContexts(Server_optionContext.class);
		}
		public Server_optionContext server_option(int i) {
			return getRuleContext(Server_optionContext.class,i);
		}
		public Alter_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlter_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlter_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlter_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_serverContext alter_server() throws RecognitionException {
		Alter_serverContext _localctx = new Alter_serverContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1970);
			match(ALTER);
			setState(1971);
			match(SERVER);
			setState(1972);
			id_();
			setState(1973);
			match(OPTIONS);
			setState(1974);
			match(LR_BRACKET);
			setState(1975);
			server_option();
			setState(1980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1976);
				match(COMMA);
				setState(1977);
				server_option();
				}
				}
				setState(1982);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1983);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<Alter_table_specContext> alter_table_spec() {
			return getRuleContexts(Alter_table_specContext.class);
		}
		public Alter_table_specContext alter_table_spec(int i) {
			return getRuleContext(Alter_table_specContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<Partition_optionsContext> partition_options() {
			return getRuleContexts(Partition_optionsContext.class);
		}
		public Partition_optionsContext partition_options(int i) {
			return getRuleContext(Partition_optionsContext.class,i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1985);
			match(ALTER);
			setState(1987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(1986);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1989);
				match(IGNORE);
				}
			}

			setState(1992);
			match(TABLE);
			setState(1993);
			table_name();
			setState(1994);
			alter_table_spec();
			setState(1999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1995);
				match(COMMA);
				setState(1996);
				alter_table_spec();
				}
				}
				setState(2001);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PARTITION) {
				{
				{
				setState(2002);
				partition_options();
				}
				}
				setState(2007);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablespaceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public Filesize_literalContext filesize_literal() {
			return getRuleContext(Filesize_literalContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public Alter_tablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlter_tablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlter_tablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlter_tablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tablespaceContext alter_tablespace() throws RecognitionException {
		Alter_tablespaceContext _localctx = new Alter_tablespaceContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alter_tablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2008);
			match(ALTER);
			setState(2009);
			match(TABLESPACE);
			setState(2010);
			id_();
			setState(2011);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2012);
			match(DATAFILE);
			setState(2013);
			match(STRING_LITERAL);
			setState(2017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2014);
				match(INITIAL_SIZE);
				setState(2015);
				match(EQUAL_SYMBOL);
				setState(2016);
				filesize_literal();
				}
			}

			setState(2020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2019);
				match(WAIT);
				}
			}

			setState(2022);
			match(ENGINE);
			setState(2024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2023);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2026);
			engine_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_viewContext extends ParserRuleContext {
		public Token alg_type;
		public Token sec_context;
		public Token check_opt;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public Owner_statementContext owner_statement() {
			return getRuleContext(Owner_statementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public Alter_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlter_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlter_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlter_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_viewContext alter_view() throws RecognitionException {
		Alter_viewContext _localctx = new Alter_viewContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alter_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2028);
			match(ALTER);
			setState(2032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2029);
				match(ALGORITHM);
				setState(2030);
				match(EQUAL_SYMBOL);
				setState(2031);
				((Alter_viewContext)_localctx).alg_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((Alter_viewContext)_localctx).alg_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2034);
				owner_statement();
				}
			}

			setState(2040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2037);
				match(SQL);
				setState(2038);
				match(SECURITY);
				setState(2039);
				((Alter_viewContext)_localctx).sec_context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((Alter_viewContext)_localctx).sec_context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2042);
			match(VIEW);
			setState(2043);
			full_id();
			setState(2048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2044);
				match(LR_BRACKET);
				setState(2045);
				id_list();
				setState(2046);
				match(RR_BRACKET);
				}
			}

			setState(2050);
			match(AS);
			setState(2051);
			select_statement();
			setState(2058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2052);
				match(WITH);
				setState(2054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2053);
					((Alter_viewContext)_localctx).check_opt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((Alter_viewContext)_localctx).check_opt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2056);
				match(CHECK);
				setState(2057);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_specContext extends ParserRuleContext {
		public Alter_table_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_spec; }
	 
		public Alter_table_specContext() { }
		public void copyFrom(Alter_table_specContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AltblDropPKContext extends Alter_table_specContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AltblDropPKContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblDropPK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblDropPK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblDropPK(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblDisKeyContext extends Alter_table_specContext {
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AltblDisKeyContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblDisKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblDisKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblDisKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAddPKContext extends Alter_table_specContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public Index_typeContext index_type() {
			return getRuleContext(Index_typeContext.class,0);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AltblAddPKContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAddPK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAddPK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAddPK(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblDropIndexContext extends Alter_table_specContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AltblDropIndexContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAddPartContext extends Alter_table_specContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Partition_defContext partition_def() {
			return getRuleContext(Partition_defContext.class,0);
		}
		public AltblAddPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAddPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAddPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAddPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblImportPartContext extends Alter_table_specContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AltblImportPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblImportPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblImportPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblImportPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblResortContext extends Alter_table_specContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public AltblResortContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblResort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblResort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblResort(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblUpgrPartContext extends Alter_table_specContext {
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AltblUpgrPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblUpgrPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblUpgrPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblUpgrPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblForceContext extends Alter_table_specContext {
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public AltblForceContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblForce(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblRenameTblContext extends Alter_table_specContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public AltblRenameTblContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblRenameTbl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblRenameTbl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblRenameTbl(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblDropPartContext extends Alter_table_specContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public AltblDropPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblDropPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblDropPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblDropPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblImpTblSpaceContext extends Alter_table_specContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AltblImpTblSpaceContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblImpTblSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblImpTblSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblImpTblSpace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAnalPartContext extends Alter_table_specContext {
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AltblAnalPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAnalPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAnalPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAnalPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblTruncPartContext extends Alter_table_specContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AltblTruncPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblTruncPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblTruncPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblTruncPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAlgContext extends Alter_table_specContext {
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public AltblAlgContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAlg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAlg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAlg(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblDefCharsetContext extends Alter_table_specContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public AltblDefCharsetContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblDefCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblDefCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblDefCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAddSpecIndexContext extends Alter_table_specContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AltblAddSpecIndexContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAddSpecIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAddSpecIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAddSpecIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblValidContext extends Alter_table_specContext {
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AltblValidContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblValid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblValid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblValid(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblRebuildPartContext extends Alter_table_specContext {
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AltblRebuildPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblRebuildPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblRebuildPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblRebuildPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblRepairPartContext extends Alter_table_specContext {
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AltblRepairPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblRepairPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblRepairPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblRepairPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblColDropContext extends Alter_table_specContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public AltblColDropContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblColDrop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblColDrop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblColDrop(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblExchPartContext extends Alter_table_specContext {
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public AltblExchPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblExchPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblExchPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblExchPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAddFKContext extends Alter_table_specContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public Reference_definitionContext reference_definition() {
			return getRuleContext(Reference_definitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public AltblAddFKContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAddFK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAddFK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAddFK(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblDiscartPartContext extends Alter_table_specContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AltblDiscartPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblDiscartPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblDiscartPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblDiscartPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblCheckPartContext extends Alter_table_specContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AltblCheckPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblCheckPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblCheckPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblCheckPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblColChangeContext extends Alter_table_specContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AltblColChangeContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblColChange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblColChange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblColChange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblColDefContext extends Alter_table_specContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public AltblColDefContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblColDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblColDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblColDef(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAddColContext extends Alter_table_specContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AltblAddColContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAddCol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAddCol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAddCol(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblDisTblspaceContext extends Alter_table_specContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AltblDisTblspaceContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblDisTblspace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblDisTblspace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblDisTblspace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAddIndexContext extends Alter_table_specContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Index_typeContext index_type() {
			return getRuleContext(Index_typeContext.class,0);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public AltblAddIndexContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAddUKContext extends Alter_table_specContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public Index_colname_listContext index_colname_list() {
			return getRuleContext(Index_colname_listContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Index_typeContext index_type() {
			return getRuleContext(Index_typeContext.class,0);
		}
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AltblAddUKContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAddUK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAddUK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAddUK(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblColModContext extends Alter_table_specContext {
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AltblColModContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblColMod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblColMod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblColMod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblCoalPartContext extends Alter_table_specContext {
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public AltblCoalPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblCoalPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblCoalPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblCoalPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblOptimPartContext extends Alter_table_specContext {
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AltblOptimPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblOptimPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblOptimPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblOptimPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblEnKeyContext extends Alter_table_specContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AltblEnKeyContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblEnKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblEnKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblEnKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblLockContext extends Alter_table_specContext {
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public AltblLockContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblLock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblRemovePartContext extends Alter_table_specContext {
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AltblRemovePartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblRemovePart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblRemovePart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblRemovePart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblConvertContext extends Alter_table_specContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public AltblConvertContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblConvert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblConvert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblConvert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblTableOptContext extends Alter_table_specContext {
		public Table_optionContext table_option() {
			return getRuleContext(Table_optionContext.class,0);
		}
		public AltblTableOptContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblTableOpt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblTableOpt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblTableOpt(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblReorgPartContext extends Alter_table_specContext {
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<Partition_defContext> partition_def() {
			return getRuleContexts(Partition_defContext.class);
		}
		public Partition_defContext partition_def(int i) {
			return getRuleContext(Partition_defContext.class,i);
		}
		public AltblReorgPartContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblReorgPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblReorgPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblReorgPart(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblDropFKContext extends Alter_table_specContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AltblDropFKContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblDropFK(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblDropFK(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblDropFK(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AltblAddColsContext extends Alter_table_specContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public AltblAddColsContext(Alter_table_specContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAltblAddCols(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAltblAddCols(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAltblAddCols(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_specContext alter_table_spec() throws RecognitionException {
		Alter_table_specContext _localctx = new Alter_table_specContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alter_table_spec);
		int _la;
		try {
			setState(2366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				_localctx = new AltblTableOptContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2060);
				table_option();
				}
				break;
			case 2:
				_localctx = new AltblAddColContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2061);
				match(ADD);
				setState(2063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2062);
					match(COLUMN);
					}
				}

				setState(2065);
				id_();
				setState(2066);
				column_definition();
				setState(2070);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2067);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2068);
					match(AFTER);
					setState(2069);
					id_();
					}
					break;
				case EOF:
				case PARTITION:
				case MINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AltblAddColsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2072);
				match(ADD);
				setState(2074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2073);
					match(COLUMN);
					}
				}

				setState(2076);
				match(LR_BRACKET);
				setState(2077);
				id_();
				setState(2078);
				column_definition();
				setState(2085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2079);
					match(COMMA);
					setState(2080);
					id_();
					setState(2081);
					column_definition();
					}
					}
					setState(2087);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2088);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AltblAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2090);
				match(ADD);
				setState(2091);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(2092);
					id_();
					}
				}

				setState(2096);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2095);
					index_type();
					}
				}

				setState(2098);
				index_colname_list();
				setState(2102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2099);
					index_option();
					}
					}
					setState(2104);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AltblAddPKContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2105);
				match(ADD);
				setState(2110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2106);
					match(CONSTRAINT);
					setState(2108);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
						{
						setState(2107);
						id_();
						}
					}

					}
				}

				setState(2112);
				match(PRIMARY);
				setState(2113);
				match(KEY);
				setState(2115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2114);
					index_type();
					}
				}

				setState(2117);
				index_colname_list();
				setState(2121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2118);
					index_option();
					}
					}
					setState(2123);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AltblAddUKContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2124);
				match(ADD);
				setState(2129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2125);
					match(CONSTRAINT);
					setState(2127);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
						{
						setState(2126);
						id_();
						}
					}

					}
				}

				setState(2131);
				match(UNIQUE);
				setState(2133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2132);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(2135);
					id_();
					}
				}

				setState(2139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2138);
					index_type();
					}
				}

				setState(2141);
				index_colname_list();
				setState(2145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2142);
					index_option();
					}
					}
					setState(2147);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AltblAddSpecIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2148);
				match(ADD);
				setState(2149);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2150);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(2153);
					id_();
					}
				}

				setState(2156);
				index_colname_list();
				setState(2160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2157);
					index_option();
					}
					}
					setState(2162);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AltblAddFKContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2163);
				match(ADD);
				setState(2168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2164);
					match(CONSTRAINT);
					setState(2166);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
						{
						setState(2165);
						id_();
						}
					}

					}
				}

				setState(2170);
				match(FOREIGN);
				setState(2171);
				match(KEY);
				setState(2173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(2172);
					id_();
					}
				}

				setState(2175);
				index_colname_list();
				setState(2176);
				reference_definition();
				}
				break;
			case 9:
				_localctx = new AltblAlgContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2178);
				match(ALGORITHM);
				setState(2180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2179);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2182);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new AltblColDefContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2183);
				match(ALTER);
				setState(2185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2184);
					match(COLUMN);
					}
				}

				setState(2187);
				id_();
				setState(2193);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2188);
					match(SET);
					setState(2189);
					match(DEFAULT);
					setState(2190);
					default_value();
					}
					break;
				case DROP:
					{
					setState(2191);
					match(DROP);
					setState(2192);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				_localctx = new AltblColChangeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2195);
				match(CHANGE);
				setState(2197);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2196);
					match(COLUMN);
					}
				}

				setState(2199);
				id_();
				setState(2200);
				id_();
				setState(2201);
				column_definition();
				setState(2205);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2202);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2203);
					match(AFTER);
					setState(2204);
					id_();
					}
					break;
				case EOF:
				case PARTITION:
				case MINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 12:
				_localctx = new AltblLockContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2207);
				match(LOCK);
				setState(2209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2208);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2211);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new AltblColModContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2212);
				match(MODIFY);
				setState(2214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2213);
					match(COLUMN);
					}
				}

				setState(2216);
				id_();
				setState(2217);
				column_definition();
				setState(2221);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2218);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2219);
					match(AFTER);
					setState(2220);
					id_();
					}
					break;
				case EOF:
				case PARTITION:
				case MINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 14:
				_localctx = new AltblColDropContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2223);
				match(DROP);
				setState(2225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2224);
					match(COLUMN);
					}
				}

				setState(2227);
				id_();
				}
				break;
			case 15:
				_localctx = new AltblDropPKContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2228);
				match(DROP);
				setState(2229);
				match(PRIMARY);
				setState(2230);
				match(KEY);
				}
				break;
			case 16:
				_localctx = new AltblDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2231);
				match(DROP);
				setState(2232);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2233);
				id_();
				}
				break;
			case 17:
				_localctx = new AltblDropFKContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2234);
				match(DROP);
				setState(2235);
				match(FOREIGN);
				setState(2236);
				match(KEY);
				setState(2237);
				id_();
				}
				break;
			case 18:
				_localctx = new AltblDisKeyContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2238);
				match(DISABLE);
				setState(2239);
				match(KEYS);
				}
				break;
			case 19:
				_localctx = new AltblEnKeyContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2240);
				match(ENABLE);
				setState(2241);
				match(KEYS);
				}
				break;
			case 20:
				_localctx = new AltblRenameTblContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2242);
				match(RENAME);
				setState(2244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2243);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2246);
				id_();
				}
				break;
			case 21:
				_localctx = new AltblResortContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2247);
				match(ORDER);
				setState(2248);
				match(BY);
				setState(2249);
				id_list();
				}
				break;
			case 22:
				_localctx = new AltblConvertContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2250);
				match(CONVERT);
				setState(2251);
				match(TO);
				setState(2252);
				match(CHARACTER);
				setState(2253);
				match(SET);
				setState(2254);
				charset_name();
				setState(2257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2255);
					match(COLLATE);
					setState(2256);
					collation_name();
					}
				}

				}
				break;
			case 23:
				_localctx = new AltblDefCharsetContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2259);
					match(DEFAULT);
					}
				}

				setState(2262);
				match(CHARACTER);
				setState(2263);
				match(SET);
				setState(2264);
				match(EQUAL_SYMBOL);
				setState(2265);
				charset_name();
				setState(2269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2266);
					match(COLLATE);
					setState(2267);
					match(EQUAL_SYMBOL);
					setState(2268);
					collation_name();
					}
				}

				}
				break;
			case 24:
				_localctx = new AltblDisTblspaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2271);
				match(DISCARD);
				setState(2272);
				match(TABLESPACE);
				}
				break;
			case 25:
				_localctx = new AltblImpTblSpaceContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2273);
				match(IMPORT);
				setState(2274);
				match(TABLESPACE);
				}
				break;
			case 26:
				_localctx = new AltblForceContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2275);
				match(FORCE);
				}
				break;
			case 27:
				_localctx = new AltblValidContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2276);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2277);
				match(VALIDATION);
				}
				break;
			case 28:
				_localctx = new AltblAddPartContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2278);
				match(ADD);
				setState(2279);
				match(PARTITION);
				setState(2280);
				partition_def();
				}
				break;
			case 29:
				_localctx = new AltblDropPartContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2281);
				match(DROP);
				setState(2282);
				match(PARTITION);
				setState(2283);
				id_list();
				}
				break;
			case 30:
				_localctx = new AltblDiscartPartContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2284);
				match(DISCARD);
				setState(2285);
				match(PARTITION);
				setState(2288);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2286);
					id_list();
					}
					break;
				case ALL:
					{
					setState(2287);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2290);
				match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AltblImportPartContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2291);
				match(IMPORT);
				setState(2292);
				match(PARTITION);
				setState(2295);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2293);
					id_list();
					}
					break;
				case ALL:
					{
					setState(2294);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2297);
				match(TABLESPACE);
				}
				break;
			case 32:
				_localctx = new AltblTruncPartContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2298);
				match(TRUNCATE);
				setState(2299);
				match(PARTITION);
				setState(2302);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2300);
					id_list();
					}
					break;
				case ALL:
					{
					setState(2301);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 33:
				_localctx = new AltblCoalPartContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2304);
				match(COALESCE);
				setState(2305);
				match(PARTITION);
				setState(2306);
				decimal_literal();
				}
				break;
			case 34:
				_localctx = new AltblReorgPartContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2307);
				match(REORGANIZE);
				setState(2308);
				match(PARTITION);
				setState(2309);
				id_list();
				setState(2310);
				match(INTO);
				setState(2311);
				match(LR_BRACKET);
				setState(2312);
				partition_def();
				setState(2317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2313);
					match(COMMA);
					setState(2314);
					partition_def();
					}
					}
					setState(2319);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2320);
				match(RR_BRACKET);
				}
				break;
			case 35:
				_localctx = new AltblExchPartContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2322);
				match(EXCHANGE);
				setState(2323);
				match(PARTITION);
				setState(2324);
				id_();
				setState(2325);
				match(WITH);
				setState(2326);
				match(TABLE);
				setState(2327);
				table_name();
				setState(2330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2328);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2329);
					match(VALIDATION);
					}
				}

				}
				break;
			case 36:
				_localctx = new AltblAnalPartContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2332);
				match(ANALYZE);
				setState(2333);
				match(PARTITION);
				setState(2336);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2334);
					id_list();
					}
					break;
				case ALL:
					{
					setState(2335);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 37:
				_localctx = new AltblCheckPartContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2338);
				match(CHECK);
				setState(2339);
				match(PARTITION);
				setState(2342);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2340);
					id_list();
					}
					break;
				case ALL:
					{
					setState(2341);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AltblOptimPartContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2344);
				match(OPTIMIZE);
				setState(2345);
				match(PARTITION);
				setState(2348);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2346);
					id_list();
					}
					break;
				case ALL:
					{
					setState(2347);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 39:
				_localctx = new AltblRebuildPartContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2350);
				match(REBUILD);
				setState(2351);
				match(PARTITION);
				setState(2354);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2352);
					id_list();
					}
					break;
				case ALL:
					{
					setState(2353);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 40:
				_localctx = new AltblRepairPartContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2356);
				match(REPAIR);
				setState(2357);
				match(PARTITION);
				setState(2360);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2358);
					id_list();
					}
					break;
				case ALL:
					{
					setState(2359);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 41:
				_localctx = new AltblRemovePartContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2362);
				match(REMOVE);
				setState(2363);
				match(PARTITIONING);
				}
				break;
			case 42:
				_localctx = new AltblUpgrPartContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2364);
				match(UPGRADE);
				setState(2365);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_databaseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_databaseContext drop_database() throws RecognitionException {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_drop_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			match(DROP);
			setState(2369);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2370);
				if_exists();
				}
			}

			setState(2373);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_eventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_eventContext drop_event() throws RecognitionException {
		Drop_eventContext _localctx = new Drop_eventContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_drop_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			match(DROP);
			setState(2376);
			match(EVENT);
			setState(2378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2377);
				if_exists();
				}
			}

			setState(2380);
			full_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2382);
			match(DROP);
			setState(2383);
			match(INDEX);
			setState(2385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(2384);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2387);
			id_();
			setState(2388);
			match(ON);
			setState(2389);
			table_name();
			setState(2395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2390);
				match(ALGORITHM);
				setState(2392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2391);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2394);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCK) {
				{
				setState(2397);
				match(LOCK);
				setState(2399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2398);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2401);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_logfile_groupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public Drop_logfile_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_logfile_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_logfile_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_logfile_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_logfile_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_logfile_groupContext drop_logfile_group() throws RecognitionException {
		Drop_logfile_groupContext _localctx = new Drop_logfile_groupContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_drop_logfile_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2404);
			match(DROP);
			setState(2405);
			match(LOGFILE);
			setState(2406);
			match(GROUP);
			setState(2407);
			id_();
			setState(2408);
			match(ENGINE);
			setState(2409);
			match(EQUAL_SYMBOL);
			setState(2410);
			engine_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_drop_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2412);
			match(DROP);
			setState(2413);
			match(PROCEDURE);
			setState(2415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2414);
				if_exists();
				}
			}

			setState(2417);
			full_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_drop_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2419);
			match(DROP);
			setState(2420);
			match(FUNCTION);
			setState(2422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2421);
				if_exists();
				}
			}

			setState(2424);
			full_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_serverContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_serverContext drop_server() throws RecognitionException {
		Drop_serverContext _localctx = new Drop_serverContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_drop_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2426);
			match(DROP);
			setState(2427);
			match(SERVER);
			setState(2429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2428);
				if_exists();
				}
			}

			setState(2431);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2433);
			match(DROP);
			setState(2435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2434);
				match(TEMPORARY);
				}
			}

			setState(2437);
			match(TABLE);
			setState(2439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2438);
				if_exists();
				}
			}

			setState(2441);
			table_list();
			setState(2443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2442);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public Drop_tablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_tablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_tablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_tablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_tablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tablespaceContext drop_tablespace() throws RecognitionException {
		Drop_tablespaceContext _localctx = new Drop_tablespaceContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_drop_tablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2445);
			match(DROP);
			setState(2446);
			match(TABLESPACE);
			setState(2447);
			id_();
			setState(2453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2448);
				match(ENGINE);
				setState(2450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2449);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2452);
				engine_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_drop_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2455);
			match(DROP);
			setState(2456);
			match(TRIGGER);
			setState(2458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2457);
				if_exists();
				}
			}

			setState(2460);
			full_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public List<Full_idContext> full_id() {
			return getRuleContexts(Full_idContext.class);
		}
		public Full_idContext full_id(int i) {
			return getRuleContext(Full_idContext.class,i);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_drop_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2462);
			match(DROP);
			setState(2463);
			match(VIEW);
			setState(2465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2464);
				if_exists();
				}
			}

			setState(2467);
			full_id();
			setState(2472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2468);
				match(COMMA);
				setState(2469);
				full_id();
				}
				}
				setState(2474);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2475);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_tableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public List<TerminalNode> TO() { return getTokens(MySqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MySqlParser.TO, i);
		}
		public Rename_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRename_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRename_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRename_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rename_tableContext rename_table() throws RecognitionException {
		Rename_tableContext _localctx = new Rename_tableContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_rename_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2478);
			match(RENAME);
			setState(2479);
			match(TABLE);
			setState(2480);
			table_name();
			setState(2481);
			match(TO);
			setState(2482);
			table_name();
			setState(2490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2483);
				match(COMMA);
				setState(2484);
				table_name();
				setState(2485);
				match(TO);
				setState(2486);
				table_name();
				}
				}
				setState(2492);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_tableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Truncate_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTruncate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTruncate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTruncate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_tableContext truncate_table() throws RecognitionException {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_truncate_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2493);
			match(TRUNCATE);
			setState(2495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2494);
				match(TABLE);
				}
			}

			setState(2497);
			table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_statementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(MySqlParser.CALL, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public Constant_listContext constant_list() {
			return getRuleContext(Constant_listContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Call_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_statementContext call_statement() throws RecognitionException {
		Call_statementContext _localctx = new Call_statementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_call_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2499);
			match(CALL);
			setState(2500);
			full_id();
			setState(2507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2501);
				match(LR_BRACKET);
				setState(2504);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
				case 1:
					{
					setState(2502);
					constant_list();
					}
					break;
				case 2:
					{
					setState(2503);
					expression_list();
					}
					break;
				}
				setState(2506);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Single_delete_statementContext single_delete_statement() {
			return getRuleContext(Single_delete_statementContext.class,0);
		}
		public Multiple_delete_statementContext multiple_delete_statement() {
			return getRuleContext(Multiple_delete_statementContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_delete_statement);
		try {
			setState(2511);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2509);
				single_delete_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2510);
				multiple_delete_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Do_statementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Do_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_do_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDo_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Do_statementContext do_statement() throws RecognitionException {
		Do_statementContext _localctx = new Do_statementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_do_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2513);
			match(DO);
			setState(2514);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_statementContext extends ParserRuleContext {
		public Handler_open_statementContext handler_open_statement() {
			return getRuleContext(Handler_open_statementContext.class,0);
		}
		public Handler_read_index_statementContext handler_read_index_statement() {
			return getRuleContext(Handler_read_index_statementContext.class,0);
		}
		public Handler_read_statementContext handler_read_statement() {
			return getRuleContext(Handler_read_statementContext.class,0);
		}
		public Handler_close_statementContext handler_close_statement() {
			return getRuleContext(Handler_close_statementContext.class,0);
		}
		public Handler_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandler_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandler_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandler_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_statementContext handler_statement() throws RecognitionException {
		Handler_statementContext _localctx = new Handler_statementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_handler_statement);
		try {
			setState(2520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2516);
				handler_open_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2517);
				handler_read_index_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2518);
				handler_read_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2519);
				handler_close_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public Update_elemContext set_firstelem;
		public Update_elemContext update_elem;
		public List<Update_elemContext> set_elem = new ArrayList<Update_elemContext>();
		public Update_elemContext duplicate_firstelem;
		public List<Update_elemContext> duplicate_elem = new ArrayList<Update_elemContext>();
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<Id_listContext> id_list() {
			return getRuleContexts(Id_listContext.class);
		}
		public Id_listContext id_list(int i) {
			return getRuleContext(Id_listContext.class,i);
		}
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2522);
			match(INSERT);
			setState(2524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (DELAYED - 37)) | (1L << (HIGH_PRIORITY - 37)) | (1L << (LOW_PRIORITY - 37)))) != 0)) {
				{
				setState(2523);
				_la = _input.LA(1);
				if ( !(((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (DELAYED - 37)) | (1L << (HIGH_PRIORITY - 37)) | (1L << (LOW_PRIORITY - 37)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2526);
				match(IGNORE);
				}
			}

			setState(2530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2529);
				match(INTO);
				}
			}

			setState(2532);
			table_name();
			setState(2538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2533);
				match(PARTITION);
				setState(2534);
				match(LR_BRACKET);
				setState(2535);
				id_list();
				setState(2536);
				match(RR_BRACKET);
				}
			}

			setState(2556);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					setState(2540);
					match(LR_BRACKET);
					setState(2541);
					id_list();
					setState(2542);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2546);
				insert_statement_value();
				}
				break;
			case SET:
				{
				setState(2547);
				match(SET);
				setState(2548);
				((Insert_statementContext)_localctx).set_firstelem = update_elem();
				setState(2553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2549);
					match(COMMA);
					setState(2550);
					((Insert_statementContext)_localctx).update_elem = update_elem();
					((Insert_statementContext)_localctx).set_elem.add(((Insert_statementContext)_localctx).update_elem);
					}
					}
					setState(2555);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2558);
				match(ON);
				setState(2559);
				match(DUPLICATE);
				setState(2560);
				match(KEY);
				setState(2561);
				match(UPDATE);
				setState(2562);
				((Insert_statementContext)_localctx).duplicate_firstelem = update_elem();
				setState(2567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2563);
					match(COMMA);
					setState(2564);
					((Insert_statementContext)_localctx).update_elem = update_elem();
					((Insert_statementContext)_localctx).duplicate_elem.add(((Insert_statementContext)_localctx).update_elem);
					}
					}
					setState(2569);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_data_statementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token replaceignore;
		public Charset_nameContext charset;
		public Token terminatefieldsymb;
		public Token enclosedsymb;
		public Token escapesymb;
		public Token startingsymb;
		public Token terminatelinesymb;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(MySqlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(MySqlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public List<Col_or_uservarContext> col_or_uservar() {
			return getRuleContexts(Col_or_uservarContext.class);
		}
		public Col_or_uservarContext col_or_uservar(int i) {
			return getRuleContext(Col_or_uservarContext.class,i);
		}
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public List<TerminalNode> TERMINATED() { return getTokens(MySqlParser.TERMINATED); }
		public TerminalNode TERMINATED(int i) {
			return getToken(MySqlParser.TERMINATED, i);
		}
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public Load_data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_data_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoad_data_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoad_data_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoad_data_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Load_data_statementContext load_data_statement() throws RecognitionException {
		Load_data_statementContext _localctx = new Load_data_statementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_load_data_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2572);
			match(LOAD);
			setState(2573);
			match(DATA);
			setState(2575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2574);
				((Load_data_statementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((Load_data_statementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2577);
				match(LOCAL);
				}
			}

			setState(2580);
			match(INFILE);
			setState(2581);
			((Load_data_statementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2582);
				((Load_data_statementContext)_localctx).replaceignore = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((Load_data_statementContext)_localctx).replaceignore = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2585);
			match(INTO);
			setState(2586);
			match(TABLE);
			setState(2587);
			table_name();
			setState(2593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2588);
				match(PARTITION);
				setState(2589);
				match(LR_BRACKET);
				setState(2590);
				id_list();
				setState(2591);
				match(RR_BRACKET);
				}
			}

			setState(2598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2595);
				match(CHARACTER);
				setState(2596);
				match(SET);
				setState(2597);
				((Load_data_statementContext)_localctx).charset = charset_name();
				}
			}

			setState(2619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(2600);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TERMINATED) {
					{
					setState(2601);
					match(TERMINATED);
					setState(2602);
					match(BY);
					setState(2603);
					((Load_data_statementContext)_localctx).terminatefieldsymb = match(STRING_LITERAL);
					}
				}

				setState(2612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCLOSED || _la==OPTIONALLY) {
					{
					setState(2607);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPTIONALLY) {
						{
						setState(2606);
						match(OPTIONALLY);
						}
					}

					setState(2609);
					match(ENCLOSED);
					setState(2610);
					match(BY);
					setState(2611);
					((Load_data_statementContext)_localctx).enclosedsymb = match(STRING_LITERAL);
					}
				}

				setState(2617);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ESCAPED) {
					{
					setState(2614);
					match(ESCAPED);
					setState(2615);
					match(BY);
					setState(2616);
					((Load_data_statementContext)_localctx).escapesymb = match(STRING_LITERAL);
					}
				}

				}
			}

			setState(2632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(2621);
				match(LINES);
				setState(2625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTING) {
					{
					setState(2622);
					match(STARTING);
					setState(2623);
					match(BY);
					setState(2624);
					((Load_data_statementContext)_localctx).startingsymb = match(STRING_LITERAL);
					}
				}

				setState(2630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TERMINATED) {
					{
					setState(2627);
					match(TERMINATED);
					setState(2628);
					match(BY);
					setState(2629);
					((Load_data_statementContext)_localctx).terminatelinesymb = match(STRING_LITERAL);
					}
				}

				}
			}

			setState(2638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2634);
				match(IGNORE);
				setState(2635);
				decimal_literal();
				setState(2636);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2640);
				match(LR_BRACKET);
				setState(2641);
				col_or_uservar();
				setState(2646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2642);
					match(COMMA);
					setState(2643);
					col_or_uservar();
					}
					}
					setState(2648);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2649);
				match(RR_BRACKET);
				}
			}

			setState(2662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2653);
				match(SET);
				setState(2654);
				update_elem();
				setState(2659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2655);
					match(COMMA);
					setState(2656);
					update_elem();
					}
					}
					setState(2661);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_xml_statementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public List<TerminalNode> ROWS() { return getTokens(MySqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MySqlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public List<Col_or_uservarContext> col_or_uservar() {
			return getRuleContexts(Col_or_uservarContext.class);
		}
		public Col_or_uservarContext col_or_uservar(int i) {
			return getRuleContext(Col_or_uservarContext.class,i);
		}
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public Load_xml_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_xml_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoad_xml_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoad_xml_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoad_xml_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Load_xml_statementContext load_xml_statement() throws RecognitionException {
		Load_xml_statementContext _localctx = new Load_xml_statementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_load_xml_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2664);
			match(LOAD);
			setState(2665);
			match(XML);
			setState(2667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2666);
				((Load_xml_statementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((Load_xml_statementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2669);
				match(LOCAL);
				}
			}

			setState(2672);
			match(INFILE);
			setState(2673);
			match(STRING_LITERAL);
			setState(2675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2674);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2677);
			match(INTO);
			setState(2678);
			match(TABLE);
			setState(2679);
			table_name();
			setState(2683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2680);
				match(CHARACTER);
				setState(2681);
				match(SET);
				setState(2682);
				charset_name();
				}
			}

			setState(2691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(2685);
				match(ROWS);
				setState(2686);
				match(IDENTIFIED);
				setState(2687);
				match(BY);
				setState(2688);
				match(LESS_SYMBOL);
				setState(2689);
				match(STRING_LITERAL);
				setState(2690);
				match(GREATER_SYMBOL);
				}
			}

			setState(2697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2693);
				match(IGNORE);
				setState(2694);
				decimal_literal();
				setState(2695);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2699);
				match(LR_BRACKET);
				setState(2700);
				col_or_uservar();
				setState(2705);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2701);
					match(COMMA);
					setState(2702);
					col_or_uservar();
					}
					}
					setState(2707);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2708);
				match(RR_BRACKET);
				}
			}

			setState(2721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2712);
				match(SET);
				setState(2713);
				update_elem();
				setState(2718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2714);
					match(COMMA);
					setState(2715);
					update_elem();
					}
					}
					setState(2720);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_statementContext extends ParserRuleContext {
		public Update_elemContext set_firstelem;
		public Update_elemContext update_elem;
		public List<Update_elemContext> set_elem = new ArrayList<Update_elemContext>();
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<Id_listContext> id_list() {
			return getRuleContexts(Id_listContext.class);
		}
		public Id_listContext id_list(int i) {
			return getRuleContext(Id_listContext.class,i);
		}
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public Replace_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplace_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplace_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplace_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replace_statementContext replace_statement() throws RecognitionException {
		Replace_statementContext _localctx = new Replace_statementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_replace_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2723);
			match(REPLACE);
			setState(2725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(2724);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2727);
				match(INTO);
				}
			}

			setState(2730);
			table_name();
			setState(2736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2731);
				match(PARTITION);
				setState(2732);
				match(LR_BRACKET);
				setState(2733);
				id_list();
				setState(2734);
				match(RR_BRACKET);
				}
			}

			setState(2754);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2742);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					setState(2738);
					match(LR_BRACKET);
					setState(2739);
					id_list();
					setState(2740);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2744);
				insert_statement_value();
				}
				break;
			case SET:
				{
				setState(2745);
				match(SET);
				setState(2746);
				((Replace_statementContext)_localctx).set_firstelem = update_elem();
				setState(2751);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2747);
					match(COMMA);
					setState(2748);
					((Replace_statementContext)_localctx).update_elem = update_elem();
					((Replace_statementContext)_localctx).set_elem.add(((Replace_statementContext)_localctx).update_elem);
					}
					}
					setState(2753);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
	 
		public Select_statementContext() { }
		public void copyFrom(Select_statementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends Select_statementContext {
		public Query_specification_nointoContext query_specification_nointo() {
			return getRuleContext(Query_specification_nointoContext.class,0);
		}
		public List<Union_statementContext> union_statement() {
			return getRuleContexts(Union_statementContext.class);
		}
		public Union_statementContext union_statement(int i) {
			return getRuleContext(Union_statementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(Select_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenSelectContext extends Select_statementContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public ParenSelectContext(Select_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterParenSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitParenSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitParenSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends Select_statementContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public SimpleSelectContext(Select_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenSelectContext extends Select_statementContext {
		public Query_expression_nointoContext query_expression_nointo() {
			return getRuleContext(Query_expression_nointoContext.class,0);
		}
		public List<Union_parenthContext> union_parenth() {
			return getRuleContexts(Union_parenthContext.class);
		}
		public Union_parenthContext union_parenth(int i) {
			return getRuleContext(Union_parenthContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenSelectContext(Select_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_select_statement);
		int _la;
		try {
			int _alt;
			setState(2831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2756);
				query_specification();
				setState(2763);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2757);
					match(FOR);
					setState(2758);
					match(UPDATE);
					}
					break;
				case LOCK:
					{
					setState(2759);
					match(LOCK);
					setState(2760);
					match(IN);
					setState(2761);
					match(SHARE);
					setState(2762);
					match(MODE);
					}
					break;
				case EOF:
				case AS:
				case LEFT:
				case ON:
				case RIGHT:
				case WITH:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MINUS:
				case RR_BRACKET:
				case SEMI:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2765);
				query_expression();
				setState(2772);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2766);
					match(FOR);
					setState(2767);
					match(UPDATE);
					}
					break;
				case LOCK:
					{
					setState(2768);
					match(LOCK);
					setState(2769);
					match(IN);
					setState(2770);
					match(SHARE);
					setState(2771);
					match(MODE);
					}
					break;
				case EOF:
				case AS:
				case LEFT:
				case ON:
				case RIGHT:
				case WITH:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MINUS:
				case RR_BRACKET:
				case SEMI:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2774);
				query_specification_nointo();
				setState(2776); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2775);
						union_statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2778); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,382,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(2780);
					match(UNION);
					setState(2782);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(2781);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2786);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(2784);
						query_specification();
						}
						break;
					case LR_BRACKET:
						{
						setState(2785);
						query_expression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(2791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2790);
					order_by_clause();
					}
				}

				setState(2794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(2793);
					limit_clause();
					}
				}

				setState(2802);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2796);
					match(FOR);
					setState(2797);
					match(UPDATE);
					}
					break;
				case LOCK:
					{
					setState(2798);
					match(LOCK);
					setState(2799);
					match(IN);
					setState(2800);
					match(SHARE);
					setState(2801);
					match(MODE);
					}
					break;
				case EOF:
				case AS:
				case LEFT:
				case ON:
				case RIGHT:
				case WITH:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MINUS:
				case RR_BRACKET:
				case SEMI:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2804);
				query_expression_nointo();
				setState(2806); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2805);
						union_parenth();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2808); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,389,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(2810);
					match(UNION);
					setState(2812);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(2811);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2814);
					query_expression();
					}
				}

				setState(2818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2817);
					order_by_clause();
					}
				}

				setState(2821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(2820);
					limit_clause();
					}
				}

				setState(2829);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2823);
					match(FOR);
					setState(2824);
					match(UPDATE);
					}
					break;
				case LOCK:
					{
					setState(2825);
					match(LOCK);
					setState(2826);
					match(IN);
					setState(2827);
					match(SHARE);
					setState(2828);
					match(MODE);
					}
					break;
				case EOF:
				case AS:
				case LEFT:
				case ON:
				case RIGHT:
				case WITH:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MINUS:
				case RR_BRACKET:
				case SEMI:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Single_update_statementContext single_update_statement() {
			return getRuleContext(Single_update_statementContext.class,0);
		}
		public Multiple_update_statementContext multiple_update_statement() {
			return getRuleContext(Multiple_update_statementContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_update_statement);
		try {
			setState(2835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2833);
				single_update_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2834);
				multiple_update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statement_valueContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsert_statement_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsert_statement_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsert_statement_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statement_valueContext insert_statement_value() throws RecognitionException {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_insert_statement_value);
		int _la;
		try {
			setState(2852);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2837);
				select_statement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2838);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2839);
				match(LR_BRACKET);
				setState(2840);
				expression_list();
				setState(2841);
				match(RR_BRACKET);
				setState(2849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2842);
					match(COMMA);
					setState(2843);
					match(LR_BRACKET);
					setState(2844);
					expression_list();
					setState(2845);
					match(RR_BRACKET);
					}
					}
					setState(2851);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdate_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdate_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdate_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_update_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			full_column_name();
			setState(2855);
			match(EQUAL_SYMBOL);
			setState(2856);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Col_or_uservarContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public Col_or_uservarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_or_uservar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCol_or_uservar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCol_or_uservar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCol_or_uservar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_or_uservarContext col_or_uservar() throws RecognitionException {
		Col_or_uservarContext _localctx = new Col_or_uservarContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_col_or_uservar);
		try {
			setState(2860);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2858);
				id_();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2859);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public Single_delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingle_delete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingle_delete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingle_delete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_delete_statementContext single_delete_statement() throws RecognitionException {
		Single_delete_statementContext _localctx = new Single_delete_statementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_single_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2862);
			match(DELETE);
			setState(2864);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(2863);
				match(LOW_PRIORITY);
				}
			}

			setState(2867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(2866);
				match(QUICK);
				}
			}

			setState(2870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2869);
				match(IGNORE);
				}
			}

			setState(2872);
			match(FROM);
			setState(2873);
			table_name();
			setState(2879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2874);
				match(PARTITION);
				setState(2875);
				match(LR_BRACKET);
				setState(2876);
				id_list();
				setState(2877);
				match(RR_BRACKET);
				}
			}

			setState(2883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2881);
				match(WHERE);
				setState(2882);
				expression(0);
				}
			}

			setState(2886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2885);
				order_by_clause();
				}
			}

			setState(2890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2888);
				match(LIMIT);
				setState(2889);
				decimal_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Multiple_delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultiple_delete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultiple_delete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultiple_delete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_delete_statementContext multiple_delete_statement() throws RecognitionException {
		Multiple_delete_statementContext _localctx = new Multiple_delete_statementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_multiple_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2892);
			match(DELETE);
			setState(2894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(2893);
				match(LOW_PRIORITY);
				}
			}

			setState(2897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(2896);
				match(QUICK);
				}
				break;
			}
			setState(2900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2899);
				match(IGNORE);
				}
			}

			setState(2941);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(2902);
				table_name();
				setState(2905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(2903);
					match(DOT);
					setState(2904);
					match(STAR);
					}
				}

				setState(2915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2907);
					match(COMMA);
					setState(2908);
					table_name();
					setState(2911);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(2909);
						match(DOT);
						setState(2910);
						match(STAR);
						}
					}

					}
					}
					setState(2917);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2918);
				match(FROM);
				setState(2919);
				table_sources();
				}
				break;
			case FROM:
				{
				setState(2921);
				match(FROM);
				setState(2922);
				table_name();
				setState(2925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(2923);
					match(DOT);
					setState(2924);
					match(STAR);
					}
				}

				setState(2935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2927);
					match(COMMA);
					setState(2928);
					table_name();
					setState(2931);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(2929);
						match(DOT);
						setState(2930);
						match(STAR);
						}
					}

					}
					}
					setState(2937);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2938);
				match(USING);
				setState(2939);
				table_sources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2943);
				match(WHERE);
				setState(2944);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_open_statementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public Handler_open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandler_open_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandler_open_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandler_open_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_open_statementContext handler_open_statement() throws RecognitionException {
		Handler_open_statementContext _localctx = new Handler_open_statementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_handler_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2947);
			match(HANDLER);
			setState(2948);
			table_name();
			setState(2949);
			match(OPEN);
			setState(2954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(2951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2950);
					match(AS);
					}
				}

				setState(2953);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_read_index_statementContext extends ParserRuleContext {
		public Full_idContext index;
		public Token move_order;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public Constant_listContext constant_list() {
			return getRuleContext(Constant_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public Handler_read_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_read_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandler_read_index_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandler_read_index_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandler_read_index_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_read_index_statementContext handler_read_index_statement() throws RecognitionException {
		Handler_read_index_statementContext _localctx = new Handler_read_index_statementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_handler_read_index_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2956);
			match(HANDLER);
			setState(2957);
			table_name();
			setState(2958);
			match(READ);
			setState(2959);
			((Handler_read_index_statementContext)_localctx).index = full_id();
			setState(2966);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(2960);
				comparison_operator();
				setState(2961);
				match(LR_BRACKET);
				setState(2962);
				constant_list();
				setState(2963);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(2965);
				((Handler_read_index_statementContext)_localctx).move_order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((Handler_read_index_statementContext)_localctx).move_order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2968);
				match(WHERE);
				setState(2969);
				expression(0);
				}
			}

			setState(2974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2972);
				match(LIMIT);
				setState(2973);
				decimal_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_read_statementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public Handler_read_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_read_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandler_read_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandler_read_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandler_read_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_read_statementContext handler_read_statement() throws RecognitionException {
		Handler_read_statementContext _localctx = new Handler_read_statementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_handler_read_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2976);
			match(HANDLER);
			setState(2977);
			table_name();
			setState(2978);
			match(READ);
			setState(2979);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2980);
				match(WHERE);
				setState(2981);
				expression(0);
				}
			}

			setState(2986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2984);
				match(LIMIT);
				setState(2985);
				decimal_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_close_statementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public Handler_close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandler_close_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandler_close_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandler_close_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_close_statementContext handler_close_statement() throws RecognitionException {
		Handler_close_statementContext _localctx = new Handler_close_statementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_handler_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2988);
			match(HANDLER);
			setState(2989);
			table_name();
			setState(2990);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public Single_update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingle_update_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingle_update_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingle_update_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_update_statementContext single_update_statement() throws RecognitionException {
		Single_update_statementContext _localctx = new Single_update_statementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_single_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2992);
			match(UPDATE);
			setState(2994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(2993);
				match(LOW_PRIORITY);
				}
			}

			setState(2997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2996);
				match(IGNORE);
				}
			}

			setState(2999);
			table_name();
			setState(3004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(3001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3000);
					match(AS);
					}
				}

				setState(3003);
				id_();
				}
			}

			setState(3006);
			match(SET);
			setState(3007);
			update_elem();
			setState(3012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3008);
				match(COMMA);
				setState(3009);
				update_elem();
				}
				}
				setState(3014);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3015);
				match(WHERE);
				setState(3016);
				expression(0);
				}
			}

			setState(3020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3019);
				order_by_clause();
				}
			}

			setState(3023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3022);
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Multiple_update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultiple_update_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultiple_update_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultiple_update_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_update_statementContext multiple_update_statement() throws RecognitionException {
		Multiple_update_statementContext _localctx = new Multiple_update_statementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_multiple_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3025);
			match(UPDATE);
			setState(3027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3026);
				match(LOW_PRIORITY);
				}
			}

			setState(3030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3029);
				match(IGNORE);
				}
			}

			setState(3032);
			table_sources();
			setState(3033);
			match(SET);
			setState(3034);
			update_elem();
			setState(3039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3035);
				match(COMMA);
				setState(3036);
				update_elem();
				}
				}
				setState(3041);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3042);
				match(WHERE);
				setState(3043);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3046);
			match(ORDER);
			setState(3047);
			match(BY);
			setState(3048);
			order_by_expression();
			setState(3053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3049);
				match(COMMA);
				setState(3050);
				order_by_expression();
				}
				}
				setState(3055);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrder_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrder_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrder_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_order_by_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3056);
			expression(0);
			setState(3058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3057);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourcesContext extends ParserRuleContext {
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTable_sources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTable_sources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTable_sources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_table_sources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3060);
			table_source();
			setState(3065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3061);
				match(COMMA);
				setState(3062);
				table_source();
				}
				}
				setState(3067);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTable_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTable_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTable_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_table_source);
		int _la;
		try {
			int _alt;
			setState(3085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3068);
				table_source_item();
				setState(3072);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3069);
						join_part();
						}
						} 
					}
					setState(3074);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3075);
				match(LR_BRACKET);
				setState(3076);
				table_source_item();
				setState(3080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (CROSS - 30)) | (1L << (INNER - 30)) | (1L << (JOIN - 30)) | (1L << (LEFT - 30)))) != 0) || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (NATURAL - 96)) | (1L << (RIGHT - 96)) | (1L << (STRAIGHT_JOIN - 96)))) != 0)) {
					{
					{
					setState(3077);
					join_part();
					}
					}
					setState(3082);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3083);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_itemContext extends ParserRuleContext {
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
	 
		public Table_source_itemContext() { }
		public void copyFrom(Table_source_itemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends Table_source_itemContext {
		public Id_Context alias;
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(Table_source_itemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends Table_source_itemContext {
		public Id_Context alias;
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public List<Index_hintContext> index_hint() {
			return getRuleContexts(Index_hintContext.class);
		}
		public Index_hintContext index_hint(int i) {
			return getRuleContext(Index_hintContext.class,i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public AtomTableItemContext(Table_source_itemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends Table_source_itemContext {
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TableSourcesItemContext(Table_source_itemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_table_source_item);
		int _la;
		try {
			int _alt;
			setState(3127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3087);
				table_name();
				setState(3093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3088);
					match(PARTITION);
					setState(3089);
					match(LR_BRACKET);
					setState(3090);
					id_list();
					setState(3091);
					match(RR_BRACKET);
					}
				}

				setState(3099);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(3096);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3095);
						match(AS);
						}
					}

					setState(3098);
					((AtomTableItemContext)_localctx).alias = id_();
					}
					break;
				}
				setState(3109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE || _la==IGNORE || _la==USE) {
					{
					setState(3101);
					index_hint();
					setState(3106);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,446,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3102);
							match(COMMA);
							setState(3103);
							index_hint();
							}
							} 
						}
						setState(3108);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,446,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3116);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
				case 1:
					{
					setState(3111);
					subquery();
					}
					break;
				case 2:
					{
					setState(3112);
					match(LR_BRACKET);
					setState(3113);
					subquery();
					setState(3114);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3118);
					match(AS);
					}
				}

				setState(3121);
				((SubqueryTableItemContext)_localctx).alias = id_();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3123);
				match(LR_BRACKET);
				setState(3124);
				table_sources();
				setState(3125);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_hintContext extends ParserRuleContext {
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public Index_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndex_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndex_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndex_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_hintContext index_hint() throws RecognitionException {
		Index_hintContext _localctx = new Index_hintContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_index_hint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3129);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3130);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3131);
				match(FOR);
				setState(3137);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case JOIN:
					{
					setState(3132);
					match(JOIN);
					}
					break;
				case ORDER:
					{
					setState(3133);
					match(ORDER);
					setState(3134);
					match(BY);
					}
					break;
				case GROUP:
					{
					setState(3135);
					match(GROUP);
					setState(3136);
					match(BY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3141);
			match(LR_BRACKET);
			setState(3142);
			id_list();
			setState(3143);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_partContext extends ParserRuleContext {
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
	 
		public Join_partContext() { }
		public void copyFrom(Join_partContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends Join_partContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(Join_partContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends Join_partContext {
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(Join_partContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends Join_partContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(Join_partContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends Join_partContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(Join_partContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_join_part);
		int _la;
		try {
			setState(3189);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3145);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3148);
				match(JOIN);
				setState(3149);
				table_source_item();
				setState(3157);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(3150);
					match(ON);
					setState(3151);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3152);
					match(USING);
					setState(3153);
					match(LR_BRACKET);
					setState(3154);
					id_list();
					setState(3155);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3159);
				match(STRAIGHT_JOIN);
				setState(3160);
				table_source_item();
				setState(3163);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
				case 1:
					{
					setState(3161);
					match(ON);
					setState(3162);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3165);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3166);
					match(OUTER);
					}
				}

				setState(3169);
				match(JOIN);
				setState(3170);
				table_source_item();
				setState(3178);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3171);
					match(ON);
					setState(3172);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3173);
					match(USING);
					setState(3174);
					match(LR_BRACKET);
					setState(3175);
					id_list();
					setState(3176);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3180);
				match(NATURAL);
				setState(3185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3181);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3183);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3182);
						match(OUTER);
						}
					}

					}
				}

				setState(3187);
				match(JOIN);
				setState(3188);
				table_source_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3191);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuery_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuery_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_query_expression);
		try {
			setState(3201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3193);
				match(LR_BRACKET);
				setState(3194);
				query_specification();
				setState(3195);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3197);
				match(LR_BRACKET);
				setState(3198);
				query_expression();
				setState(3199);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expression_nointoContext extends ParserRuleContext {
		public Query_specification_nointoContext query_specification_nointo() {
			return getRuleContext(Query_specification_nointoContext.class,0);
		}
		public Query_expression_nointoContext query_expression_nointo() {
			return getRuleContext(Query_expression_nointoContext.class,0);
		}
		public Query_expression_nointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression_nointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuery_expression_nointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuery_expression_nointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuery_expression_nointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expression_nointoContext query_expression_nointo() throws RecognitionException {
		Query_expression_nointoContext _localctx = new Query_expression_nointoContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_query_expression_nointo);
		try {
			setState(3211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3203);
				match(LR_BRACKET);
				setState(3204);
				query_specification_nointo();
				setState(3205);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3207);
				match(LR_BRACKET);
				setState(3208);
				query_expression_nointo();
				setState(3209);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public List<Select_specContext> select_spec() {
			return getRuleContexts(Select_specContext.class);
		}
		public Select_specContext select_spec(int i) {
			return getRuleContext(Select_specContext.class,i);
		}
		public Select_into_expressionContext select_into_expression() {
			return getRuleContext(Select_into_expressionContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuery_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuery_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_query_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3213);
			match(SELECT);
			setState(3217);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3214);
					select_spec();
					}
					} 
				}
				setState(3219);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
			}
			setState(3220);
			select_list();
			setState(3222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3221);
				select_into_expression();
				}
			}

			setState(3225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3224);
				from_clause();
				}
			}

			setState(3228);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(3227);
				order_by_clause();
				}
				break;
			}
			setState(3231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				setState(3230);
				limit_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specification_nointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public List<Select_specContext> select_spec() {
			return getRuleContexts(Select_specContext.class);
		}
		public Select_specContext select_spec(int i) {
			return getRuleContext(Select_specContext.class,i);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Query_specification_nointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification_nointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuery_specification_nointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuery_specification_nointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuery_specification_nointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specification_nointoContext query_specification_nointo() throws RecognitionException {
		Query_specification_nointoContext _localctx = new Query_specification_nointoContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_query_specification_nointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3233);
			match(SELECT);
			setState(3237);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,468,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3234);
					select_spec();
					}
					} 
				}
				setState(3239);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,468,_ctx);
			}
			setState(3240);
			select_list();
			setState(3242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3241);
				from_clause();
				}
			}

			setState(3245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(3244);
				order_by_clause();
				}
				break;
			}
			setState(3248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3247);
				limit_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Union_parenthContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public Query_expression_nointoContext query_expression_nointo() {
			return getRuleContext(Query_expression_nointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public Union_parenthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_union_parenth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnion_parenth(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnion_parenth(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnion_parenth(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Union_parenthContext union_parenth() throws RecognitionException {
		Union_parenthContext _localctx = new Union_parenthContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_union_parenth);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3250);
			match(UNION);
			setState(3252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3251);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3254);
			query_expression_nointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Union_statementContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public Query_specification_nointoContext query_specification_nointo() {
			return getRuleContext(Query_specification_nointoContext.class,0);
		}
		public Query_expression_nointoContext query_expression_nointo() {
			return getRuleContext(Query_expression_nointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public Union_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_union_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnion_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnion_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnion_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Union_statementContext union_statement() throws RecognitionException {
		Union_statementContext _localctx = new Union_statementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_union_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3256);
			match(UNION);
			setState(3258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3257);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3262);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3260);
				query_specification_nointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3261);
				query_expression_nointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_specContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public Select_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelect_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelect_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelect_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_specContext select_spec() throws RecognitionException {
		Select_specContext _localctx = new Select_specContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_select_spec);
		int _la;
		try {
			setState(3272);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3264);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3265);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3266);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3267);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3268);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3269);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3270);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3271);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelect_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_select_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3276);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(3274);
				match(STAR);
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case DEFAULT:
			case EXISTS:
			case FALSE:
			case IF:
			case INTERVAL:
			case LEFT:
			case NOTNULL:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(3275);
				select_list_elem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3278);
				match(COMMA);
				setState(3279);
				select_list_elem();
				}
				}
				setState(3284);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
	 
		public Select_list_elemContext() { }
		public void copyFrom(Select_list_elemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SellistelFuncContext extends Select_list_elemContext {
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SellistelFuncContext(Select_list_elemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSellistelFunc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSellistelFunc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSellistelFunc(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SellistelAllColContext extends Select_list_elemContext {
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public SellistelAllColContext(Select_list_elemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSellistelAllCol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSellistelAllCol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSellistelAllCol(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SellistelExprContext extends Select_list_elemContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SellistelExprContext(Select_list_elemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSellistelExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSellistelExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSellistelExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SellistelColContext extends Select_list_elemContext {
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SellistelColContext(Select_list_elemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSellistelCol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSellistelCol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSellistelCol(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_select_list_elem);
		int _la;
		try {
			setState(3314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				_localctx = new SellistelAllColContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3285);
				full_id();
				setState(3286);
				match(DOT);
				setState(3287);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SellistelColContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3289);
				full_column_name();
				setState(3294);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
				case 1:
					{
					setState(3291);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3290);
						match(AS);
						}
					}

					setState(3293);
					id_();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SellistelFuncContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3296);
				function_call();
				setState(3301);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(3298);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3297);
						match(AS);
						}
					}

					setState(3300);
					id_();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SellistelExprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
				case 1:
					{
					setState(3303);
					match(LOCAL_ID);
					setState(3304);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(3307);
				expression(0);
				setState(3312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
				case 1:
					{
					setState(3309);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3308);
						match(AS);
						}
					}

					setState(3311);
					id_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_into_expressionContext extends ParserRuleContext {
		public Select_into_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_into_expression; }
	 
		public Select_into_expressionContext() { }
		public void copyFrom(Select_into_expressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoOutfileContext extends Select_into_expressionContext {
		public Token filename;
		public Charset_nameContext charset;
		public Token terminatefieldsymb;
		public Token enclosedsymb;
		public Token escapesymb;
		public Token startingsymb;
		public Token terminatelinesymb;
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<TerminalNode> TERMINATED() { return getTokens(MySqlParser.TERMINATED); }
		public TerminalNode TERMINATED(int i) {
			return getToken(MySqlParser.TERMINATED, i);
		}
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public SelectIntoOutfileContext(Select_into_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoOutfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoOutfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoOutfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoVarsContext extends Select_into_expressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySqlParser.LOCAL_ID, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public SelectIntoVarsContext(Select_into_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoVars(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoVars(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoVars(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpContext extends Select_into_expressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpContext(Select_into_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoDump(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoDump(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoDump(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_into_expressionContext select_into_expression() throws RecognitionException {
		Select_into_expressionContext _localctx = new Select_into_expressionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_select_into_expression);
		int _la;
		try {
			setState(3376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVarsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3316);
				match(INTO);
				setState(3319);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(3317);
					match(LOCAL_ID);
					}
					break;
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(3318);
					id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3321);
					match(COMMA);
					setState(3324);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LOCAL_ID:
						{
						setState(3322);
						match(LOCAL_ID);
						}
						break;
					case LEFT:
					case RIGHT:
					case DATE:
					case TIME:
					case TIMESTAMP:
					case DATETIME:
					case YEAR:
					case TEXT:
					case ENUM:
					case COUNT:
					case POSITION:
					case ACTION:
					case AFTER:
					case ALGORITHM:
					case ANY:
					case AT:
					case AUTHORS:
					case AUTOCOMMIT:
					case AUTOEXTEND_SIZE:
					case AUTO_INCREMENT:
					case AVG_ROW_LENGTH:
					case BEGIN:
					case BINLOG:
					case BIT:
					case BTREE:
					case CASCADED:
					case CHAIN:
					case CHECKSUM:
					case CIPHER:
					case CLIENT:
					case COALESCE:
					case CODE:
					case COLUMNS:
					case COLUMN_FORMAT:
					case COMMENT:
					case COMMIT:
					case COMPACT:
					case COMPLETION:
					case COMPRESSED:
					case CONCURRENT:
					case CONNECTION:
					case CONSISTENT:
					case CONTAINS:
					case CONTRIBUTORS:
					case COPY:
					case DATA:
					case DATAFILE:
					case DEFINER:
					case DELAY_KEY_WRITE:
					case DIRECTORY:
					case DISABLE:
					case DISCARD:
					case DISK:
					case DO:
					case DUMPFILE:
					case DUPLICATE:
					case DYNAMIC:
					case ENABLE:
					case ENDS:
					case ENGINE:
					case ENGINES:
					case ERRORS:
					case ESCAPE:
					case EVEN:
					case EVENT:
					case EVENTS:
					case EVERY:
					case EXCHANGE:
					case EXCLUSIVE:
					case EXPIRE:
					case EXTENT_SIZE:
					case FIELDS:
					case FIRST:
					case FIXED:
					case FULL:
					case FUNCTION:
					case GLOBAL:
					case GRANTS:
					case HASH:
					case HOST:
					case IDENTIFIED:
					case IMPORT:
					case INITIAL_SIZE:
					case INPLACE:
					case INSERT_METHOD:
					case INVOKER:
					case ISOLATION:
					case ISSUER:
					case KEY_BLOCK_SIZE:
					case LANGUAGE:
					case LAST:
					case LESS:
					case LEVEL:
					case LIST:
					case LOCAL:
					case LOGFILE:
					case LOGS:
					case MASTER:
					case MAX_CONNECTIONS_PER_HOUR:
					case MAX_QUERIES_PER_HOUR:
					case MAX_ROWS:
					case MAX_SIZE:
					case MAX_UPDATES_PER_HOUR:
					case MAX_USER_CONNECTIONS:
					case MERGE:
					case MID:
					case MIN_ROWS:
					case MODIFY:
					case MUTEX:
					case MYSQL:
					case NAME:
					case NAMES:
					case NCHAR:
					case NO:
					case NODEGROUP:
					case NONE:
					case OFFLINE:
					case OFFSET:
					case OJ:
					case OLD_PASSWORD:
					case ONLINE:
					case ONLY:
					case OPTIONS:
					case OWNER:
					case PACK_KEYS:
					case PARSER:
					case PARTIAL:
					case PARTITIONING:
					case PARTITIONS:
					case PASSWORD:
					case PLUGINS:
					case PORT:
					case PRESERVE:
					case PROCESSLIST:
					case PROFILE:
					case PROFILES:
					case PROXY:
					case QUERY:
					case QUICK:
					case REBUILD:
					case REDO_BUFFER_SIZE:
					case REDUNDANT:
					case RELAYLOG:
					case REMOVE:
					case REORGANIZE:
					case REPAIR:
					case REPLICATION:
					case RETURNS:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWS:
					case ROW_FORMAT:
					case SAVEPOINT:
					case SCHEDULE:
					case SECURITY:
					case SERVER:
					case SESSION:
					case SHARE:
					case SHARED:
					case SIGNED:
					case SIMPLE:
					case SLAVE:
					case SNAPSHOT:
					case SOCKET:
					case SOME:
					case SOUNDS:
					case SQL_BUFFER_RESULT:
					case SQL_CACHE:
					case SQL_NO_CACHE:
					case START:
					case STARTS:
					case STATS_AUTO_RECALC:
					case STATS_PERSISTENT:
					case STATS_SAMPLE_PAGES:
					case STATUS:
					case STORAGE:
					case SUBJECT:
					case SUBPARTITION:
					case SUBPARTITIONS:
					case TABLESPACE:
					case TEMPORARY:
					case TEMPTABLE:
					case THAN:
					case TRANSACTION:
					case TRUNCATE:
					case UNDEFINED:
					case UNDOFILE:
					case UNDO_BUFFER_SIZE:
					case UNKNOWN:
					case UPGRADE:
					case USER:
					case VALUE:
					case VARIABLES:
					case VIEW:
					case WAIT:
					case WARNINGS:
					case WORK:
					case WRAPPER:
					case X509:
					case XML:
					case QUARTER:
					case MONTH:
					case DAY:
					case HOUR:
					case MINUTE:
					case WEEK:
					case SECOND:
					case MICROSECOND:
					case TABLES:
					case ROUTINE:
					case EXECUTE:
					case FILE:
					case PROCESS:
					case RELOAD:
					case SHUTDOWN:
					case SUPER:
					case PRIVILEGES:
					case ARMSCII8:
					case ASCII:
					case BIG5:
					case CP1250:
					case CP1251:
					case CP1256:
					case CP1257:
					case CP850:
					case CP852:
					case CP866:
					case CP932:
					case DEC8:
					case EUCJPMS:
					case EUCKR:
					case GB2312:
					case GBK:
					case GEOSTD8:
					case GREEK:
					case HEBREW:
					case HP8:
					case KEYBCS2:
					case KOI8R:
					case KOI8U:
					case LATIN1:
					case LATIN2:
					case LATIN5:
					case LATIN7:
					case MACCE:
					case MACROMAN:
					case SJIS:
					case SWE7:
					case TIS620:
					case UCS2:
					case UJIS:
					case UTF16:
					case UTF16LE:
					case UTF32:
					case UTF8:
					case UTF8MB3:
					case UTF8MB4:
					case ARCHIVE:
					case BLACKHOLE:
					case CSV:
					case FEDERATED:
					case INNODB:
					case MEMORY:
					case MRG_MYISAM:
					case MYISAM:
					case NDB:
					case NDBCLUSTER:
					case PERFOMANCE_SCHEMA:
					case REPEATABLE:
					case COMMITTED:
					case UNCOMMITTED:
					case SERIALIZABLE:
					case GEOMETRYCOLLECTION:
					case LINESTRING:
					case MULTILINESTRING:
					case MULTIPOINT:
					case MULTIPOLYGON:
					case POINT:
					case POLYGON:
					case ABS:
					case ACOS:
					case ADDDATE:
					case ADDTIME:
					case AES_DECRYPT:
					case AES_ENCRYPT:
					case AREA:
					case ASBINARY:
					case ASIN:
					case ASTEXT:
					case ASWKB:
					case ASWKT:
					case ASYMMETRIC_DECRYPT:
					case ASYMMETRIC_DERIVE:
					case ASYMMETRIC_ENCRYPT:
					case ASYMMETRIC_SIGN:
					case ASYMMETRIC_VERIFY:
					case ATAN:
					case ATAN2:
					case BENCHMARK:
					case BIN:
					case BIT_COUNT:
					case BIT_LENGTH:
					case BUFFER:
					case CEIL:
					case CEILING:
					case CENTROID:
					case CHARACTER_LENGTH:
					case CHARSET:
					case CHAR_LENGTH:
					case COERCIBILITY:
					case COLLATION:
					case COMPRESS:
					case CONCAT:
					case CONCAT_WS:
					case CONNECTION_ID:
					case CONV:
					case CONVERT_TZ:
					case COS:
					case COT:
					case CRC32:
					case CREATE_ASYMMETRIC_PRIV_KEY:
					case CREATE_ASYMMETRIC_PUB_KEY:
					case CREATE_DH_PARAMETERS:
					case CREATE_DIGEST:
					case CROSSES:
					case DATEDIFF:
					case DATE_FORMAT:
					case DAYNAME:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFYEAR:
					case DECODE:
					case DEGREES:
					case DES_DECRYPT:
					case DES_ENCRYPT:
					case DIMENSION:
					case DISJOINT:
					case ELT:
					case ENCODE:
					case ENCRYPT:
					case ENDPOINT:
					case ENVELOPE:
					case EQUALS:
					case EXP:
					case EXPORT_SET:
					case EXTERIORRING:
					case EXTRACTVALUE:
					case FIELD:
					case FIND_IN_SET:
					case FLOOR:
					case FORMAT:
					case FOUND_ROWS:
					case FROM_BASE64:
					case FROM_DAYS:
					case FROM_UNIXTIME:
					case GEOMCOLLFROMTEXT:
					case GEOMCOLLFROMWKB:
					case GEOMETRYCOLLECTIONFROMTEXT:
					case GEOMETRYCOLLECTIONFROMWKB:
					case GEOMETRYFROMTEXT:
					case GEOMETRYFROMWKB:
					case GEOMETRYN:
					case GEOMETRYTYPE:
					case GEOMFROMTEXT:
					case GEOMFROMWKB:
					case GET_FORMAT:
					case GET_LOCK:
					case GLENGTH:
					case GREATEST:
					case GTID_SUBSET:
					case GTID_SUBTRACT:
					case HEX:
					case IFNULL:
					case INET6_ATON:
					case INET6_NTOA:
					case INET_ATON:
					case INET_NTOA:
					case INSTR:
					case INTERIORRINGN:
					case INTERSECTS:
					case ISCLOSED:
					case ISEMPTY:
					case ISNULL:
					case ISSIMPLE:
					case IS_FREE_LOCK:
					case IS_IPV4:
					case IS_IPV4_COMPAT:
					case IS_IPV4_MAPPED:
					case IS_IPV6:
					case IS_USED_LOCK:
					case LAST_INSERT_ID:
					case LCASE:
					case LEAST:
					case LENGTH:
					case LINEFROMTEXT:
					case LINEFROMWKB:
					case LINESTRINGFROMTEXT:
					case LINESTRINGFROMWKB:
					case LN:
					case LOAD_FILE:
					case LOCATE:
					case LOG:
					case LOG10:
					case LOG2:
					case LOWER:
					case LPAD:
					case LTRIM:
					case MAKEDATE:
					case MAKETIME:
					case MAKE_SET:
					case MASTER_POS_WAIT:
					case MBRCONTAINS:
					case MBRDISJOINT:
					case MBREQUAL:
					case MBRINTERSECTS:
					case MBROVERLAPS:
					case MBRTOUCHES:
					case MBRWITHIN:
					case MD5:
					case MLINEFROMTEXT:
					case MLINEFROMWKB:
					case MONTHNAME:
					case MPOINTFROMTEXT:
					case MPOINTFROMWKB:
					case MPOLYFROMTEXT:
					case MPOLYFROMWKB:
					case MULTILINESTRINGFROMTEXT:
					case MULTILINESTRINGFROMWKB:
					case MULTIPOINTFROMTEXT:
					case MULTIPOINTFROMWKB:
					case MULTIPOLYGONFROMTEXT:
					case MULTIPOLYGONFROMWKB:
					case NAME_CONST:
					case NULLIF:
					case NUMGEOMETRIES:
					case NUMINTERIORRINGS:
					case NUMPOINTS:
					case OCT:
					case OCTET_LENGTH:
					case ORD:
					case OVERLAPS:
					case PERIOD_ADD:
					case PERIOD_DIFF:
					case PI:
					case POINTFROMTEXT:
					case POINTFROMWKB:
					case POINTN:
					case POLYFROMTEXT:
					case POLYFROMWKB:
					case POLYGONFROMTEXT:
					case POLYGONFROMWKB:
					case POW:
					case POWER:
					case QUOTE:
					case RADIANS:
					case RAND:
					case RANDOM_BYTES:
					case RELEASE_LOCK:
					case REVERSE:
					case ROUND:
					case ROW_COUNT:
					case RPAD:
					case RTRIM:
					case SEC_TO_TIME:
					case SESSION_USER:
					case SHA:
					case SHA1:
					case SHA2:
					case SIGN:
					case SIN:
					case SLEEP:
					case SOUNDEX:
					case SQL_THREAD_WAIT_AFTER_GTIDS:
					case SQRT:
					case SRID:
					case STARTPOINT:
					case STRCMP:
					case STR_TO_DATE:
					case ST_AREA:
					case ST_ASBINARY:
					case ST_ASTEXT:
					case ST_ASWKB:
					case ST_ASWKT:
					case ST_BUFFER:
					case ST_CENTROID:
					case ST_CONTAINS:
					case ST_CROSSES:
					case ST_DIFFERENCE:
					case ST_DIMENSION:
					case ST_DISJOINT:
					case ST_DISTANCE:
					case ST_ENDPOINT:
					case ST_ENVELOPE:
					case ST_EQUALS:
					case ST_EXTERIORRING:
					case ST_GEOMCOLLFROMTEXT:
					case ST_GEOMCOLLFROMTXT:
					case ST_GEOMCOLLFROMWKB:
					case ST_GEOMETRYCOLLECTIONFROMTEXT:
					case ST_GEOMETRYCOLLECTIONFROMWKB:
					case ST_GEOMETRYFROMTEXT:
					case ST_GEOMETRYFROMWKB:
					case ST_GEOMETRYN:
					case ST_GEOMETRYTYPE:
					case ST_GEOMFROMTEXT:
					case ST_GEOMFROMWKB:
					case ST_INTERIORRINGN:
					case ST_INTERSECTION:
					case ST_INTERSECTS:
					case ST_ISCLOSED:
					case ST_ISEMPTY:
					case ST_ISSIMPLE:
					case ST_LINEFROMTEXT:
					case ST_LINEFROMWKB:
					case ST_LINESTRINGFROMTEXT:
					case ST_LINESTRINGFROMWKB:
					case ST_NUMGEOMETRIES:
					case ST_NUMINTERIORRING:
					case ST_NUMINTERIORRINGS:
					case ST_NUMPOINTS:
					case ST_OVERLAPS:
					case ST_POINTFROMTEXT:
					case ST_POINTFROMWKB:
					case ST_POINTN:
					case ST_POLYFROMTEXT:
					case ST_POLYFROMWKB:
					case ST_POLYGONFROMTEXT:
					case ST_POLYGONFROMWKB:
					case ST_SRID:
					case ST_STARTPOINT:
					case ST_SYMDIFFERENCE:
					case ST_TOUCHES:
					case ST_UNION:
					case ST_WITHIN:
					case ST_X:
					case ST_Y:
					case SUBDATE:
					case SUBSTRING_INDEX:
					case SUBTIME:
					case SYSTEM_USER:
					case TAN:
					case TIMEDIFF:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIME_FORMAT:
					case TIME_TO_SEC:
					case TOUCHES:
					case TO_BASE64:
					case TO_DAYS:
					case TO_SECONDS:
					case UCASE:
					case UNCOMPRESS:
					case UNCOMPRESSED_LENGTH:
					case UNHEX:
					case UNIX_TIMESTAMP:
					case UPDATEXML:
					case UPPER:
					case UUID:
					case UUID_SHORT:
					case VALIDATE_PASSWORD_STRENGTH:
					case VERSION:
					case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
					case WEEKDAY:
					case WEEKOFYEAR:
					case WEIGHT_STRING:
					case WITHIN:
					case YEARWEEK:
					case Y_FUNCTION:
					case X_FUNCTION:
					case CHARSET_REVERSE_QOUTE_STRING:
					case ID:
					case REVERSE_QUOTE_ID:
						{
						setState(3323);
						id_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(3330);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3331);
				match(INTO);
				setState(3332);
				match(DUMPFILE);
				setState(3333);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoOutfileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3334);
				match(INTO);
				setState(3335);
				match(OUTFILE);
				setState(3336);
				((SelectIntoOutfileContext)_localctx).filename = match(STRING_LITERAL);
				setState(3340);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3337);
					match(CHARACTER);
					setState(3338);
					match(SET);
					setState(3339);
					((SelectIntoOutfileContext)_localctx).charset = charset_name();
					}
				}

				setState(3361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(3342);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3346);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TERMINATED) {
						{
						setState(3343);
						match(TERMINATED);
						setState(3344);
						match(BY);
						setState(3345);
						((SelectIntoOutfileContext)_localctx).terminatefieldsymb = match(STRING_LITERAL);
						}
					}

					setState(3354);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ENCLOSED || _la==OPTIONALLY) {
						{
						setState(3349);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OPTIONALLY) {
							{
							setState(3348);
							match(OPTIONALLY);
							}
						}

						setState(3351);
						match(ENCLOSED);
						setState(3352);
						match(BY);
						setState(3353);
						((SelectIntoOutfileContext)_localctx).enclosedsymb = match(STRING_LITERAL);
						}
					}

					setState(3359);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ESCAPED) {
						{
						setState(3356);
						match(ESCAPED);
						setState(3357);
						match(BY);
						setState(3358);
						((SelectIntoOutfileContext)_localctx).escapesymb = match(STRING_LITERAL);
						}
					}

					}
					break;
				}
				setState(3374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3363);
					match(LINES);
					setState(3367);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STARTING) {
						{
						setState(3364);
						match(STARTING);
						setState(3365);
						match(BY);
						setState(3366);
						((SelectIntoOutfileContext)_localctx).startingsymb = match(STRING_LITERAL);
						}
					}

					setState(3372);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TERMINATED) {
						{
						setState(3369);
						match(TERMINATED);
						setState(3370);
						match(BY);
						setState(3371);
						((SelectIntoOutfileContext)_localctx).terminatelinesymb = match(STRING_LITERAL);
						}
					}

					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_from_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3378);
			match(FROM);
			setState(3379);
			table_sources();
			setState(3382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3380);
				match(WHERE);
				setState(3381);
				expression(0);
				}
			}

			setState(3398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3384);
				match(GROUP);
				setState(3385);
				match(BY);
				setState(3386);
				group_by_item();
				setState(3391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3387);
					match(COMMA);
					setState(3388);
					group_by_item();
					}
					}
					setState(3393);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3396);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					setState(3394);
					match(WITH);
					setState(3395);
					match(ROLLUP);
					}
					break;
				}
				}
			}

			setState(3402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3400);
				match(HAVING);
				setState(3401);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroup_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_group_by_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3404);
			expression(0);
			setState(3406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3405);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3408);
			match(LIMIT);
			setState(3419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(3412);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
				case 1:
					{
					setState(3409);
					decimal_literal();
					setState(3410);
					match(COMMA);
					}
					break;
				}
				setState(3414);
				decimal_literal();
				}
				break;
			case 2:
				{
				setState(3415);
				decimal_literal();
				setState(3416);
				match(OFFSET);
				setState(3417);
				decimal_literal();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_transactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<Transact_optionContext> transact_option() {
			return getRuleContexts(Transact_optionContext.class);
		}
		public Transact_optionContext transact_option(int i) {
			return getRuleContext(Transact_optionContext.class,i);
		}
		public Start_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStart_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStart_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStart_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_transactionContext start_transaction() throws RecognitionException {
		Start_transactionContext _localctx = new Start_transactionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_start_transaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3421);
			match(START);
			setState(3422);
			match(TRANSACTION);
			setState(3431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3423);
				transact_option();
				setState(3428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3424);
					match(COMMA);
					setState(3425);
					transact_option();
					}
					}
					setState(3430);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_workContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public Begin_workContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_work; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBegin_work(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBegin_work(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBegin_work(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_workContext begin_work() throws RecognitionException {
		Begin_workContext _localctx = new Begin_workContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_begin_work);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3433);
			match(BEGIN);
			setState(3435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3434);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_workContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public Commit_workContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_work; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommit_work(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommit_work(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommit_work(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_workContext commit_work() throws RecognitionException {
		Commit_workContext _localctx = new Commit_workContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_commit_work);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3437);
			match(COMMIT);
			setState(3439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3438);
				match(WORK);
				}
			}

			setState(3446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3441);
				match(AND);
				setState(3443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3442);
					match(NO);
					}
				}

				setState(3445);
				match(CHAIN);
				}
			}

			setState(3452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELEASE || _la==NO) {
				{
				setState(3449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3448);
					match(NO);
					}
				}

				setState(3451);
				match(RELEASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_workContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public Rollback_workContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_work; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollback_work(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollback_work(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRollback_work(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_workContext rollback_work() throws RecognitionException {
		Rollback_workContext _localctx = new Rollback_workContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_rollback_work);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3454);
			match(ROLLBACK);
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3455);
				match(WORK);
				}
			}

			setState(3463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3458);
				match(AND);
				setState(3460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3459);
					match(NO);
					}
				}

				setState(3462);
				match(CHAIN);
				}
			}

			setState(3469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELEASE || _la==NO) {
				{
				setState(3466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3465);
					match(NO);
					}
				}

				setState(3468);
				match(RELEASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3471);
			match(SAVEPOINT);
			setState(3472);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3474);
			match(ROLLBACK);
			setState(3476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3475);
				match(WORK);
				}
			}

			setState(3478);
			match(TO);
			setState(3480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				{
				setState(3479);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3482);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_statementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Release_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRelease_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRelease_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRelease_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Release_statementContext release_statement() throws RecognitionException {
		Release_statementContext _localctx = new Release_statementContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_release_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			match(RELEASE);
			setState(3485);
			match(SAVEPOINT);
			setState(3486);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_tablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public Lock_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLock_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLock_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLock_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_tablesContext lock_tables() throws RecognitionException {
		Lock_tablesContext _localctx = new Lock_tablesContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_lock_tables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3488);
			match(LOCK);
			setState(3489);
			match(TABLES);
			setState(3490);
			lock_table_element();
			setState(3495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3491);
				match(COMMA);
				setState(3492);
				lock_table_element();
				}
				}
				setState(3497);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unlock_tablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public Unlock_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlock_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnlock_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnlock_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnlock_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unlock_tablesContext unlock_tables() throws RecognitionException {
		Unlock_tablesContext _localctx = new Unlock_tablesContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_unlock_tables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3498);
			match(UNLOCK);
			setState(3499);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_autocommit_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public Set_autocommit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_autocommit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSet_autocommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSet_autocommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSet_autocommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_autocommit_statementContext set_autocommit_statement() throws RecognitionException {
		Set_autocommit_statementContext _localctx = new Set_autocommit_statementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_set_autocommit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3501);
			match(SET);
			setState(3502);
			match(AUTOCOMMIT);
			setState(3503);
			match(EQUAL_SYMBOL);
			setState(3504);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<Trans_characteristicContext> trans_characteristic() {
			return getRuleContexts(Trans_characteristicContext.class);
		}
		public Trans_characteristicContext trans_characteristic(int i) {
			return getRuleContext(Trans_characteristicContext.class,i);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public Set_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSet_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSet_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSet_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_statementContext set_transaction_statement() throws RecognitionException {
		Set_transaction_statementContext _localctx = new Set_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_set_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3506);
			match(SET);
			setState(3508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(3507);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3510);
			match(TRANSACTION);
			setState(3511);
			trans_characteristic();
			setState(3516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3512);
				match(COMMA);
				setState(3513);
				trans_characteristic();
				}
				}
				setState(3518);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transact_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public Transact_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transact_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransact_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransact_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransact_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transact_optionContext transact_option() throws RecognitionException {
		Transact_optionContext _localctx = new Transact_optionContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_transact_option);
		try {
			setState(3526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3519);
				match(WITH);
				setState(3520);
				match(CONSISTENT);
				setState(3521);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3522);
				match(READ);
				setState(3523);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3524);
				match(READ);
				setState(3525);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLock_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3528);
			table_name();
			setState(3533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(3530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3529);
					match(AS);
					}
				}

				setState(3532);
				id_();
				}
			}

			setState(3543);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3535);
				match(READ);
				setState(3537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(3536);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				{
				setState(3540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3539);
					match(LOW_PRIORITY);
					}
				}

				setState(3542);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trans_characteristicContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public Transaction_levelContext transaction_level() {
			return getRuleContext(Transaction_levelContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public Trans_characteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trans_characteristic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrans_characteristic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrans_characteristic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTrans_characteristic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trans_characteristicContext trans_characteristic() throws RecognitionException {
		Trans_characteristicContext _localctx = new Trans_characteristicContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_trans_characteristic);
		try {
			setState(3552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3545);
				match(ISOLATION);
				setState(3546);
				match(LEVEL);
				setState(3547);
				transaction_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3548);
				match(READ);
				setState(3549);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3550);
				match(READ);
				setState(3551);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_levelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public Transaction_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransaction_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransaction_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransaction_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_levelContext transaction_level() throws RecognitionException {
		Transaction_levelContext _localctx = new Transaction_levelContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_transaction_level);
		try {
			setState(3561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3554);
				match(REPEATABLE);
				setState(3555);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3556);
				match(READ);
				setState(3557);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3558);
				match(READ);
				setState(3559);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3560);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_masterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<Master_optionContext> master_option() {
			return getRuleContexts(Master_optionContext.class);
		}
		public Master_optionContext master_option(int i) {
			return getRuleContext(Master_optionContext.class,i);
		}
		public Channel_optionContext channel_option() {
			return getRuleContext(Channel_optionContext.class,0);
		}
		public Change_masterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_master; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChange_master(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChange_master(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChange_master(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_masterContext change_master() throws RecognitionException {
		Change_masterContext _localctx = new Change_masterContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_change_master);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3563);
			match(CHANGE);
			setState(3564);
			match(MASTER);
			setState(3565);
			match(TO);
			setState(3566);
			master_option();
			setState(3571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3567);
				match(COMMA);
				setState(3568);
				master_option();
				}
				}
				setState(3573);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3574);
				channel_option();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_repl_filterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public List<Repl_filterContext> repl_filter() {
			return getRuleContexts(Repl_filterContext.class);
		}
		public Repl_filterContext repl_filter(int i) {
			return getRuleContext(Repl_filterContext.class,i);
		}
		public Change_repl_filterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_repl_filter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChange_repl_filter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChange_repl_filter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChange_repl_filter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_repl_filterContext change_repl_filter() throws RecognitionException {
		Change_repl_filterContext _localctx = new Change_repl_filterContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_change_repl_filter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3577);
			match(CHANGE);
			setState(3578);
			match(REPLICATION);
			setState(3579);
			match(FILTER);
			setState(3580);
			repl_filter();
			setState(3585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3581);
				match(COMMA);
				setState(3582);
				repl_filter();
				}
				}
				setState(3587);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Purge_binary_logsContext extends ParserRuleContext {
		public TerminalNode PURGE() { return getToken(MySqlParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public Purge_binary_logsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purge_binary_logs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPurge_binary_logs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPurge_binary_logs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPurge_binary_logs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Purge_binary_logsContext purge_binary_logs() throws RecognitionException {
		Purge_binary_logsContext _localctx = new Purge_binary_logsContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_purge_binary_logs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3588);
			match(PURGE);
			setState(3589);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3590);
			match(LOGS);
			setState(3591);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3592);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reset_masterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public Reset_masterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_master; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReset_master(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReset_master(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReset_master(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reset_masterContext reset_master() throws RecognitionException {
		Reset_masterContext _localctx = new Reset_masterContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_reset_master);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3594);
			match(RESET);
			setState(3595);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reset_slaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public Channel_optionContext channel_option() {
			return getRuleContext(Channel_optionContext.class,0);
		}
		public Reset_slaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_slave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReset_slave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReset_slave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReset_slave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reset_slaveContext reset_slave() throws RecognitionException {
		Reset_slaveContext _localctx = new Reset_slaveContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_reset_slave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3597);
			match(RESET);
			setState(3598);
			match(SLAVE);
			setState(3600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(3599);
				match(ALL);
				}
			}

			setState(3603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3602);
				channel_option();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_slaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public List<Thread_typeContext> thread_type() {
			return getRuleContexts(Thread_typeContext.class);
		}
		public Thread_typeContext thread_type(int i) {
			return getRuleContext(Thread_typeContext.class,i);
		}
		public Until_optionContext until_option() {
			return getRuleContext(Until_optionContext.class,0);
		}
		public List<Start_slave_connection_optionContext> start_slave_connection_option() {
			return getRuleContexts(Start_slave_connection_optionContext.class);
		}
		public Start_slave_connection_optionContext start_slave_connection_option(int i) {
			return getRuleContext(Start_slave_connection_optionContext.class,i);
		}
		public Channel_optionContext channel_option() {
			return getRuleContext(Channel_optionContext.class,0);
		}
		public Start_slaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_slave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStart_slave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStart_slave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStart_slave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_slaveContext start_slave() throws RecognitionException {
		Start_slaveContext _localctx = new Start_slaveContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_start_slave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3605);
			match(START);
			setState(3606);
			match(SLAVE);
			setState(3615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3607);
				thread_type();
				setState(3612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3608);
					match(COMMA);
					setState(3609);
					thread_type();
					}
					}
					setState(3614);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3617);
			match(UNTIL);
			setState(3619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MASTER_LOG_FILE || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (RELAY_LOG_FILE - 452)) | (1L << (SQL_AFTER_GTIDS - 452)) | (1L << (SQL_AFTER_MTS_GAPS - 452)) | (1L << (SQL_BEFORE_GTIDS - 452)))) != 0)) {
				{
				setState(3618);
				until_option();
				}
			}

			setState(3624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(3621);
				start_slave_connection_option();
				}
				}
				setState(3626);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3627);
				channel_option();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stop_slaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<Thread_typeContext> thread_type() {
			return getRuleContexts(Thread_typeContext.class);
		}
		public Thread_typeContext thread_type(int i) {
			return getRuleContext(Thread_typeContext.class,i);
		}
		public Stop_slaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stop_slave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStop_slave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStop_slave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStop_slave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stop_slaveContext stop_slave() throws RecognitionException {
		Stop_slaveContext _localctx = new Stop_slaveContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_stop_slave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3630);
			match(STOP);
			setState(3631);
			match(SLAVE);
			setState(3640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3632);
				thread_type();
				setState(3637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3633);
					match(COMMA);
					setState(3634);
					thread_type();
					}
					}
					setState(3639);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_group_replContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public Start_group_replContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_group_repl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStart_group_repl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStart_group_repl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStart_group_repl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_group_replContext start_group_repl() throws RecognitionException {
		Start_group_replContext _localctx = new Start_group_replContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_start_group_repl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3642);
			match(START);
			setState(3643);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stop_group_replContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public Stop_group_replContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stop_group_repl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStop_group_repl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStop_group_repl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStop_group_repl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stop_group_replContext stop_group_repl() throws RecognitionException {
		Stop_group_replContext _localctx = new Stop_group_replContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_stop_group_repl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3645);
			match(START);
			setState(3646);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Master_optionContext extends ParserRuleContext {
		public Master_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_master_option; }
	 
		public Master_optionContext() { }
		public void copyFrom(Master_optionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterOptIdListContext extends Master_optionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public MasterOptIdListContext(Master_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterOptIdList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterOptIdList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterOptIdList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterOptDecimalContext extends Master_optionContext {
		public Decimal_master_optionContext decimal_master_option() {
			return getRuleContext(Decimal_master_optionContext.class,0);
		}
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public MasterOptDecimalContext(Master_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterOptDecimal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterOptDecimal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterOptDecimal(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterOptRealContext extends Master_optionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterOptRealContext(Master_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterOptReal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterOptReal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterOptReal(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterOptBoolContext extends Master_optionContext {
		public Bool_master_optionContext bool_master_option() {
			return getRuleContext(Bool_master_optionContext.class,0);
		}
		public MasterOptBoolContext(Master_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterOptBool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterOptBool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterOptBool(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterOptStringContext extends Master_optionContext {
		public String_master_optionContext string_master_option() {
			return getRuleContext(String_master_optionContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterOptStringContext(Master_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterOptString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterOptString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterOptString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Master_optionContext master_option() throws RecognitionException {
		Master_optionContext _localctx = new Master_optionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_master_option);
		int _la;
		try {
			setState(3677);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterOptStringContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3648);
				string_master_option();
				setState(3649);
				match(EQUAL_SYMBOL);
				setState(3650);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterOptDecimalContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3652);
				decimal_master_option();
				setState(3653);
				match(EQUAL_SYMBOL);
				setState(3654);
				decimal_literal();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterOptBoolContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3656);
				bool_master_option();
				setState(3657);
				match(EQUAL_SYMBOL);
				setState(3658);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterOptRealContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3660);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(3661);
				match(EQUAL_SYMBOL);
				setState(3662);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterOptIdListContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3663);
				match(IGNORE_SERVER_IDS);
				setState(3664);
				match(EQUAL_SYMBOL);
				setState(3665);
				match(LR_BRACKET);
				setState(3674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
					{
					setState(3666);
					id_();
					setState(3671);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3667);
						match(COMMA);
						setState(3668);
						id_();
						}
						}
						setState(3673);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3676);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_master_optionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(MySqlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public String_master_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_master_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterString_master_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitString_master_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitString_master_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_master_optionContext string_master_option() throws RecognitionException {
		String_master_optionContext _localctx = new String_master_optionContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_string_master_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3679);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (MASTER_HOST - 375)) | (1L << (MASTER_LOG_FILE - 375)) | (1L << (MASTER_PASSWORD - 375)) | (1L << (MASTER_SSL_CA - 375)) | (1L << (MASTER_SSL_CAPATH - 375)) | (1L << (MASTER_SSL_CERT - 375)) | (1L << (MASTER_SSL_CIPHER - 375)) | (1L << (MASTER_SSL_CRL - 375)) | (1L << (MASTER_SSL_CRLPATH - 375)) | (1L << (MASTER_SSL_KEY - 375)) | (1L << (MASTER_TLS_VERSION - 375)) | (1L << (MASTER_USER - 375)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decimal_master_optionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public Decimal_master_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimal_master_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimal_master_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimal_master_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimal_master_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decimal_master_optionContext decimal_master_option() throws RecognitionException {
		Decimal_master_optionContext _localctx = new Decimal_master_optionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_decimal_master_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3681);
			_la = _input.LA(1);
			if ( !(((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_master_optionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public Bool_master_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_master_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBool_master_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBool_master_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBool_master_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_master_optionContext bool_master_option() throws RecognitionException {
		Bool_master_optionContext _localctx = new Bool_master_optionContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_bool_master_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3683);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Channel_optionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Channel_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channel_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannel_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannel_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChannel_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Channel_optionContext channel_option() throws RecognitionException {
		Channel_optionContext _localctx = new Channel_optionContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_channel_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3685);
			match(FOR);
			setState(3686);
			match(CHANNEL);
			setState(3687);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Repl_filterContext extends ParserRuleContext {
		public Repl_filterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repl_filter; }
	 
		public Repl_filterContext() { }
		public void copyFrom(Repl_filterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ReplfilterDbListContext extends Repl_filterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public ReplfilterDbListContext(Repl_filterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplfilterDbList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplfilterDbList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplfilterDbList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReplfilterStableListContext extends Repl_filterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public Simple_string_listContext simple_string_list() {
			return getRuleContext(Simple_string_listContext.class,0);
		}
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public ReplfilterStableListContext(Repl_filterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplfilterStableList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplfilterStableList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplfilterStableList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReplfilterTablepairListContext extends Repl_filterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public Table_pair_listContext table_pair_list() {
			return getRuleContext(Table_pair_listContext.class,0);
		}
		public ReplfilterTablepairListContext(Repl_filterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplfilterTablepairList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplfilterTablepairList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplfilterTablepairList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReplfilterTableListContext extends Repl_filterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public ReplfilterTableListContext(Repl_filterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplfilterTableList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplfilterTableList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplfilterTableList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Repl_filterContext repl_filter() throws RecognitionException {
		Repl_filterContext _localctx = new Repl_filterContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_repl_filter);
		try {
			setState(3731);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new ReplfilterDbListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3689);
				match(REPLICATE_DO_DB);
				setState(3690);
				match(EQUAL_SYMBOL);
				setState(3691);
				match(LR_BRACKET);
				setState(3692);
				id_list();
				setState(3693);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new ReplfilterDbListContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3695);
				match(REPLICATE_IGNORE_DB);
				setState(3696);
				match(EQUAL_SYMBOL);
				setState(3697);
				match(LR_BRACKET);
				setState(3698);
				id_list();
				setState(3699);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new ReplfilterTableListContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3701);
				match(REPLICATE_DO_TABLE);
				setState(3702);
				match(EQUAL_SYMBOL);
				setState(3703);
				match(LR_BRACKET);
				setState(3704);
				table_list();
				setState(3705);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new ReplfilterTableListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3707);
				match(REPLICATE_IGNORE_TABLE);
				setState(3708);
				match(EQUAL_SYMBOL);
				setState(3709);
				match(LR_BRACKET);
				setState(3710);
				table_list();
				setState(3711);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new ReplfilterStableListContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3713);
				match(REPLICATE_WILD_DO_TABLE);
				setState(3714);
				match(EQUAL_SYMBOL);
				setState(3715);
				match(LR_BRACKET);
				setState(3716);
				simple_string_list();
				setState(3717);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new ReplfilterStableListContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3719);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(3720);
				match(EQUAL_SYMBOL);
				setState(3721);
				match(LR_BRACKET);
				setState(3722);
				simple_string_list();
				setState(3723);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new ReplfilterTablepairListContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3725);
				match(REPLICATE_REWRITE_DB);
				setState(3726);
				match(EQUAL_SYMBOL);
				setState(3727);
				match(LR_BRACKET);
				setState(3728);
				table_pair_list();
				setState(3729);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Thread_typeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public Thread_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thread_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterThread_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitThread_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitThread_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Thread_typeContext thread_type() throws RecognitionException {
		Thread_typeContext _localctx = new Thread_typeContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_thread_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3733);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_optionContext extends ParserRuleContext {
		public Until_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_option; }
	 
		public Until_optionContext() { }
		public void copyFrom(Until_optionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UntilSqlGapsContext extends Until_optionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public UntilSqlGapsContext(Until_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUntilSqlGaps(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUntilSqlGaps(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUntilSqlGaps(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UntilGtidSsetContext extends Until_optionContext {
		public Gtid_setContext gtid_set() {
			return getRuleContext(Gtid_setContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public UntilGtidSsetContext(Until_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUntilGtidSset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUntilGtidSset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUntilGtidSset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UntilRelayLogContext extends Until_optionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public UntilRelayLogContext(Until_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUntilRelayLog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUntilRelayLog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUntilRelayLog(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UntilMasterLogContext extends Until_optionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public UntilMasterLogContext(Until_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUntilMasterLog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUntilMasterLog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUntilMasterLog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Until_optionContext until_option() throws RecognitionException {
		Until_optionContext _localctx = new Until_optionContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_until_option);
		int _la;
		try {
			setState(3753);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new UntilGtidSsetContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3735);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3736);
				match(EQUAL_SYMBOL);
				setState(3737);
				gtid_set();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new UntilMasterLogContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3738);
				match(MASTER_LOG_FILE);
				setState(3739);
				match(EQUAL_SYMBOL);
				setState(3740);
				match(STRING_LITERAL);
				setState(3741);
				match(COMMA);
				setState(3742);
				match(MASTER_LOG_POS);
				setState(3743);
				match(EQUAL_SYMBOL);
				setState(3744);
				decimal_literal();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new UntilRelayLogContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3745);
				match(RELAY_LOG_FILE);
				setState(3746);
				match(EQUAL_SYMBOL);
				setState(3747);
				match(STRING_LITERAL);
				setState(3748);
				match(COMMA);
				setState(3749);
				match(RELAY_LOG_POS);
				setState(3750);
				match(EQUAL_SYMBOL);
				setState(3751);
				decimal_literal();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new UntilSqlGapsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3752);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_slave_connection_optionContext extends ParserRuleContext {
		public Token con_opt_user;
		public Token con_opt_password;
		public Token con_opt_def_auth;
		public Token con_opt_plugin_dir;
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public Start_slave_connection_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_slave_connection_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStart_slave_connection_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStart_slave_connection_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStart_slave_connection_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_slave_connection_optionContext start_slave_connection_option() throws RecognitionException {
		Start_slave_connection_optionContext _localctx = new Start_slave_connection_optionContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_start_slave_connection_option);
		try {
			setState(3767);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3755);
				match(USER);
				setState(3756);
				match(EQUAL_SYMBOL);
				setState(3757);
				((Start_slave_connection_optionContext)_localctx).con_opt_user = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3758);
				match(PASSWORD);
				setState(3759);
				match(EQUAL_SYMBOL);
				setState(3760);
				((Start_slave_connection_optionContext)_localctx).con_opt_password = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(3761);
				match(DEFAULT_AUTH);
				setState(3762);
				match(EQUAL_SYMBOL);
				setState(3763);
				((Start_slave_connection_optionContext)_localctx).con_opt_def_auth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				enterOuterAlt(_localctx, 4);
				{
				setState(3764);
				match(PLUGIN_DIR);
				setState(3765);
				match(EQUAL_SYMBOL);
				setState(3766);
				((Start_slave_connection_optionContext)_localctx).con_opt_plugin_dir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Gtid_setContext extends ParserRuleContext {
		public List<Uuid_setContext> uuid_set() {
			return getRuleContexts(Uuid_setContext.class);
		}
		public Uuid_setContext uuid_set(int i) {
			return getRuleContext(Uuid_setContext.class,i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Gtid_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtid_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtid_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtid_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGtid_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Gtid_setContext gtid_set() throws RecognitionException {
		Gtid_setContext _localctx = new Gtid_setContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_gtid_set);
		int _la;
		try {
			setState(3778);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3769);
				uuid_set();
				setState(3774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3770);
					match(COMMA);
					setState(3771);
					uuid_set();
					}
					}
					setState(3776);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3777);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_start_transactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public Xa_start_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_start_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXa_start_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXa_start_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXa_start_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xa_start_transactionContext xa_start_transaction() throws RecognitionException {
		Xa_start_transactionContext _localctx = new Xa_start_transactionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_xa_start_transaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3780);
			match(XA);
			setState(3781);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3782);
			xid();
			setState(3784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(3783);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_end_transactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public Xa_end_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_end_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXa_end_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXa_end_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXa_end_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xa_end_transactionContext xa_end_transaction() throws RecognitionException {
		Xa_end_transactionContext _localctx = new Xa_end_transactionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_xa_end_transaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3786);
			match(XA);
			setState(3787);
			match(END);
			setState(3788);
			xid();
			setState(3794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(3789);
				match(SUSPEND);
				setState(3792);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3790);
					match(FOR);
					setState(3791);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_prepareContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public Xa_prepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_prepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXa_prepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXa_prepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXa_prepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xa_prepareContext xa_prepare() throws RecognitionException {
		Xa_prepareContext _localctx = new Xa_prepareContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_xa_prepare);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3796);
			match(XA);
			setState(3797);
			match(PREPARE);
			setState(3798);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_commit_workContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public Xa_commit_workContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_commit_work; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXa_commit_work(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXa_commit_work(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXa_commit_work(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xa_commit_workContext xa_commit_work() throws RecognitionException {
		Xa_commit_workContext _localctx = new Xa_commit_workContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_xa_commit_work);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			match(XA);
			setState(3801);
			match(COMMIT);
			setState(3802);
			xid();
			setState(3805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(3803);
				match(ONE);
				setState(3804);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_rollback_workContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public Xa_rollback_workContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_rollback_work; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXa_rollback_work(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXa_rollback_work(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXa_rollback_work(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xa_rollback_workContext xa_rollback_work() throws RecognitionException {
		Xa_rollback_workContext _localctx = new Xa_rollback_workContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_xa_rollback_work);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3807);
			match(XA);
			setState(3808);
			match(ROLLBACK);
			setState(3809);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_recover_workContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public Xa_recover_workContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_recover_work; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXa_recover_work(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXa_recover_work(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXa_recover_work(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xa_recover_workContext xa_recover_work() throws RecognitionException {
		Xa_recover_workContext _localctx = new Xa_recover_workContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_xa_recover_work);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3811);
			match(XA);
			setState(3812);
			match(RECOVER);
			setState(3815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(3813);
				match(CONVERT);
				setState(3814);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepare_statementContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public Prepare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrepare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrepare_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrepare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepare_statementContext prepare_statement() throws RecognitionException {
		Prepare_statementContext _localctx = new Prepare_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_prepare_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3817);
			match(PREPARE);
			setState(3818);
			id_();
			setState(3819);
			match(FROM);
			setState(3820);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==LOCAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public User_var_listContext user_var_list() {
			return getRuleContext(User_var_listContext.class,0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExecute_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExecute_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_execute_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3822);
			match(EXECUTE);
			setState(3823);
			id_();
			setState(3826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3824);
				match(USING);
				setState(3825);
				user_var_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deallocate_prepareContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public Deallocate_prepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_prepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeallocate_prepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeallocate_prepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeallocate_prepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deallocate_prepareContext deallocate_prepare() throws RecognitionException {
		Deallocate_prepareContext _localctx = new Deallocate_prepareContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_deallocate_prepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3828);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3829);
			match(PREPARE);
			setState(3830);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_bodyContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Routine_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutine_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutine_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutine_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_bodyContext routine_body() throws RecognitionException {
		Routine_bodyContext _localctx = new Routine_bodyContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_routine_body);
		try {
			setState(3834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3832);
				block_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3833);
				sql_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<Declare_variableContext> declare_variable() {
			return getRuleContexts(Declare_variableContext.class);
		}
		public Declare_variableContext declare_variable(int i) {
			return getRuleContext(Declare_variableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<Declare_conditionContext> declare_condition() {
			return getRuleContexts(Declare_conditionContext.class);
		}
		public Declare_conditionContext declare_condition(int i) {
			return getRuleContext(Declare_conditionContext.class,i);
		}
		public List<Declare_cursorContext> declare_cursor() {
			return getRuleContexts(Declare_cursorContext.class);
		}
		public Declare_cursorContext declare_cursor(int i) {
			return getRuleContext(Declare_cursorContext.class,i);
		}
		public List<Declare_handlerContext> declare_handler() {
			return getRuleContexts(Declare_handlerContext.class);
		}
		public Declare_handlerContext declare_handler(int i) {
			return getRuleContext(Declare_handlerContext.class,i);
		}
		public List<Procedure_sql_statementContext> procedure_sql_statement() {
			return getRuleContexts(Procedure_sql_statementContext.class);
		}
		public Procedure_sql_statementContext procedure_sql_statement(int i) {
			return getRuleContext(Procedure_sql_statementContext.class,i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBlock_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBlock_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBlock_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Block_statementContext block_statement() throws RecognitionException {
		Block_statementContext _localctx = new Block_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_block_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				{
				setState(3836);
				id_();
				setState(3837);
				match(COLON_SYMB);
				}
				break;
			}
			setState(3841);
			match(BEGIN);
			setState(3879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DECLARE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0)) {
				{
				setState(3847);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,561,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3842);
						declare_variable();
						setState(3843);
						match(SEMI);
						}
						} 
					}
					setState(3849);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,561,_ctx);
				}
				setState(3855);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3850);
						declare_condition();
						setState(3851);
						match(SEMI);
						}
						} 
					}
					setState(3857);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
				}
				setState(3863);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,563,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3858);
						declare_cursor();
						setState(3859);
						match(SEMI);
						}
						} 
					}
					setState(3865);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,563,_ctx);
				}
				setState(3871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(3866);
					declare_handler();
					setState(3867);
					match(SEMI);
					}
					}
					setState(3873);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3875); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3874);
					procedure_sql_statement();
					}
					}
					setState(3877); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0) );
				}
			}

			setState(3881);
			match(END);
			setState(3883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(3882);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(MySqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(MySqlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(MySqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(MySqlParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(MySqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(MySqlParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<Procedure_sql_statementContext> procedure_sql_statement() {
			return getRuleContexts(Procedure_sql_statementContext.class);
		}
		public Procedure_sql_statementContext procedure_sql_statement(int i) {
			return getRuleContext(Procedure_sql_statementContext.class,i);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3885);
			match(CASE);
			setState(3888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				{
				setState(3886);
				id_();
				}
				break;
			case 2:
				{
				setState(3887);
				expression(0);
				}
				break;
			}
			setState(3901); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3890);
				match(WHEN);
				setState(3893);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
				case 1:
					{
					setState(3891);
					constant();
					}
					break;
				case 2:
					{
					setState(3892);
					expression(0);
					}
					break;
				}
				setState(3895);
				match(THEN);
				setState(3897); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3896);
					procedure_sql_statement();
					}
					}
					setState(3899); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0) );
				}
				}
				setState(3903); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3905);
				match(ELSE);
				setState(3907); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3906);
					procedure_sql_statement();
					}
					}
					setState(3909); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0) );
				}
			}

			setState(3913);
			match(END);
			setState(3914);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(MySqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(MySqlParser.IF, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(MySqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(MySqlParser.THEN, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<Procedure_sql_statementContext> procedure_sql_statement() {
			return getRuleContexts(Procedure_sql_statementContext.class);
		}
		public Procedure_sql_statementContext procedure_sql_statement(int i) {
			return getRuleContext(Procedure_sql_statementContext.class,i);
		}
		public List<TerminalNode> ELSEIF() { return getTokens(MySqlParser.ELSEIF); }
		public TerminalNode ELSEIF(int i) {
			return getToken(MySqlParser.ELSEIF, i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3916);
			match(IF);
			setState(3917);
			expression(0);
			setState(3918);
			match(THEN);
			setState(3920); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3919);
				procedure_sql_statement();
				}
				}
				setState(3922); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0) );
			setState(3934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(3924);
				match(ELSEIF);
				setState(3925);
				expression(0);
				setState(3926);
				match(THEN);
				setState(3928); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3927);
					procedure_sql_statement();
					}
					}
					setState(3930); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0) );
				}
				}
				setState(3936);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3937);
				match(ELSE);
				setState(3939); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3938);
					procedure_sql_statement();
					}
					}
					setState(3941); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0) );
				}
			}

			setState(3945);
			match(END);
			setState(3946);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Iterate_statementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(MySqlParser.ITERATE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Iterate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterate_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIterate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIterate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIterate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iterate_statementContext iterate_statement() throws RecognitionException {
		Iterate_statementContext _localctx = new Iterate_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_iterate_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3948);
			match(ITERATE);
			setState(3949);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Leave_statementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(MySqlParser.LEAVE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Leave_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leave_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLeave_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLeave_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLeave_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Leave_statementContext leave_statement() throws RecognitionException {
		Leave_statementContext _localctx = new Leave_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_leave_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3951);
			match(LEAVE);
			setState(3952);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(MySqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(MySqlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<Procedure_sql_statementContext> procedure_sql_statement() {
			return getRuleContexts(Procedure_sql_statementContext.class);
		}
		public Procedure_sql_statementContext procedure_sql_statement(int i) {
			return getRuleContext(Procedure_sql_statementContext.class,i);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(3954);
				id_();
				setState(3955);
				match(COLON_SYMB);
				}
			}

			setState(3959);
			match(LOOP);
			setState(3961); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3960);
				procedure_sql_statement();
				}
				}
				setState(3963); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0) );
			setState(3965);
			match(END);
			setState(3966);
			match(LOOP);
			setState(3968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(3967);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Repeat_statementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(MySqlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(MySqlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<Procedure_sql_statementContext> procedure_sql_statement() {
			return getRuleContexts(Procedure_sql_statementContext.class);
		}
		public Procedure_sql_statementContext procedure_sql_statement(int i) {
			return getRuleContext(Procedure_sql_statementContext.class,i);
		}
		public Repeat_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeat_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepeat_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepeat_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRepeat_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Repeat_statementContext repeat_statement() throws RecognitionException {
		Repeat_statementContext _localctx = new Repeat_statementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_repeat_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(3970);
				id_();
				setState(3971);
				match(COLON_SYMB);
				}
			}

			setState(3975);
			match(REPEAT);
			setState(3977); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3976);
				procedure_sql_statement();
				}
				}
				setState(3979); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0) );
			setState(3981);
			match(UNTIL);
			setState(3982);
			expression(0);
			setState(3983);
			match(END);
			setState(3984);
			match(REPEAT);
			setState(3986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(3985);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MySqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_return_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3988);
			match(RETURN);
			setState(3989);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(MySqlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(MySqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<Procedure_sql_statementContext> procedure_sql_statement() {
			return getRuleContexts(Procedure_sql_statementContext.class);
		}
		public Procedure_sql_statementContext procedure_sql_statement(int i) {
			return getRuleContext(Procedure_sql_statementContext.class,i);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWhile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWhile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_while_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(3991);
				id_();
				setState(3992);
				match(COLON_SYMB);
				}
			}

			setState(3996);
			match(WHILE);
			setState(3997);
			expression(0);
			setState(3998);
			match(DO);
			setState(4000); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3999);
				procedure_sql_statement();
				}
				}
				setState(4002); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (UNLOCK - 156)) | (1L << (UPDATE - 156)) | (1L << (USE - 156)) | (1L << (WHILE - 156)) | (1L << (DATE - 156)) | (1L << (TIME - 156)) | (1L << (TIMESTAMP - 156)) | (1L << (DATETIME - 156)) | (1L << (YEAR - 156)) | (1L << (TEXT - 156)) | (1L << (ENUM - 156)) | (1L << (COUNT - 156)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (POSITION - 237)) | (1L << (ACTION - 237)) | (1L << (AFTER - 237)) | (1L << (ALGORITHM - 237)) | (1L << (ANY - 237)) | (1L << (AT - 237)) | (1L << (AUTHORS - 237)) | (1L << (AUTOCOMMIT - 237)) | (1L << (AUTOEXTEND_SIZE - 237)) | (1L << (AUTO_INCREMENT - 237)) | (1L << (AVG_ROW_LENGTH - 237)) | (1L << (BEGIN - 237)) | (1L << (BINLOG - 237)) | (1L << (BIT - 237)) | (1L << (BTREE - 237)) | (1L << (CACHE - 237)) | (1L << (CASCADED - 237)) | (1L << (CHAIN - 237)) | (1L << (CHECKSUM - 237)) | (1L << (CIPHER - 237)) | (1L << (CLIENT - 237)) | (1L << (CLOSE - 237)) | (1L << (COALESCE - 237)) | (1L << (CODE - 237)) | (1L << (COLUMNS - 237)) | (1L << (COLUMN_FORMAT - 237)) | (1L << (COMMENT - 237)) | (1L << (COMMIT - 237)) | (1L << (COMPACT - 237)) | (1L << (COMPLETION - 237)) | (1L << (COMPRESSED - 237)) | (1L << (CONCURRENT - 237)) | (1L << (CONNECTION - 237)) | (1L << (CONSISTENT - 237)) | (1L << (CONTAINS - 237)) | (1L << (CONTRIBUTORS - 237)) | (1L << (COPY - 237)) | (1L << (DATA - 237)) | (1L << (DATAFILE - 237)) | (1L << (DEALLOCATE - 237)) | (1L << (DEFINER - 237)) | (1L << (DELAY_KEY_WRITE - 237)) | (1L << (DIRECTORY - 237)) | (1L << (DISABLE - 237)) | (1L << (DISCARD - 237)) | (1L << (DISK - 237)) | (1L << (DO - 237)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (DUMPFILE - 301)) | (1L << (DUPLICATE - 301)) | (1L << (DYNAMIC - 301)) | (1L << (ENABLE - 301)) | (1L << (ENDS - 301)) | (1L << (ENGINE - 301)) | (1L << (ENGINES - 301)) | (1L << (ERRORS - 301)) | (1L << (ESCAPE - 301)) | (1L << (EVEN - 301)) | (1L << (EVENT - 301)) | (1L << (EVENTS - 301)) | (1L << (EVERY - 301)) | (1L << (EXCHANGE - 301)) | (1L << (EXCLUSIVE - 301)) | (1L << (EXPIRE - 301)) | (1L << (EXTENT_SIZE - 301)) | (1L << (FIELDS - 301)) | (1L << (FIRST - 301)) | (1L << (FIXED - 301)) | (1L << (FLUSH - 301)) | (1L << (FULL - 301)) | (1L << (FUNCTION - 301)) | (1L << (GLOBAL - 301)) | (1L << (GRANTS - 301)) | (1L << (HANDLER - 301)) | (1L << (HASH - 301)) | (1L << (HELP - 301)) | (1L << (HOST - 301)) | (1L << (IDENTIFIED - 301)) | (1L << (IMPORT - 301)) | (1L << (INITIAL_SIZE - 301)) | (1L << (INPLACE - 301)) | (1L << (INSERT_METHOD - 301)) | (1L << (INSTALL - 301)) | (1L << (INVOKER - 301)) | (1L << (ISOLATION - 301)) | (1L << (ISSUER - 301)) | (1L << (KEY_BLOCK_SIZE - 301)) | (1L << (LANGUAGE - 301)) | (1L << (LAST - 301)) | (1L << (LESS - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (LEVEL - 365)) | (1L << (LIST - 365)) | (1L << (LOCAL - 365)) | (1L << (LOGFILE - 365)) | (1L << (LOGS - 365)) | (1L << (MASTER - 365)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 365)) | (1L << (MAX_QUERIES_PER_HOUR - 365)) | (1L << (MAX_ROWS - 365)) | (1L << (MAX_SIZE - 365)) | (1L << (MAX_UPDATES_PER_HOUR - 365)) | (1L << (MAX_USER_CONNECTIONS - 365)) | (1L << (MERGE - 365)) | (1L << (MID - 365)) | (1L << (MIN_ROWS - 365)) | (1L << (MODIFY - 365)) | (1L << (MUTEX - 365)) | (1L << (MYSQL - 365)) | (1L << (NAME - 365)) | (1L << (NAMES - 365)) | (1L << (NCHAR - 365)) | (1L << (NO - 365)) | (1L << (NODEGROUP - 365)) | (1L << (NONE - 365)) | (1L << (OFFLINE - 365)) | (1L << (OFFSET - 365)) | (1L << (OJ - 365)) | (1L << (OLD_PASSWORD - 365)) | (1L << (ONLINE - 365)) | (1L << (ONLY - 365)) | (1L << (OPEN - 365)) | (1L << (OPTIONS - 365)) | (1L << (OWNER - 365)) | (1L << (PACK_KEYS - 365)) | (1L << (PARSER - 365)) | (1L << (PARTIAL - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PARTITIONING - 429)) | (1L << (PARTITIONS - 429)) | (1L << (PASSWORD - 429)) | (1L << (PLUGINS - 429)) | (1L << (PORT - 429)) | (1L << (PREPARE - 429)) | (1L << (PRESERVE - 429)) | (1L << (PROCESSLIST - 429)) | (1L << (PROFILE - 429)) | (1L << (PROFILES - 429)) | (1L << (PROXY - 429)) | (1L << (QUERY - 429)) | (1L << (QUICK - 429)) | (1L << (REBUILD - 429)) | (1L << (REDO_BUFFER_SIZE - 429)) | (1L << (REDUNDANT - 429)) | (1L << (RELAYLOG - 429)) | (1L << (REMOVE - 429)) | (1L << (REORGANIZE - 429)) | (1L << (REPAIR - 429)) | (1L << (REPLICATION - 429)) | (1L << (RESET - 429)) | (1L << (RETURNS - 429)) | (1L << (ROLLBACK - 429)) | (1L << (ROLLUP - 429)) | (1L << (ROW - 429)) | (1L << (ROWS - 429)) | (1L << (ROW_FORMAT - 429)) | (1L << (SAVEPOINT - 429)) | (1L << (SCHEDULE - 429)) | (1L << (SECURITY - 429)) | (1L << (SERVER - 429)) | (1L << (SESSION - 429)) | (1L << (SHARE - 429)) | (1L << (SHARED - 429)) | (1L << (SIGNED - 429)) | (1L << (SIMPLE - 429)) | (1L << (SLAVE - 429)) | (1L << (SNAPSHOT - 429)) | (1L << (SOCKET - 429)) | (1L << (SOME - 429)) | (1L << (SOUNDS - 429)))) != 0) || ((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (SQL_BUFFER_RESULT - 495)) | (1L << (SQL_CACHE - 495)) | (1L << (SQL_NO_CACHE - 495)) | (1L << (START - 495)) | (1L << (STARTS - 495)) | (1L << (STATS_AUTO_RECALC - 495)) | (1L << (STATS_PERSISTENT - 495)) | (1L << (STATS_SAMPLE_PAGES - 495)) | (1L << (STATUS - 495)) | (1L << (STOP - 495)) | (1L << (STORAGE - 495)) | (1L << (SUBJECT - 495)) | (1L << (SUBPARTITION - 495)) | (1L << (SUBPARTITIONS - 495)) | (1L << (TABLESPACE - 495)) | (1L << (TEMPORARY - 495)) | (1L << (TEMPTABLE - 495)) | (1L << (THAN - 495)) | (1L << (TRANSACTION - 495)) | (1L << (TRUNCATE - 495)) | (1L << (UNDEFINED - 495)) | (1L << (UNDOFILE - 495)) | (1L << (UNDO_BUFFER_SIZE - 495)) | (1L << (UNINSTALL - 495)) | (1L << (UNKNOWN - 495)) | (1L << (UPGRADE - 495)) | (1L << (USER - 495)) | (1L << (VALUE - 495)) | (1L << (VARIABLES - 495)) | (1L << (VIEW - 495)) | (1L << (WAIT - 495)) | (1L << (WARNINGS - 495)) | (1L << (WORK - 495)) | (1L << (WRAPPER - 495)) | (1L << (X509 - 495)) | (1L << (XA - 495)) | (1L << (XML - 495)) | (1L << (QUARTER - 495)) | (1L << (MONTH - 495)) | (1L << (DAY - 495)) | (1L << (HOUR - 495)) | (1L << (MINUTE - 495)) | (1L << (WEEK - 495)) | (1L << (SECOND - 495)) | (1L << (MICROSECOND - 495)) | (1L << (TABLES - 495)) | (1L << (ROUTINE - 495)))) != 0) || ((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & ((1L << (EXECUTE - 559)) | (1L << (FILE - 559)) | (1L << (PROCESS - 559)) | (1L << (RELOAD - 559)) | (1L << (SHUTDOWN - 559)) | (1L << (SUPER - 559)) | (1L << (PRIVILEGES - 559)) | (1L << (ARMSCII8 - 559)) | (1L << (ASCII - 559)) | (1L << (BIG5 - 559)) | (1L << (CP1250 - 559)) | (1L << (CP1251 - 559)) | (1L << (CP1256 - 559)) | (1L << (CP1257 - 559)) | (1L << (CP850 - 559)) | (1L << (CP852 - 559)) | (1L << (CP866 - 559)) | (1L << (CP932 - 559)) | (1L << (DEC8 - 559)) | (1L << (EUCJPMS - 559)) | (1L << (EUCKR - 559)) | (1L << (GB2312 - 559)) | (1L << (GBK - 559)) | (1L << (GEOSTD8 - 559)) | (1L << (GREEK - 559)) | (1L << (HEBREW - 559)) | (1L << (HP8 - 559)) | (1L << (KEYBCS2 - 559)) | (1L << (KOI8R - 559)) | (1L << (KOI8U - 559)) | (1L << (LATIN1 - 559)) | (1L << (LATIN2 - 559)) | (1L << (LATIN5 - 559)) | (1L << (LATIN7 - 559)) | (1L << (MACCE - 559)) | (1L << (MACROMAN - 559)) | (1L << (SJIS - 559)) | (1L << (SWE7 - 559)) | (1L << (TIS620 - 559)) | (1L << (UCS2 - 559)) | (1L << (UJIS - 559)) | (1L << (UTF16 - 559)) | (1L << (UTF16LE - 559)) | (1L << (UTF32 - 559)) | (1L << (UTF8 - 559)) | (1L << (UTF8MB3 - 559)) | (1L << (UTF8MB4 - 559)) | (1L << (ARCHIVE - 559)) | (1L << (BLACKHOLE - 559)) | (1L << (CSV - 559)) | (1L << (FEDERATED - 559)) | (1L << (INNODB - 559)) | (1L << (MEMORY - 559)) | (1L << (MRG_MYISAM - 559)) | (1L << (MYISAM - 559)) | (1L << (NDB - 559)) | (1L << (NDBCLUSTER - 559)) | (1L << (PERFOMANCE_SCHEMA - 559)) | (1L << (REPEATABLE - 559)) | (1L << (COMMITTED - 559)) | (1L << (UNCOMMITTED - 559)) | (1L << (SERIALIZABLE - 559)) | (1L << (GEOMETRYCOLLECTION - 559)) | (1L << (LINESTRING - 559)))) != 0) || ((((_la - 623)) & ~0x3f) == 0 && ((1L << (_la - 623)) & ((1L << (MULTILINESTRING - 623)) | (1L << (MULTIPOINT - 623)) | (1L << (MULTIPOLYGON - 623)) | (1L << (POINT - 623)) | (1L << (POLYGON - 623)) | (1L << (ABS - 623)) | (1L << (ACOS - 623)) | (1L << (ADDDATE - 623)) | (1L << (ADDTIME - 623)) | (1L << (AES_DECRYPT - 623)) | (1L << (AES_ENCRYPT - 623)) | (1L << (AREA - 623)) | (1L << (ASBINARY - 623)) | (1L << (ASIN - 623)) | (1L << (ASTEXT - 623)) | (1L << (ASWKB - 623)) | (1L << (ASWKT - 623)) | (1L << (ASYMMETRIC_DECRYPT - 623)) | (1L << (ASYMMETRIC_DERIVE - 623)) | (1L << (ASYMMETRIC_ENCRYPT - 623)) | (1L << (ASYMMETRIC_SIGN - 623)) | (1L << (ASYMMETRIC_VERIFY - 623)) | (1L << (ATAN - 623)) | (1L << (ATAN2 - 623)) | (1L << (BENCHMARK - 623)) | (1L << (BIN - 623)) | (1L << (BIT_COUNT - 623)) | (1L << (BIT_LENGTH - 623)) | (1L << (BUFFER - 623)) | (1L << (CEIL - 623)) | (1L << (CEILING - 623)) | (1L << (CENTROID - 623)) | (1L << (CHARACTER_LENGTH - 623)) | (1L << (CHARSET - 623)) | (1L << (CHAR_LENGTH - 623)) | (1L << (COERCIBILITY - 623)) | (1L << (COLLATION - 623)) | (1L << (COMPRESS - 623)) | (1L << (CONCAT - 623)) | (1L << (CONCAT_WS - 623)) | (1L << (CONNECTION_ID - 623)) | (1L << (CONV - 623)) | (1L << (CONVERT_TZ - 623)) | (1L << (COS - 623)) | (1L << (COT - 623)) | (1L << (CRC32 - 623)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 623)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 623)) | (1L << (CREATE_DH_PARAMETERS - 623)) | (1L << (CREATE_DIGEST - 623)) | (1L << (CROSSES - 623)) | (1L << (DATEDIFF - 623)) | (1L << (DATE_FORMAT - 623)) | (1L << (DAYNAME - 623)) | (1L << (DAYOFMONTH - 623)) | (1L << (DAYOFWEEK - 623)) | (1L << (DAYOFYEAR - 623)) | (1L << (DECODE - 623)) | (1L << (DEGREES - 623)) | (1L << (DES_DECRYPT - 623)) | (1L << (DES_ENCRYPT - 623)) | (1L << (DIMENSION - 623)) | (1L << (DISJOINT - 623)) | (1L << (ELT - 623)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ENCODE - 687)) | (1L << (ENCRYPT - 687)) | (1L << (ENDPOINT - 687)) | (1L << (ENVELOPE - 687)) | (1L << (EQUALS - 687)) | (1L << (EXP - 687)) | (1L << (EXPORT_SET - 687)) | (1L << (EXTERIORRING - 687)) | (1L << (EXTRACTVALUE - 687)) | (1L << (FIELD - 687)) | (1L << (FIND_IN_SET - 687)) | (1L << (FLOOR - 687)) | (1L << (FORMAT - 687)) | (1L << (FOUND_ROWS - 687)) | (1L << (FROM_BASE64 - 687)) | (1L << (FROM_DAYS - 687)) | (1L << (FROM_UNIXTIME - 687)) | (1L << (GEOMCOLLFROMTEXT - 687)) | (1L << (GEOMCOLLFROMWKB - 687)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 687)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 687)) | (1L << (GEOMETRYFROMTEXT - 687)) | (1L << (GEOMETRYFROMWKB - 687)) | (1L << (GEOMETRYN - 687)) | (1L << (GEOMETRYTYPE - 687)) | (1L << (GEOMFROMTEXT - 687)) | (1L << (GEOMFROMWKB - 687)) | (1L << (GET_FORMAT - 687)) | (1L << (GET_LOCK - 687)) | (1L << (GLENGTH - 687)) | (1L << (GREATEST - 687)) | (1L << (GTID_SUBSET - 687)) | (1L << (GTID_SUBTRACT - 687)) | (1L << (HEX - 687)) | (1L << (IFNULL - 687)) | (1L << (INET6_ATON - 687)) | (1L << (INET6_NTOA - 687)) | (1L << (INET_ATON - 687)) | (1L << (INET_NTOA - 687)) | (1L << (INSTR - 687)) | (1L << (INTERIORRINGN - 687)) | (1L << (INTERSECTS - 687)) | (1L << (ISCLOSED - 687)) | (1L << (ISEMPTY - 687)) | (1L << (ISNULL - 687)) | (1L << (ISSIMPLE - 687)) | (1L << (IS_FREE_LOCK - 687)) | (1L << (IS_IPV4 - 687)) | (1L << (IS_IPV4_COMPAT - 687)) | (1L << (IS_IPV4_MAPPED - 687)) | (1L << (IS_IPV6 - 687)) | (1L << (IS_USED_LOCK - 687)) | (1L << (LAST_INSERT_ID - 687)) | (1L << (LCASE - 687)) | (1L << (LEAST - 687)) | (1L << (LENGTH - 687)) | (1L << (LINEFROMTEXT - 687)) | (1L << (LINEFROMWKB - 687)) | (1L << (LINESTRINGFROMTEXT - 687)) | (1L << (LINESTRINGFROMWKB - 687)) | (1L << (LN - 687)) | (1L << (LOAD_FILE - 687)) | (1L << (LOCATE - 687)) | (1L << (LOG - 687)))) != 0) || ((((_la - 751)) & ~0x3f) == 0 && ((1L << (_la - 751)) & ((1L << (LOG10 - 751)) | (1L << (LOG2 - 751)) | (1L << (LOWER - 751)) | (1L << (LPAD - 751)) | (1L << (LTRIM - 751)) | (1L << (MAKEDATE - 751)) | (1L << (MAKETIME - 751)) | (1L << (MAKE_SET - 751)) | (1L << (MASTER_POS_WAIT - 751)) | (1L << (MBRCONTAINS - 751)) | (1L << (MBRDISJOINT - 751)) | (1L << (MBREQUAL - 751)) | (1L << (MBRINTERSECTS - 751)) | (1L << (MBROVERLAPS - 751)) | (1L << (MBRTOUCHES - 751)) | (1L << (MBRWITHIN - 751)) | (1L << (MD5 - 751)) | (1L << (MLINEFROMTEXT - 751)) | (1L << (MLINEFROMWKB - 751)) | (1L << (MONTHNAME - 751)) | (1L << (MPOINTFROMTEXT - 751)) | (1L << (MPOINTFROMWKB - 751)) | (1L << (MPOLYFROMTEXT - 751)) | (1L << (MPOLYFROMWKB - 751)) | (1L << (MULTILINESTRINGFROMTEXT - 751)) | (1L << (MULTILINESTRINGFROMWKB - 751)) | (1L << (MULTIPOINTFROMTEXT - 751)) | (1L << (MULTIPOINTFROMWKB - 751)) | (1L << (MULTIPOLYGONFROMTEXT - 751)) | (1L << (MULTIPOLYGONFROMWKB - 751)) | (1L << (NAME_CONST - 751)) | (1L << (NULLIF - 751)) | (1L << (NUMGEOMETRIES - 751)) | (1L << (NUMINTERIORRINGS - 751)) | (1L << (NUMPOINTS - 751)) | (1L << (OCT - 751)) | (1L << (OCTET_LENGTH - 751)) | (1L << (ORD - 751)) | (1L << (OVERLAPS - 751)) | (1L << (PERIOD_ADD - 751)) | (1L << (PERIOD_DIFF - 751)) | (1L << (PI - 751)) | (1L << (POINTFROMTEXT - 751)) | (1L << (POINTFROMWKB - 751)) | (1L << (POINTN - 751)) | (1L << (POLYFROMTEXT - 751)) | (1L << (POLYFROMWKB - 751)) | (1L << (POLYGONFROMTEXT - 751)) | (1L << (POLYGONFROMWKB - 751)) | (1L << (POW - 751)) | (1L << (POWER - 751)) | (1L << (QUOTE - 751)) | (1L << (RADIANS - 751)) | (1L << (RAND - 751)) | (1L << (RANDOM_BYTES - 751)) | (1L << (RELEASE_LOCK - 751)) | (1L << (REVERSE - 751)) | (1L << (ROUND - 751)) | (1L << (ROW_COUNT - 751)) | (1L << (RPAD - 751)) | (1L << (RTRIM - 751)) | (1L << (SEC_TO_TIME - 751)) | (1L << (SESSION_USER - 751)) | (1L << (SHA - 751)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (SHA1 - 815)) | (1L << (SHA2 - 815)) | (1L << (SIGN - 815)) | (1L << (SIN - 815)) | (1L << (SLEEP - 815)) | (1L << (SOUNDEX - 815)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 815)) | (1L << (SQRT - 815)) | (1L << (SRID - 815)) | (1L << (STARTPOINT - 815)) | (1L << (STRCMP - 815)) | (1L << (STR_TO_DATE - 815)) | (1L << (ST_AREA - 815)) | (1L << (ST_ASBINARY - 815)) | (1L << (ST_ASTEXT - 815)) | (1L << (ST_ASWKB - 815)) | (1L << (ST_ASWKT - 815)) | (1L << (ST_BUFFER - 815)) | (1L << (ST_CENTROID - 815)) | (1L << (ST_CONTAINS - 815)) | (1L << (ST_CROSSES - 815)) | (1L << (ST_DIFFERENCE - 815)) | (1L << (ST_DIMENSION - 815)) | (1L << (ST_DISJOINT - 815)) | (1L << (ST_DISTANCE - 815)) | (1L << (ST_ENDPOINT - 815)) | (1L << (ST_ENVELOPE - 815)) | (1L << (ST_EQUALS - 815)) | (1L << (ST_EXTERIORRING - 815)) | (1L << (ST_GEOMCOLLFROMTEXT - 815)) | (1L << (ST_GEOMCOLLFROMTXT - 815)) | (1L << (ST_GEOMCOLLFROMWKB - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 815)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 815)) | (1L << (ST_GEOMETRYFROMTEXT - 815)) | (1L << (ST_GEOMETRYFROMWKB - 815)) | (1L << (ST_GEOMETRYN - 815)) | (1L << (ST_GEOMETRYTYPE - 815)) | (1L << (ST_GEOMFROMTEXT - 815)) | (1L << (ST_GEOMFROMWKB - 815)) | (1L << (ST_INTERIORRINGN - 815)) | (1L << (ST_INTERSECTION - 815)) | (1L << (ST_INTERSECTS - 815)) | (1L << (ST_ISCLOSED - 815)) | (1L << (ST_ISEMPTY - 815)) | (1L << (ST_ISSIMPLE - 815)) | (1L << (ST_LINEFROMTEXT - 815)) | (1L << (ST_LINEFROMWKB - 815)) | (1L << (ST_LINESTRINGFROMTEXT - 815)) | (1L << (ST_LINESTRINGFROMWKB - 815)) | (1L << (ST_NUMGEOMETRIES - 815)) | (1L << (ST_NUMINTERIORRING - 815)) | (1L << (ST_NUMINTERIORRINGS - 815)) | (1L << (ST_NUMPOINTS - 815)) | (1L << (ST_OVERLAPS - 815)) | (1L << (ST_POINTFROMTEXT - 815)) | (1L << (ST_POINTFROMWKB - 815)) | (1L << (ST_POINTN - 815)) | (1L << (ST_POLYFROMTEXT - 815)) | (1L << (ST_POLYFROMWKB - 815)) | (1L << (ST_POLYGONFROMTEXT - 815)) | (1L << (ST_POLYGONFROMWKB - 815)) | (1L << (ST_SRID - 815)) | (1L << (ST_STARTPOINT - 815)))) != 0) || ((((_la - 879)) & ~0x3f) == 0 && ((1L << (_la - 879)) & ((1L << (ST_SYMDIFFERENCE - 879)) | (1L << (ST_TOUCHES - 879)) | (1L << (ST_UNION - 879)) | (1L << (ST_WITHIN - 879)) | (1L << (ST_X - 879)) | (1L << (ST_Y - 879)) | (1L << (SUBDATE - 879)) | (1L << (SUBSTRING_INDEX - 879)) | (1L << (SUBTIME - 879)) | (1L << (SYSTEM_USER - 879)) | (1L << (TAN - 879)) | (1L << (TIMEDIFF - 879)) | (1L << (TIMESTAMPADD - 879)) | (1L << (TIMESTAMPDIFF - 879)) | (1L << (TIME_FORMAT - 879)) | (1L << (TIME_TO_SEC - 879)) | (1L << (TOUCHES - 879)) | (1L << (TO_BASE64 - 879)) | (1L << (TO_DAYS - 879)) | (1L << (TO_SECONDS - 879)) | (1L << (UCASE - 879)) | (1L << (UNCOMPRESS - 879)) | (1L << (UNCOMPRESSED_LENGTH - 879)) | (1L << (UNHEX - 879)) | (1L << (UNIX_TIMESTAMP - 879)) | (1L << (UPDATEXML - 879)) | (1L << (UPPER - 879)) | (1L << (UUID - 879)) | (1L << (UUID_SHORT - 879)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 879)) | (1L << (VERSION - 879)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879)) | (1L << (WEEKDAY - 879)) | (1L << (WEEKOFYEAR - 879)) | (1L << (WEIGHT_STRING - 879)) | (1L << (WITHIN - 879)) | (1L << (YEARWEEK - 879)) | (1L << (Y_FUNCTION - 879)) | (1L << (X_FUNCTION - 879)))) != 0) || ((((_la - 943)) & ~0x3f) == 0 && ((1L << (_la - 943)) & ((1L << (LR_BRACKET - 943)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 943)) | (1L << (ID - 943)) | (1L << (REVERSE_QUOTE_ID - 943)))) != 0) );
			setState(4004);
			match(END);
			setState(4005);
			match(WHILE);
			setState(4007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)) | (1L << (QUARTER - 519)) | (1L << (MONTH - 519)) | (1L << (DAY - 519)) | (1L << (HOUR - 519)) | (1L << (MINUTE - 519)) | (1L << (WEEK - 519)) | (1L << (SECOND - 519)) | (1L << (MICROSECOND - 519)) | (1L << (TABLES - 519)) | (1L << (ROUTINE - 519)) | (1L << (EXECUTE - 519)) | (1L << (FILE - 519)) | (1L << (PROCESS - 519)) | (1L << (RELOAD - 519)) | (1L << (SHUTDOWN - 519)) | (1L << (SUPER - 519)) | (1L << (PRIVILEGES - 519)) | (1L << (ARMSCII8 - 519)) | (1L << (ASCII - 519)) | (1L << (BIG5 - 519)) | (1L << (CP1250 - 519)) | (1L << (CP1251 - 519)) | (1L << (CP1256 - 519)) | (1L << (CP1257 - 519)) | (1L << (CP850 - 519)) | (1L << (CP852 - 519)) | (1L << (CP866 - 519)) | (1L << (CP932 - 519)) | (1L << (DEC8 - 519)) | (1L << (EUCJPMS - 519)) | (1L << (EUCKR - 519)) | (1L << (GB2312 - 519)) | (1L << (GBK - 519)) | (1L << (GEOSTD8 - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (GREEK - 583)) | (1L << (HEBREW - 583)) | (1L << (HP8 - 583)) | (1L << (KEYBCS2 - 583)) | (1L << (KOI8R - 583)) | (1L << (KOI8U - 583)) | (1L << (LATIN1 - 583)) | (1L << (LATIN2 - 583)) | (1L << (LATIN5 - 583)) | (1L << (LATIN7 - 583)) | (1L << (MACCE - 583)) | (1L << (MACROMAN - 583)) | (1L << (SJIS - 583)) | (1L << (SWE7 - 583)) | (1L << (TIS620 - 583)) | (1L << (UCS2 - 583)) | (1L << (UJIS - 583)) | (1L << (UTF16 - 583)) | (1L << (UTF16LE - 583)) | (1L << (UTF32 - 583)) | (1L << (UTF8 - 583)) | (1L << (UTF8MB3 - 583)) | (1L << (UTF8MB4 - 583)) | (1L << (ARCHIVE - 583)) | (1L << (BLACKHOLE - 583)) | (1L << (CSV - 583)) | (1L << (FEDERATED - 583)) | (1L << (INNODB - 583)) | (1L << (MEMORY - 583)) | (1L << (MRG_MYISAM - 583)) | (1L << (MYISAM - 583)) | (1L << (NDB - 583)) | (1L << (NDBCLUSTER - 583)) | (1L << (PERFOMANCE_SCHEMA - 583)) | (1L << (REPEATABLE - 583)) | (1L << (COMMITTED - 583)) | (1L << (UNCOMMITTED - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (GEOMETRYCOLLECTION - 583)) | (1L << (LINESTRING - 583)) | (1L << (MULTILINESTRING - 583)) | (1L << (MULTIPOINT - 583)) | (1L << (MULTIPOLYGON - 583)) | (1L << (POINT - 583)) | (1L << (POLYGON - 583)) | (1L << (ABS - 583)) | (1L << (ACOS - 583)) | (1L << (ADDDATE - 583)) | (1L << (ADDTIME - 583)) | (1L << (AES_DECRYPT - 583)) | (1L << (AES_ENCRYPT - 583)) | (1L << (AREA - 583)) | (1L << (ASBINARY - 583)) | (1L << (ASIN - 583)) | (1L << (ASTEXT - 583)) | (1L << (ASWKB - 583)) | (1L << (ASWKT - 583)) | (1L << (ASYMMETRIC_DECRYPT - 583)) | (1L << (ASYMMETRIC_DERIVE - 583)) | (1L << (ASYMMETRIC_ENCRYPT - 583)) | (1L << (ASYMMETRIC_SIGN - 583)) | (1L << (ASYMMETRIC_VERIFY - 583)) | (1L << (ATAN - 583)) | (1L << (ATAN2 - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (BENCHMARK - 647)) | (1L << (BIN - 647)) | (1L << (BIT_COUNT - 647)) | (1L << (BIT_LENGTH - 647)) | (1L << (BUFFER - 647)) | (1L << (CEIL - 647)) | (1L << (CEILING - 647)) | (1L << (CENTROID - 647)) | (1L << (CHARACTER_LENGTH - 647)) | (1L << (CHARSET - 647)) | (1L << (CHAR_LENGTH - 647)) | (1L << (COERCIBILITY - 647)) | (1L << (COLLATION - 647)) | (1L << (COMPRESS - 647)) | (1L << (CONCAT - 647)) | (1L << (CONCAT_WS - 647)) | (1L << (CONNECTION_ID - 647)) | (1L << (CONV - 647)) | (1L << (CONVERT_TZ - 647)) | (1L << (COS - 647)) | (1L << (COT - 647)) | (1L << (CRC32 - 647)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 647)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 647)) | (1L << (CREATE_DH_PARAMETERS - 647)) | (1L << (CREATE_DIGEST - 647)) | (1L << (CROSSES - 647)) | (1L << (DATEDIFF - 647)) | (1L << (DATE_FORMAT - 647)) | (1L << (DAYNAME - 647)) | (1L << (DAYOFMONTH - 647)) | (1L << (DAYOFWEEK - 647)) | (1L << (DAYOFYEAR - 647)) | (1L << (DECODE - 647)) | (1L << (DEGREES - 647)) | (1L << (DES_DECRYPT - 647)) | (1L << (DES_ENCRYPT - 647)) | (1L << (DIMENSION - 647)) | (1L << (DISJOINT - 647)) | (1L << (ELT - 647)) | (1L << (ENCODE - 647)) | (1L << (ENCRYPT - 647)) | (1L << (ENDPOINT - 647)) | (1L << (ENVELOPE - 647)) | (1L << (EQUALS - 647)) | (1L << (EXP - 647)) | (1L << (EXPORT_SET - 647)) | (1L << (EXTERIORRING - 647)) | (1L << (EXTRACTVALUE - 647)) | (1L << (FIELD - 647)) | (1L << (FIND_IN_SET - 647)) | (1L << (FLOOR - 647)) | (1L << (FORMAT - 647)) | (1L << (FOUND_ROWS - 647)) | (1L << (FROM_BASE64 - 647)) | (1L << (FROM_DAYS - 647)) | (1L << (FROM_UNIXTIME - 647)) | (1L << (GEOMCOLLFROMTEXT - 647)) | (1L << (GEOMCOLLFROMWKB - 647)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 647)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 647)) | (1L << (GEOMETRYFROMTEXT - 647)) | (1L << (GEOMETRYFROMWKB - 647)) | (1L << (GEOMETRYN - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (GEOMETRYTYPE - 711)) | (1L << (GEOMFROMTEXT - 711)) | (1L << (GEOMFROMWKB - 711)) | (1L << (GET_FORMAT - 711)) | (1L << (GET_LOCK - 711)) | (1L << (GLENGTH - 711)) | (1L << (GREATEST - 711)) | (1L << (GTID_SUBSET - 711)) | (1L << (GTID_SUBTRACT - 711)) | (1L << (HEX - 711)) | (1L << (IFNULL - 711)) | (1L << (INET6_ATON - 711)) | (1L << (INET6_NTOA - 711)) | (1L << (INET_ATON - 711)) | (1L << (INET_NTOA - 711)) | (1L << (INSTR - 711)) | (1L << (INTERIORRINGN - 711)) | (1L << (INTERSECTS - 711)) | (1L << (ISCLOSED - 711)) | (1L << (ISEMPTY - 711)) | (1L << (ISNULL - 711)) | (1L << (ISSIMPLE - 711)) | (1L << (IS_FREE_LOCK - 711)) | (1L << (IS_IPV4 - 711)) | (1L << (IS_IPV4_COMPAT - 711)) | (1L << (IS_IPV4_MAPPED - 711)) | (1L << (IS_IPV6 - 711)) | (1L << (IS_USED_LOCK - 711)) | (1L << (LAST_INSERT_ID - 711)) | (1L << (LCASE - 711)) | (1L << (LEAST - 711)) | (1L << (LENGTH - 711)) | (1L << (LINEFROMTEXT - 711)) | (1L << (LINEFROMWKB - 711)) | (1L << (LINESTRINGFROMTEXT - 711)) | (1L << (LINESTRINGFROMWKB - 711)) | (1L << (LN - 711)) | (1L << (LOAD_FILE - 711)) | (1L << (LOCATE - 711)) | (1L << (LOG - 711)) | (1L << (LOG10 - 711)) | (1L << (LOG2 - 711)) | (1L << (LOWER - 711)) | (1L << (LPAD - 711)) | (1L << (LTRIM - 711)) | (1L << (MAKEDATE - 711)) | (1L << (MAKETIME - 711)) | (1L << (MAKE_SET - 711)) | (1L << (MASTER_POS_WAIT - 711)) | (1L << (MBRCONTAINS - 711)) | (1L << (MBRDISJOINT - 711)) | (1L << (MBREQUAL - 711)) | (1L << (MBRINTERSECTS - 711)) | (1L << (MBROVERLAPS - 711)) | (1L << (MBRTOUCHES - 711)) | (1L << (MBRWITHIN - 711)) | (1L << (MD5 - 711)) | (1L << (MLINEFROMTEXT - 711)) | (1L << (MLINEFROMWKB - 711)) | (1L << (MONTHNAME - 711)) | (1L << (MPOINTFROMTEXT - 711)) | (1L << (MPOINTFROMWKB - 711)) | (1L << (MPOLYFROMTEXT - 711)) | (1L << (MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & ((1L << (MULTILINESTRINGFROMTEXT - 775)) | (1L << (MULTILINESTRINGFROMWKB - 775)) | (1L << (MULTIPOINTFROMTEXT - 775)) | (1L << (MULTIPOINTFROMWKB - 775)) | (1L << (MULTIPOLYGONFROMTEXT - 775)) | (1L << (MULTIPOLYGONFROMWKB - 775)) | (1L << (NAME_CONST - 775)) | (1L << (NULLIF - 775)) | (1L << (NUMGEOMETRIES - 775)) | (1L << (NUMINTERIORRINGS - 775)) | (1L << (NUMPOINTS - 775)) | (1L << (OCT - 775)) | (1L << (OCTET_LENGTH - 775)) | (1L << (ORD - 775)) | (1L << (OVERLAPS - 775)) | (1L << (PERIOD_ADD - 775)) | (1L << (PERIOD_DIFF - 775)) | (1L << (PI - 775)) | (1L << (POINTFROMTEXT - 775)) | (1L << (POINTFROMWKB - 775)) | (1L << (POINTN - 775)) | (1L << (POLYFROMTEXT - 775)) | (1L << (POLYFROMWKB - 775)) | (1L << (POLYGONFROMTEXT - 775)) | (1L << (POLYGONFROMWKB - 775)) | (1L << (POW - 775)) | (1L << (POWER - 775)) | (1L << (QUOTE - 775)) | (1L << (RADIANS - 775)) | (1L << (RAND - 775)) | (1L << (RANDOM_BYTES - 775)) | (1L << (RELEASE_LOCK - 775)) | (1L << (REVERSE - 775)) | (1L << (ROUND - 775)) | (1L << (ROW_COUNT - 775)) | (1L << (RPAD - 775)) | (1L << (RTRIM - 775)) | (1L << (SEC_TO_TIME - 775)) | (1L << (SESSION_USER - 775)) | (1L << (SHA - 775)) | (1L << (SHA1 - 775)) | (1L << (SHA2 - 775)) | (1L << (SIGN - 775)) | (1L << (SIN - 775)) | (1L << (SLEEP - 775)) | (1L << (SOUNDEX - 775)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 775)) | (1L << (SQRT - 775)) | (1L << (SRID - 775)) | (1L << (STARTPOINT - 775)) | (1L << (STRCMP - 775)) | (1L << (STR_TO_DATE - 775)) | (1L << (ST_AREA - 775)) | (1L << (ST_ASBINARY - 775)) | (1L << (ST_ASTEXT - 775)) | (1L << (ST_ASWKB - 775)) | (1L << (ST_ASWKT - 775)) | (1L << (ST_BUFFER - 775)) | (1L << (ST_CENTROID - 775)) | (1L << (ST_CONTAINS - 775)) | (1L << (ST_CROSSES - 775)) | (1L << (ST_DIFFERENCE - 775)) | (1L << (ST_DIMENSION - 775)) | (1L << (ST_DISJOINT - 775)))) != 0) || ((((_la - 839)) & ~0x3f) == 0 && ((1L << (_la - 839)) & ((1L << (ST_DISTANCE - 839)) | (1L << (ST_ENDPOINT - 839)) | (1L << (ST_ENVELOPE - 839)) | (1L << (ST_EQUALS - 839)) | (1L << (ST_EXTERIORRING - 839)) | (1L << (ST_GEOMCOLLFROMTEXT - 839)) | (1L << (ST_GEOMCOLLFROMTXT - 839)) | (1L << (ST_GEOMCOLLFROMWKB - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 839)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 839)) | (1L << (ST_GEOMETRYFROMTEXT - 839)) | (1L << (ST_GEOMETRYFROMWKB - 839)) | (1L << (ST_GEOMETRYN - 839)) | (1L << (ST_GEOMETRYTYPE - 839)) | (1L << (ST_GEOMFROMTEXT - 839)) | (1L << (ST_GEOMFROMWKB - 839)) | (1L << (ST_INTERIORRINGN - 839)) | (1L << (ST_INTERSECTION - 839)) | (1L << (ST_INTERSECTS - 839)) | (1L << (ST_ISCLOSED - 839)) | (1L << (ST_ISEMPTY - 839)) | (1L << (ST_ISSIMPLE - 839)) | (1L << (ST_LINEFROMTEXT - 839)) | (1L << (ST_LINEFROMWKB - 839)) | (1L << (ST_LINESTRINGFROMTEXT - 839)) | (1L << (ST_LINESTRINGFROMWKB - 839)) | (1L << (ST_NUMGEOMETRIES - 839)) | (1L << (ST_NUMINTERIORRING - 839)) | (1L << (ST_NUMINTERIORRINGS - 839)) | (1L << (ST_NUMPOINTS - 839)) | (1L << (ST_OVERLAPS - 839)) | (1L << (ST_POINTFROMTEXT - 839)) | (1L << (ST_POINTFROMWKB - 839)) | (1L << (ST_POINTN - 839)) | (1L << (ST_POLYFROMTEXT - 839)) | (1L << (ST_POLYFROMWKB - 839)) | (1L << (ST_POLYGONFROMTEXT - 839)) | (1L << (ST_POLYGONFROMWKB - 839)) | (1L << (ST_SRID - 839)) | (1L << (ST_STARTPOINT - 839)) | (1L << (ST_SYMDIFFERENCE - 839)) | (1L << (ST_TOUCHES - 839)) | (1L << (ST_UNION - 839)) | (1L << (ST_WITHIN - 839)) | (1L << (ST_X - 839)) | (1L << (ST_Y - 839)) | (1L << (SUBDATE - 839)) | (1L << (SUBSTRING_INDEX - 839)) | (1L << (SUBTIME - 839)) | (1L << (SYSTEM_USER - 839)) | (1L << (TAN - 839)) | (1L << (TIMEDIFF - 839)) | (1L << (TIMESTAMPADD - 839)) | (1L << (TIMESTAMPDIFF - 839)) | (1L << (TIME_FORMAT - 839)) | (1L << (TIME_TO_SEC - 839)) | (1L << (TOUCHES - 839)) | (1L << (TO_BASE64 - 839)) | (1L << (TO_DAYS - 839)) | (1L << (TO_SECONDS - 839)) | (1L << (UCASE - 839)) | (1L << (UNCOMPRESS - 839)) | (1L << (UNCOMPRESSED_LENGTH - 839)) | (1L << (UNHEX - 839)))) != 0) || ((((_la - 903)) & ~0x3f) == 0 && ((1L << (_la - 903)) & ((1L << (UNIX_TIMESTAMP - 903)) | (1L << (UPDATEXML - 903)) | (1L << (UPPER - 903)) | (1L << (UUID - 903)) | (1L << (UUID_SHORT - 903)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 903)) | (1L << (VERSION - 903)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903)) | (1L << (WEEKDAY - 903)) | (1L << (WEEKOFYEAR - 903)) | (1L << (WEIGHT_STRING - 903)) | (1L << (WITHIN - 903)) | (1L << (YEARWEEK - 903)) | (1L << (Y_FUNCTION - 903)) | (1L << (X_FUNCTION - 903)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 903)) | (1L << (ID - 903)))) != 0) || _la==REVERSE_QUOTE_ID) {
				{
				setState(4006);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode FETCH() { return getToken(MySqlParser.FETCH, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCursor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCursor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCursor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_cursor_statement);
		int _la;
		try {
			setState(4024);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4009);
				match(CLOSE);
				setState(4010);
				id_();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 2);
				{
				setState(4011);
				match(FETCH);
				setState(4016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==NEXT) {
					{
					setState(4013);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4012);
						match(NEXT);
						}
					}

					setState(4015);
					match(FROM);
					}
				}

				setState(4018);
				id_();
				setState(4019);
				match(INTO);
				setState(4020);
				id_list();
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4022);
				match(OPEN);
				setState(4023);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_variableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public Declare_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclare_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclare_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclare_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_variableContext declare_variable() throws RecognitionException {
		Declare_variableContext _localctx = new Declare_variableContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_declare_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4026);
			match(DECLARE);
			setState(4027);
			id_list();
			setState(4028);
			data_type();
			setState(4031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4029);
				match(DEFAULT);
				setState(4030);
				default_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_conditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public Declare_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclare_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclare_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclare_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_conditionContext declare_condition() throws RecognitionException {
		Declare_conditionContext _localctx = new Declare_conditionContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_declare_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4033);
			match(DECLARE);
			setState(4034);
			id_();
			setState(4035);
			match(CONDITION);
			setState(4036);
			match(FOR);
			setState(4043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				{
				setState(4037);
				decimal_literal();
				}
				break;
			case SQLSTATE:
				{
				setState(4038);
				match(SQLSTATE);
				setState(4040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4039);
					match(VALUE);
					}
				}

				setState(4042);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MySqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclare_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclare_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_declare_cursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4045);
			match(DECLARE);
			setState(4046);
			id_();
			setState(4047);
			match(CURSOR);
			setState(4048);
			match(FOR);
			setState(4049);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_handlerContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public List<Handler_condition_valueContext> handler_condition_value() {
			return getRuleContexts(Handler_condition_valueContext.class);
		}
		public Handler_condition_valueContext handler_condition_value(int i) {
			return getRuleContext(Handler_condition_valueContext.class,i);
		}
		public Routine_bodyContext routine_body() {
			return getRuleContext(Routine_bodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(MySqlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(MySqlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(MySqlParser.UNDO, 0); }
		public Declare_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclare_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclare_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclare_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_handlerContext declare_handler() throws RecognitionException {
		Declare_handlerContext _localctx = new Declare_handlerContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_declare_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4051);
			match(DECLARE);
			setState(4052);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4053);
			match(HANDLER);
			setState(4054);
			match(FOR);
			setState(4055);
			handler_condition_value();
			setState(4060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4056);
				match(COMMA);
				setState(4057);
				handler_condition_value();
				}
				}
				setState(4062);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4063);
			routine_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_condition_valueContext extends ParserRuleContext {
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SQLWARNING() { return getToken(MySqlParser.SQLWARNING, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(MySqlParser.SQLEXCEPTION, 0); }
		public Handler_condition_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_condition_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandler_condition_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandler_condition_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandler_condition_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_condition_valueContext handler_condition_value() throws RecognitionException {
		Handler_condition_valueContext _localctx = new Handler_condition_valueContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_handler_condition_value);
		int _la;
		try {
			setState(4076);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4065);
				decimal_literal();
				}
				break;
			case SQLSTATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4066);
				match(SQLSTATE);
				setState(4068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4067);
					match(VALUE);
					}
				}

				setState(4070);
				match(STRING_LITERAL);
				}
				break;
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4071);
				id_();
				}
				break;
			case SQLWARNING:
				enterOuterAlt(_localctx, 4);
				{
				setState(4072);
				match(SQLWARNING);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4073);
				match(NOT);
				setState(4074);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				enterOuterAlt(_localctx, 6);
				{
				setState(4075);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_sql_statementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public Compound_statementContext compound_statement() {
			return getRuleContext(Compound_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Procedure_sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedure_sql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedure_sql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProcedure_sql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_sql_statementContext procedure_sql_statement() throws RecognitionException {
		Procedure_sql_statementContext _localctx = new Procedure_sql_statementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_procedure_sql_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
			case 1:
				{
				setState(4078);
				compound_statement();
				}
				break;
			case 2:
				{
				setState(4079);
				sql_statement();
				}
				break;
			}
			setState(4082);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_userContext extends ParserRuleContext {
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
	 
		public Alter_userContext() { }
		public void copyFrom(Alter_userContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysql57Context extends Alter_userContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<User_auth_optionContext> user_auth_option() {
			return getRuleContexts(User_auth_optionContext.class);
		}
		public User_auth_optionContext user_auth_option(int i) {
			return getRuleContext(User_auth_optionContext.class,i);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<User_password_optionContext> user_password_option() {
			return getRuleContexts(User_password_optionContext.class);
		}
		public User_password_optionContext user_password_option(int i) {
			return getRuleContext(User_password_optionContext.class,i);
		}
		public List<User_lock_optionContext> user_lock_option() {
			return getRuleContexts(User_lock_optionContext.class);
		}
		public User_lock_optionContext user_lock_option(int i) {
			return getRuleContext(User_lock_optionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<Tls_optionContext> tls_option() {
			return getRuleContexts(Tls_optionContext.class);
		}
		public Tls_optionContext tls_option(int i) {
			return getRuleContext(Tls_optionContext.class,i);
		}
		public List<User_resource_optionContext> user_resource_option() {
			return getRuleContexts(User_resource_optionContext.class);
		}
		public User_resource_optionContext user_resource_option(int i) {
			return getRuleContext(User_resource_optionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public AlterUserMysql57Context(Alter_userContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysql57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysql57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUserMysql57(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysql56Context extends Alter_userContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public List<User_password_optionContext> user_password_option() {
			return getRuleContexts(User_password_optionContext.class);
		}
		public User_password_optionContext user_password_option(int i) {
			return getRuleContext(User_password_optionContext.class,i);
		}
		public AlterUserMysql56Context(Alter_userContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysql56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysql56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUserMysql56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_alter_user);
		int _la;
		try {
			setState(4141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysql56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4084);
				match(ALTER);
				setState(4085);
				match(USER);
				setState(4086);
				user_name();
				setState(4087);
				user_password_option();
				setState(4094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4088);
					match(COMMA);
					setState(4089);
					user_name();
					setState(4090);
					user_password_option();
					}
					}
					setState(4096);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysql57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4097);
				match(ALTER);
				setState(4098);
				match(USER);
				setState(4100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4099);
					if_exists();
					}
				}

				setState(4102);
				user_auth_option();
				setState(4107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4103);
					match(COMMA);
					setState(4104);
					user_auth_option();
					}
					}
					setState(4109);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4110);
					match(REQUIRE);
					setState(4122);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4111);
						match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4112);
						tls_option();
						setState(4119);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4114);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4113);
								match(AND);
								}
							}

							setState(4116);
							tls_option();
							}
							}
							setState(4121);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4126);
					match(WITH);
					setState(4128); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4127);
						user_resource_option();
						}
						}
						setState(4130); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)))) != 0) );
					}
				}

				setState(4138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4136);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4134);
						user_password_option();
						}
						break;
					case ACCOUNT:
						{
						setState(4135);
						user_lock_option();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4140);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_userContext extends ParserRuleContext {
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
	 
		public Create_userContext() { }
		public void copyFrom(Create_userContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysql57Context extends Create_userContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<User_auth_optionContext> user_auth_option() {
			return getRuleContexts(User_auth_optionContext.class);
		}
		public User_auth_optionContext user_auth_option(int i) {
			return getRuleContext(User_auth_optionContext.class,i);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<User_password_optionContext> user_password_option() {
			return getRuleContexts(User_password_optionContext.class);
		}
		public User_password_optionContext user_password_option(int i) {
			return getRuleContext(User_password_optionContext.class,i);
		}
		public List<User_lock_optionContext> user_lock_option() {
			return getRuleContexts(User_lock_optionContext.class);
		}
		public User_lock_optionContext user_lock_option(int i) {
			return getRuleContext(User_lock_optionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<Tls_optionContext> tls_option() {
			return getRuleContexts(Tls_optionContext.class);
		}
		public Tls_optionContext tls_option(int i) {
			return getRuleContext(Tls_optionContext.class,i);
		}
		public List<User_resource_optionContext> user_resource_option() {
			return getRuleContexts(User_resource_optionContext.class);
		}
		public User_resource_optionContext user_resource_option(int i) {
			return getRuleContext(User_resource_optionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public CreateUserMysql57Context(Create_userContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysql57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysql57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUserMysql57(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateUserMysql56Context extends Create_userContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<User_auth_optionContext> user_auth_option() {
			return getRuleContexts(User_auth_optionContext.class);
		}
		public User_auth_optionContext user_auth_option(int i) {
			return getRuleContext(User_auth_optionContext.class,i);
		}
		public CreateUserMysql56Context(Create_userContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysql56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysql56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUserMysql56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_create_user);
		int _la;
		try {
			setState(4197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysql56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4143);
				match(CREATE);
				setState(4144);
				match(USER);
				setState(4145);
				user_auth_option();
				setState(4150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4146);
					match(COMMA);
					setState(4147);
					user_auth_option();
					}
					}
					setState(4152);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysql57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4153);
				match(CREATE);
				setState(4154);
				match(USER);
				setState(4156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4155);
					if_not_exists();
					}
				}

				setState(4158);
				user_auth_option();
				setState(4163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4159);
					match(COMMA);
					setState(4160);
					user_auth_option();
					}
					}
					setState(4165);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4166);
					match(REQUIRE);
					setState(4178);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4167);
						match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4168);
						tls_option();
						setState(4175);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4170);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4169);
								match(AND);
								}
							}

							setState(4172);
							tls_option();
							}
							}
							setState(4177);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4182);
					match(WITH);
					setState(4184); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4183);
						user_resource_option();
						}
						}
						setState(4186); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)))) != 0) );
					}
				}

				setState(4194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4192);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4190);
						user_password_option();
						}
						break;
					case ACCOUNT:
						{
						setState(4191);
						user_lock_option();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4196);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_userContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDrop_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDrop_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDrop_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_userContext drop_user() throws RecognitionException {
		Drop_userContext _localctx = new Drop_userContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_drop_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4199);
			match(DROP);
			setState(4200);
			match(USER);
			setState(4202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4201);
				if_exists();
				}
			}

			setState(4204);
			user_name();
			setState(4209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4205);
				match(COMMA);
				setState(4206);
				user_name();
				}
				}
				setState(4211);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_statementContext extends ParserRuleContext {
		public Token priv_obj_type;
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public List<Privelege_clauseContext> privelege_clause() {
			return getRuleContexts(Privelege_clauseContext.class);
		}
		public Privelege_clauseContext privelege_clause(int i) {
			return getRuleContext(Privelege_clauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public Privilege_levelContext privilege_level() {
			return getRuleContext(Privilege_levelContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<User_auth_optionContext> user_auth_option() {
			return getRuleContexts(User_auth_optionContext.class);
		}
		public User_auth_optionContext user_auth_option(int i) {
			return getRuleContext(User_auth_optionContext.class,i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<Tls_optionContext> tls_option() {
			return getRuleContexts(Tls_optionContext.class);
		}
		public Tls_optionContext tls_option(int i) {
			return getRuleContext(Tls_optionContext.class,i);
		}
		public List<TerminalNode> OPTION() { return getTokens(MySqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(MySqlParser.OPTION, i);
		}
		public List<User_resource_optionContext> user_resource_option() {
			return getRuleContexts(User_resource_optionContext.class);
		}
		public User_resource_optionContext user_resource_option(int i) {
			return getRuleContext(User_resource_optionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public Grant_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrant_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrant_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGrant_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_statementContext grant_statement() throws RecognitionException {
		Grant_statementContext _localctx = new Grant_statementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_grant_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4212);
			match(GRANT);
			setState(4213);
			privelege_clause();
			setState(4218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4214);
				match(COMMA);
				setState(4215);
				privelege_clause();
				}
				}
				setState(4220);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4221);
			match(ON);
			setState(4223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
			case 1:
				{
				setState(4222);
				((Grant_statementContext)_localctx).priv_obj_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
					((Grant_statementContext)_localctx).priv_obj_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4225);
			privilege_level();
			setState(4226);
			match(TO);
			setState(4227);
			user_auth_option();
			setState(4232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4228);
				match(COMMA);
				setState(4229);
				user_auth_option();
				}
				}
				setState(4234);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4249);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4235);
				match(REQUIRE);
				setState(4247);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4236);
					match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4237);
					tls_option();
					setState(4244);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
						{
						{
						setState(4239);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(4238);
							match(AND);
							}
						}

						setState(4241);
						tls_option();
						}
						}
						setState(4246);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4251);
				match(WITH);
				setState(4257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==GRANT || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)))) != 0)) {
					{
					setState(4255);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case GRANT:
						{
						setState(4252);
						match(GRANT);
						setState(4253);
						match(OPTION);
						}
						break;
					case MAX_CONNECTIONS_PER_HOUR:
					case MAX_QUERIES_PER_HOUR:
					case MAX_UPDATES_PER_HOUR:
					case MAX_USER_CONNECTIONS:
						{
						setState(4254);
						user_resource_option();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4259);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_proxyContext extends ParserRuleContext {
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public Grant_proxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_proxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrant_proxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrant_proxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGrant_proxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_proxyContext grant_proxy() throws RecognitionException {
		Grant_proxyContext _localctx = new Grant_proxyContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_grant_proxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4262);
			match(GRANT);
			setState(4263);
			match(PROXY);
			setState(4264);
			match(ON);
			setState(4265);
			user_name();
			setState(4266);
			match(TO);
			setState(4267);
			user_name();
			setState(4272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4268);
				match(COMMA);
				setState(4269);
				user_name();
				}
				}
				setState(4274);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4275);
				match(WITH);
				setState(4276);
				match(GRANT);
				setState(4277);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_userContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public List<TerminalNode> TO() { return getTokens(MySqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MySqlParser.TO, i);
		}
		public Rename_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRename_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRename_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRename_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rename_userContext rename_user() throws RecognitionException {
		Rename_userContext _localctx = new Rename_userContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_rename_user);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4280);
			match(RENAME);
			setState(4281);
			match(USER);
			setState(4282);
			user_name();
			setState(4283);
			match(TO);
			setState(4284);
			user_name();
			{
			setState(4285);
			match(COMMA);
			setState(4286);
			user_name();
			setState(4287);
			match(TO);
			setState(4288);
			user_name();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_statementContext extends ParserRuleContext {
		public Revoke_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_statement; }
	 
		public Revoke_statementContext() { }
		public void copyFrom(Revoke_statementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends Revoke_statementContext {
		public Token priv_obj_type;
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public List<Privelege_clauseContext> privelege_clause() {
			return getRuleContexts(Privelege_clauseContext.class);
		}
		public Privelege_clauseContext privelege_clause(int i) {
			return getRuleContext(Privelege_clauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public Privilege_levelContext privilege_level() {
			return getRuleContext(Privilege_levelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(Revoke_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDetailRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends Revoke_statementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(Revoke_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShortRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_statementContext revoke_statement() throws RecognitionException {
		Revoke_statementContext _localctx = new Revoke_statementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_revoke_statement);
		int _la;
		try {
			setState(4330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4290);
				match(REVOKE);
				setState(4291);
				privelege_clause();
				setState(4296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4292);
					match(COMMA);
					setState(4293);
					privelege_clause();
					}
					}
					setState(4298);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4299);
				match(ON);
				setState(4301);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
				case 1:
					{
					setState(4300);
					((DetailRevokeContext)_localctx).priv_obj_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).priv_obj_type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4303);
				privilege_level();
				setState(4304);
				match(FROM);
				setState(4305);
				user_name();
				setState(4310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4306);
					match(COMMA);
					setState(4307);
					user_name();
					}
					}
					setState(4312);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4313);
				match(REVOKE);
				setState(4314);
				match(ALL);
				setState(4316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4315);
					match(PRIVILEGES);
					}
				}

				setState(4318);
				match(COMMA);
				setState(4319);
				match(GRANT);
				setState(4320);
				match(OPTION);
				setState(4321);
				match(FROM);
				setState(4322);
				user_name();
				setState(4327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4323);
					match(COMMA);
					setState(4324);
					user_name();
					}
					}
					setState(4329);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_proxyContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public List<User_nameContext> user_name() {
			return getRuleContexts(User_nameContext.class);
		}
		public User_nameContext user_name(int i) {
			return getRuleContext(User_nameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public Revoke_proxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_proxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRevoke_proxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRevoke_proxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRevoke_proxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_proxyContext revoke_proxy() throws RecognitionException {
		Revoke_proxyContext _localctx = new Revoke_proxyContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_revoke_proxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4332);
			match(REVOKE);
			setState(4333);
			match(PROXY);
			setState(4334);
			match(ON);
			setState(4335);
			user_name();
			setState(4336);
			match(FROM);
			setState(4337);
			user_name();
			setState(4342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4338);
				match(COMMA);
				setState(4339);
				user_name();
				}
				}
				setState(4344);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_password_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public Set_password_optionContext set_password_option() {
			return getRuleContext(Set_password_optionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public Set_password_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_password_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSet_password_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSet_password_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSet_password_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_password_statementContext set_password_statement() throws RecognitionException {
		Set_password_statementContext _localctx = new Set_password_statementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_set_password_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4345);
			match(SET);
			setState(4346);
			match(PASSWORD);
			setState(4349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4347);
				match(FOR);
				setState(4348);
				user_name();
				}
			}

			setState(4351);
			match(EQUAL_SYMBOL);
			setState(4352);
			set_password_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_password_optionContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public User_password_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_password_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUser_password_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUser_password_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUser_password_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_password_optionContext user_password_option() throws RecognitionException {
		User_password_optionContext _localctx = new User_password_optionContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_user_password_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4354);
			match(PASSWORD);
			setState(4355);
			match(EXPIRE);
			setState(4362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(4356);
				match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(4357);
				match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(4358);
				match(INTERVAL);
				setState(4359);
				decimal_literal();
				setState(4360);
				match(DAY);
				}
				break;
			case EOF:
			case ACCOUNT:
			case PASSWORD:
			case MINUS:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_auth_optionContext extends ParserRuleContext {
		public User_auth_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_auth_option; }
	 
		public User_auth_optionContext() { }
		public void copyFrom(User_auth_optionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AuthByStringContext extends User_auth_optionContext {
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public Auth_pluginContext auth_plugin() {
			return getRuleContext(Auth_pluginContext.class,0);
		}
		public AuthByStringContext(User_auth_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthByString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthByString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAuthByString(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AuthByPasswordContext extends User_auth_optionContext {
		public Token hashedpwd;
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthByPasswordContext(User_auth_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthByPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthByPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAuthByPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AuthByHashContext extends User_auth_optionContext {
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public Auth_pluginContext auth_plugin() {
			return getRuleContext(Auth_pluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthByHashContext(User_auth_optionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthByHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthByHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAuthByHash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_auth_optionContext user_auth_option() throws RecognitionException {
		User_auth_optionContext _localctx = new User_auth_optionContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_user_auth_option);
		int _la;
		try {
			setState(4387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				_localctx = new AuthByPasswordContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4364);
				user_name();
				setState(4365);
				match(IDENTIFIED);
				setState(4366);
				match(BY);
				setState(4367);
				match(PASSWORD);
				setState(4368);
				((AuthByPasswordContext)_localctx).hashedpwd = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new AuthByStringContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4370);
				user_name();
				setState(4371);
				match(IDENTIFIED);
				setState(4374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4372);
					match(WITH);
					setState(4373);
					auth_plugin();
					}
				}

				setState(4376);
				match(BY);
				setState(4377);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new AuthByHashContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4379);
				user_name();
				setState(4380);
				match(IDENTIFIED);
				setState(4381);
				match(WITH);
				setState(4382);
				auth_plugin();
				setState(4385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4383);
					match(AS);
					setState(4384);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tls_optionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(MySqlParser.SSL, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public Tls_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tls_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTls_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTls_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTls_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tls_optionContext tls_option() throws RecognitionException {
		Tls_optionContext _localctx = new Tls_optionContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_tls_option);
		try {
			setState(4397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4389);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4390);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4391);
				match(CIPHER);
				setState(4392);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4393);
				match(ISSUER);
				setState(4394);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4395);
				match(SUBJECT);
				setState(4396);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_resource_optionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public User_resource_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_resource_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUser_resource_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUser_resource_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUser_resource_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_resource_optionContext user_resource_option() throws RecognitionException {
		User_resource_optionContext _localctx = new User_resource_optionContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_user_resource_option);
		try {
			setState(4407);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4399);
				match(MAX_QUERIES_PER_HOUR);
				setState(4400);
				decimal_literal();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4401);
				match(MAX_UPDATES_PER_HOUR);
				setState(4402);
				decimal_literal();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4403);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4404);
				decimal_literal();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4405);
				match(MAX_USER_CONNECTIONS);
				setState(4406);
				decimal_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_lock_optionContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public User_lock_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_lock_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUser_lock_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUser_lock_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUser_lock_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_lock_optionContext user_lock_option() throws RecognitionException {
		User_lock_optionContext _localctx = new User_lock_optionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_user_lock_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4409);
			match(ACCOUNT);
			setState(4410);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privelege_clauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public Privelege_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelege_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivelege_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivelege_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivelege_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privelege_clauseContext privelege_clause() throws RecognitionException {
		Privelege_clauseContext _localctx = new Privelege_clauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_privelege_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4412);
			privilege();
			setState(4417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(4413);
				match(LR_BRACKET);
				setState(4414);
				id_list();
				setState(4415);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(MySqlParser.USAGE, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_privilege);
		int _la;
		try {
			setState(4461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4419);
				match(ALL);
				setState(4421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4420);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4423);
				match(ALTER);
				setState(4425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4424);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4427);
				match(CREATE);
				setState(4434);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4428);
					match(TEMPORARY);
					setState(4429);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4430);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4431);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(4432);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4433);
					match(TABLESPACE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4436);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4437);
				match(DROP);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4438);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4439);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4440);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4441);
				match(GRANT);
				setState(4442);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4443);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4444);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4445);
				match(LOCK);
				setState(4446);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4447);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4448);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4449);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4450);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4451);
				match(REPLICATION);
				setState(4452);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4453);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4454);
				match(SHOW);
				setState(4455);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4456);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4457);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4458);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4459);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4460);
				match(USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_levelContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Privilege_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilege_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilege_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilege_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_levelContext privilege_level() throws RecognitionException {
		Privilege_levelContext _localctx = new Privilege_levelContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_privilege_level);
		try {
			setState(4476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4463);
				match(STAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4464);
				match(STAR);
				setState(4465);
				match(DOT);
				setState(4466);
				match(STAR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4467);
				id_();
				setState(4468);
				match(DOT);
				setState(4469);
				match(STAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4471);
				id_();
				setState(4472);
				match(DOT);
				setState(4473);
				id_();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4475);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_password_optionContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public Set_password_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_password_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSet_password_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSet_password_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSet_password_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_password_optionContext set_password_option() throws RecognitionException {
		Set_password_optionContext _localctx = new Set_password_optionContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_set_password_option);
		int _la;
		try {
			setState(4483);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(4478);
				_la = _input.LA(1);
				if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4479);
				match(LR_BRACKET);
				setState(4480);
				match(STRING_LITERAL);
				setState(4481);
				match(RR_BRACKET);
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4482);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_tableContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public Analyze_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAnalyze_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAnalyze_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAnalyze_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_tableContext analyze_table() throws RecognitionException {
		Analyze_tableContext _localctx = new Analyze_tableContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_analyze_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4485);
			match(ANALYZE);
			setState(4487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4486);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4489);
			match(TABLE);
			setState(4490);
			table_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_tableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public List<Check_table_optionContext> check_table_option() {
			return getRuleContexts(Check_table_optionContext.class);
		}
		public Check_table_optionContext check_table_option(int i) {
			return getRuleContext(Check_table_optionContext.class,i);
		}
		public Check_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheck_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheck_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheck_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Check_tableContext check_table() throws RecognitionException {
		Check_tableContext _localctx = new Check_tableContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_check_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4492);
			match(CHECK);
			setState(4493);
			match(TABLE);
			setState(4494);
			table_list();
			setState(4498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANGED - 265)) | (1L << (EXTENDED - 265)) | (1L << (FAST - 265)))) != 0) || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(4495);
				check_table_option();
				}
				}
				setState(4500);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Checksum_tableContext extends ParserRuleContext {
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public Checksum_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksum_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChecksum_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChecksum_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChecksum_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Checksum_tableContext checksum_table() throws RecognitionException {
		Checksum_tableContext _localctx = new Checksum_tableContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_checksum_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4501);
			match(CHECKSUM);
			setState(4502);
			match(TABLE);
			setState(4503);
			table_list();
			setState(4505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(4504);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_tableContext extends ParserRuleContext {
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public Optimize_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOptimize_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOptimize_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOptimize_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Optimize_tableContext optimize_table() throws RecognitionException {
		Optimize_tableContext _localctx = new Optimize_tableContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_optimize_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4507);
			match(OPTIMIZE);
			setState(4509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4508);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4511);
			match(TABLE);
			setState(4512);
			table_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Repair_tableContext extends ParserRuleContext {
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public Repair_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repair_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepair_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepair_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRepair_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Repair_tableContext repair_table() throws RecognitionException {
		Repair_tableContext _localctx = new Repair_tableContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_repair_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4514);
			match(REPAIR);
			setState(4516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4515);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4518);
			match(TABLE);
			setState(4519);
			table_list();
			setState(4521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(4520);
				match(QUICK);
				}
			}

			setState(4524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4523);
				match(EXTENDED);
				}
			}

			setState(4527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(4526);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_table_optionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public Check_table_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_table_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheck_table_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheck_table_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheck_table_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Check_table_optionContext check_table_option() throws RecognitionException {
		Check_table_optionContext _localctx = new Check_table_optionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_check_table_option);
		try {
			setState(4536);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4529);
				match(FOR);
				setState(4530);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4531);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(4532);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(4533);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(4534);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(4535);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_udfunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public Create_udfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_udfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreate_udfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreate_udfunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreate_udfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_udfunctionContext create_udfunction() throws RecognitionException {
		Create_udfunctionContext _localctx = new Create_udfunctionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_create_udfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4538);
			match(CREATE);
			setState(4540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(4539);
				match(AGGREGATE);
				}
			}

			setState(4542);
			match(FUNCTION);
			setState(4543);
			id_();
			setState(4544);
			match(RETURNS);
			setState(4545);
			_la = _input.LA(1);
			if ( !(((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (INTEGER - 174)) | (1L << (REAL - 174)) | (1L << (DECIMAL - 174)))) != 0) || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4546);
			match(SONAME);
			setState(4547);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Install_pluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Install_pluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_install_plugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInstall_plugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInstall_plugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInstall_plugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Install_pluginContext install_plugin() throws RecognitionException {
		Install_pluginContext _localctx = new Install_pluginContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_install_plugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4549);
			match(INSTALL);
			setState(4550);
			match(PLUGIN);
			setState(4551);
			id_();
			setState(4552);
			match(SONAME);
			setState(4553);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Uninstall_pluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Uninstall_pluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstall_plugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUninstall_plugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUninstall_plugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUninstall_plugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Uninstall_pluginContext uninstall_plugin() throws RecognitionException {
		Uninstall_pluginContext _localctx = new Uninstall_pluginContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_uninstall_plugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			match(UNINSTALL);
			setState(4556);
			match(PLUGIN);
			setState(4557);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
	 
		public Set_statementContext() { }
		public void copyFrom(Set_statementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetPasswordStatementContext extends Set_statementContext {
		public Set_password_statementContext set_password_statement() {
			return getRuleContext(Set_password_statementContext.class,0);
		}
		public SetPasswordStatementContext(Set_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPasswordStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetTransactionContext extends Set_statementContext {
		public Set_transaction_statementContext set_transaction_statement() {
			return getRuleContext(Set_transaction_statementContext.class,0);
		}
		public SetTransactionContext(Set_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetContext extends Set_statementContext {
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(Set_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesContext extends Set_statementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public SetNamesContext(Set_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends Set_statementContext {
		public Set_autocommit_statementContext set_autocommit_statement() {
			return getRuleContext(Set_autocommit_statementContext.class,0);
		}
		public SetAutocommitContext(Set_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableAssignmentContext extends Set_statementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<Variable_clauseContext> variable_clause() {
			return getRuleContexts(Variable_clauseContext.class);
		}
		public Variable_clauseContext variable_clause(int i) {
			return getRuleContext(Variable_clauseContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public SetVariableAssignmentContext(Set_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetVariableAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetVariableAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetVariableAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_set_statement);
		int _la;
		try {
			setState(4596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				_localctx = new SetVariableAssignmentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4559);
				match(SET);
				setState(4560);
				variable_clause();
				setState(4561);
				match(EQUAL_SYMBOL);
				setState(4562);
				expression(0);
				setState(4570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4563);
					match(COMMA);
					setState(4564);
					variable_clause();
					setState(4565);
					match(EQUAL_SYMBOL);
					setState(4566);
					expression(0);
					}
					}
					setState(4572);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4573);
				match(SET);
				setState(4577);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(4574);
					match(CHARACTER);
					setState(4575);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(4576);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4581);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4579);
					charset_name();
					}
					break;
				case DEFAULT:
					{
					setState(4580);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4583);
				match(SET);
				setState(4584);
				match(NAMES);
				setState(4591);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4585);
					charset_name();
					setState(4588);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(4586);
						match(COLLATE);
						setState(4587);
						collation_name();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(4590);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordStatementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4593);
				set_password_statement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4594);
				set_transaction_statement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4595);
				set_autocommit_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_statementContext extends ParserRuleContext {
		public Show_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_statement; }
	 
		public Show_statementContext() { }
		public void copyFrom(Show_statementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowCreateUserContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public ShowCreateUserContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateFullidobjContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullidobjContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateFullidobj(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateFullidobj(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateFullidobj(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlavestatusContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlavestatusContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSlavestatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSlavestatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSlavestatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowOpentablesContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_filterContext show_filter() {
			return getRuleContext(Show_filterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowOpentablesContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowOpentables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowOpentables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowOpentables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjWithFilterContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySqlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public Show_filterContext show_filter() {
			return getRuleContext(Show_filterContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public ShowObjWithFilterContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowObjWithFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowObjWithFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowObjWithFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowFromschemaFilterContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_filterContext show_filter() {
			return getRuleContext(Show_filterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public ShowFromschemaFilterContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowFromschemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowFromschemaFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowFromschemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutinecodeContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public Full_idContext full_id() {
			return getRuleContext(Full_idContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutinecodeContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowRoutinecode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowRoutinecode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowRoutinecode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterlogsContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ShowMasterlogsContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowMasterlogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowMasterlogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowMasterlogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public ShowCreateDbContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogeventsContext extends Show_statementContext {
		public Decimal_literalContext from_pos;
		public Decimal_literalContext offset;
		public Decimal_literalContext row_count;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public ShowLogeventsContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowLogevents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowLogevents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowLogevents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalinfoContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public ShowGlobalinfoContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalinfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalinfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGlobalinfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrWarnContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrWarnContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCountErrWarn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCountErrWarn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCountErrWarn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public ShowGrantsContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends Show_statementContext {
		public Decimal_literalContext offset;
		public Decimal_literalContext row_count;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public List<Show_profile_typeContext> show_profile_type() {
			return getRuleContexts(Show_profile_typeContext.class);
		}
		public Show_profile_typeContext show_profile_type(int i) {
			return getRuleContext(Show_profile_typeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public ShowProfileContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends Show_statementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_filterContext show_filter() {
			return getRuleContext(Show_filterContext.class,0);
		}
		public ShowColumnsContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrWarnContext extends Show_statementContext {
		public Decimal_literalContext offset;
		public Decimal_literalContext row_count;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public ShowErrWarnContext(Show_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowErrWarn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowErrWarn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowErrWarn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_statementContext show_statement() throws RecognitionException {
		Show_statementContext _localctx = new Show_statementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_show_statement);
		int _la;
		try {
			setState(4790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
			case 1:
				_localctx = new ShowMasterlogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4598);
				match(SHOW);
				setState(4599);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4600);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogeventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4601);
				match(SHOW);
				setState(4602);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4603);
				match(EVENTS);
				setState(4606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(4604);
					match(IN);
					setState(4605);
					match(STRING_LITERAL);
					}
				}

				setState(4610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(4608);
					match(FROM);
					setState(4609);
					((ShowLogeventsContext)_localctx).from_pos = decimal_literal();
					}
				}

				setState(4619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(4612);
					match(LIMIT);
					setState(4616);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
					case 1:
						{
						setState(4613);
						((ShowLogeventsContext)_localctx).offset = decimal_literal();
						setState(4614);
						match(COMMA);
						}
						break;
					}
					setState(4618);
					((ShowLogeventsContext)_localctx).row_count = decimal_literal();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjWithFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4621);
				match(SHOW);
				setState(4635);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(4622);
					match(CHARACTER);
					setState(4623);
					match(SET);
					}
					break;
				case COLLATION:
					{
					setState(4624);
					match(COLLATION);
					}
					break;
				case DATABASES:
					{
					setState(4625);
					match(DATABASES);
					}
					break;
				case SCHEMAS:
					{
					setState(4626);
					match(SCHEMAS);
					}
					break;
				case FUNCTION:
					{
					setState(4627);
					match(FUNCTION);
					setState(4628);
					match(STATUS);
					}
					break;
				case PROCEDURE:
					{
					setState(4629);
					match(PROCEDURE);
					setState(4630);
					match(STATUS);
					}
					break;
				case GLOBAL:
				case SESSION:
				case STATUS:
				case VARIABLES:
					{
					setState(4632);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==GLOBAL || _la==SESSION) {
						{
						setState(4631);
						_la = _input.LA(1);
						if ( !(_la==GLOBAL || _la==SESSION) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4634);
					_la = _input.LA(1);
					if ( !(_la==STATUS || _la==VARIABLES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4637);
					show_filter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4640);
				match(SHOW);
				setState(4642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4641);
					match(FULL);
					}
				}

				setState(4644);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4645);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4646);
				table_name();
				setState(4649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4647);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4648);
					id_();
					}
				}

				setState(4652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4651);
					show_filter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4654);
				match(SHOW);
				setState(4655);
				match(CREATE);
				setState(4656);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4657);
					if_not_exists();
					}
				}

				setState(4660);
				id_();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullidobjContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4661);
				match(SHOW);
				setState(4662);
				match(CREATE);
				setState(4663);
				_la = _input.LA(1);
				if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (PROCEDURE - 112)) | (1L << (TABLE - 112)) | (1L << (TRIGGER - 112)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4664);
				full_id();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4665);
				match(SHOW);
				setState(4666);
				match(CREATE);
				setState(4667);
				match(USER);
				setState(4668);
				user_name();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4669);
				match(SHOW);
				setState(4670);
				match(ENGINE);
				setState(4671);
				engine_name();
				setState(4672);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalinfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4674);
				match(SHOW);
				setState(4692);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ENGINES:
				case STORAGE:
					{
					setState(4676);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STORAGE) {
						{
						setState(4675);
						match(STORAGE);
						}
					}

					setState(4678);
					match(ENGINES);
					}
					break;
				case MASTER:
					{
					setState(4679);
					match(MASTER);
					setState(4680);
					match(STATUS);
					}
					break;
				case PLUGINS:
					{
					setState(4681);
					match(PLUGINS);
					}
					break;
				case PRIVILEGES:
					{
					setState(4682);
					match(PRIVILEGES);
					}
					break;
				case FULL:
				case PROCESSLIST:
					{
					setState(4684);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FULL) {
						{
						setState(4683);
						match(FULL);
						}
					}

					setState(4686);
					match(PROCESSLIST);
					}
					break;
				case PROFILES:
					{
					setState(4687);
					match(PROFILES);
					}
					break;
				case SLAVE:
					{
					setState(4688);
					match(SLAVE);
					setState(4689);
					match(HOSTS);
					}
					break;
				case AUTHORS:
					{
					setState(4690);
					match(AUTHORS);
					}
					break;
				case CONTRIBUTORS:
					{
					setState(4691);
					match(CONTRIBUTORS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				_localctx = new ShowErrWarnContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4694);
				match(SHOW);
				setState(4695);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				{
				setState(4696);
				match(LIMIT);
				setState(4700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
				case 1:
					{
					setState(4697);
					((ShowErrWarnContext)_localctx).offset = decimal_literal();
					setState(4698);
					match(COMMA);
					}
					break;
				}
				setState(4702);
				((ShowErrWarnContext)_localctx).row_count = decimal_literal();
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrWarnContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(4703);
				match(SHOW);
				setState(4704);
				match(COUNT);
				setState(4705);
				match(LR_BRACKET);
				setState(4706);
				match(STAR);
				setState(4707);
				match(RR_BRACKET);
				setState(4708);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowFromschemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(4709);
				match(SHOW);
				setState(4718);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EVENTS:
					{
					setState(4710);
					match(EVENTS);
					}
					break;
				case TABLE:
					{
					setState(4711);
					match(TABLE);
					setState(4712);
					match(STATUS);
					}
					break;
				case FULL:
				case TABLES:
					{
					setState(4714);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FULL) {
						{
						setState(4713);
						match(FULL);
						}
					}

					setState(4716);
					match(TABLES);
					}
					break;
				case TRIGGERS:
					{
					setState(4717);
					match(TRIGGERS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4720);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4721);
					id_();
					}
				}

				setState(4725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4724);
					show_filter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutinecodeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(4727);
				match(SHOW);
				setState(4728);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4729);
				match(CODE);
				setState(4730);
				full_id();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(4731);
				match(SHOW);
				setState(4732);
				match(GRANTS);
				setState(4735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4733);
					match(FOR);
					setState(4734);
					user_name();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(4737);
				match(SHOW);
				setState(4738);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4739);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4740);
				table_name();
				setState(4743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4741);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4742);
					id_();
					}
				}

				setState(4747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4745);
					match(WHERE);
					setState(4746);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpentablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(4749);
				match(SHOW);
				setState(4750);
				match(OPEN);
				setState(4751);
				match(TABLES);
				setState(4754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4752);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4753);
					id_();
					}
				}

				setState(4757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4756);
					show_filter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(4759);
				match(SHOW);
				setState(4760);
				match(PROFILE);
				setState(4761);
				show_profile_type();
				setState(4766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4762);
					match(COMMA);
					setState(4763);
					show_profile_type();
					}
					}
					setState(4768);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4769);
					match(FOR);
					setState(4770);
					match(QUERY);
					setState(4771);
					decimal_literal();
					}
				}

				{
				setState(4774);
				match(LIMIT);
				setState(4778);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
				case 1:
					{
					setState(4775);
					((ShowProfileContext)_localctx).offset = decimal_literal();
					setState(4776);
					match(COMMA);
					}
					break;
				}
				setState(4780);
				((ShowProfileContext)_localctx).row_count = decimal_literal();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlavestatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(4782);
				match(SHOW);
				setState(4783);
				match(SLAVE);
				setState(4784);
				match(STATUS);
				setState(4788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4785);
					match(FOR);
					setState(4786);
					match(CHANNEL);
					setState(4787);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_clauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public Variable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVariable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVariable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVariable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_clauseContext variable_clause() throws RecognitionException {
		Variable_clauseContext _localctx = new Variable_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_variable_clause);
		int _la;
		try {
			setState(4802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4792);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4793);
				match(GLOBAL_ID);
				}
				break;
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
				case 1:
					{
					setState(4796);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(4794);
						match(AT_SIGN);
						setState(4795);
						match(AT_SIGN);
						}
					}

					setState(4798);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4801);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_filterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Show_filterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_filter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShow_filter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShow_filter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShow_filter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_filterContext show_filter() throws RecognitionException {
		Show_filterContext _localctx = new Show_filterContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_show_filter);
		try {
			setState(4808);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4804);
				match(LIKE);
				setState(4805);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4806);
				match(WHERE);
				setState(4807);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_profile_typeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public Show_profile_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_profile_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShow_profile_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShow_profile_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShow_profile_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_profile_typeContext show_profile_type() throws RecognitionException {
		Show_profile_typeContext _localctx = new Show_profile_typeContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_show_profile_type);
		try {
			setState(4822);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4810);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4811);
				match(BLOCK);
				setState(4812);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4813);
				match(CONTEXT);
				setState(4814);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(4815);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(4816);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(4817);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4818);
				match(PAGE);
				setState(4819);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4820);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(4821);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binlog_statementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Binlog_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlog_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinlog_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinlog_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinlog_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Binlog_statementContext binlog_statement() throws RecognitionException {
		Binlog_statementContext _localctx = new Binlog_statementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_binlog_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4824);
			match(BINLOG);
			setState(4825);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cache_index_statementContext extends ParserRuleContext {
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public List<Tbl_index_listContext> tbl_index_list() {
			return getRuleContexts(Tbl_index_listContext.class);
		}
		public Tbl_index_listContext tbl_index_list(int i) {
			return getRuleContext(Tbl_index_listContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public Cache_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cache_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCache_index_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCache_index_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCache_index_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cache_index_statementContext cache_index_statement() throws RecognitionException {
		Cache_index_statementContext _localctx = new Cache_index_statementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_cache_index_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4827);
			match(CACHE);
			setState(4828);
			match(INDEX);
			setState(4829);
			tbl_index_list();
			setState(4834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4830);
				match(COMMA);
				setState(4831);
				tbl_index_list();
				}
				}
				setState(4836);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4837);
				match(PARTITION);
				setState(4838);
				match(LR_BRACKET);
				setState(4841);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(4839);
					id_list();
					}
					break;
				case ALL:
					{
					setState(4840);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4843);
				match(RR_BRACKET);
				}
			}

			setState(4846);
			match(IN);
			setState(4847);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flush_statementContext extends ParserRuleContext {
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public List<Flush_optionContext> flush_option() {
			return getRuleContexts(Flush_optionContext.class);
		}
		public Flush_optionContext flush_option(int i) {
			return getRuleContext(Flush_optionContext.class,i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public Flush_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flush_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlush_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlush_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFlush_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flush_statementContext flush_statement() throws RecognitionException {
		Flush_statementContext _localctx = new Flush_statementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_flush_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4849);
			match(FLUSH);
			setState(4851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4850);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4853);
			flush_option();
			setState(4858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4854);
				match(COMMA);
				setState(4855);
				flush_option();
				}
				}
				setState(4860);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_statementContext extends ParserRuleContext {
		public TerminalNode KILL() { return getToken(MySqlParser.KILL, 0); }
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public Kill_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKill_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKill_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKill_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Kill_statementContext kill_statement() throws RecognitionException {
		Kill_statementContext _localctx = new Kill_statementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_kill_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4861);
			match(KILL);
			setState(4863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(4862);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4866); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4865);
				decimal_literal();
				}
				}
				setState(4868); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 948)) & ~0x3f) == 0 && ((1L << (_la - 948)) & ((1L << (ZERO_DECIMAL - 948)) | (1L << (ONE_DECIMAL - 948)) | (1L << (TWO_DECIMAL - 948)) | (1L << (DECIMAL_LITERAL - 948)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_index_into_cacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public List<Load_tbl_index_listContext> load_tbl_index_list() {
			return getRuleContexts(Load_tbl_index_listContext.class);
		}
		public Load_tbl_index_listContext load_tbl_index_list(int i) {
			return getRuleContext(Load_tbl_index_listContext.class,i);
		}
		public Load_index_into_cacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_index_into_cache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoad_index_into_cache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoad_index_into_cache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoad_index_into_cache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Load_index_into_cacheContext load_index_into_cache() throws RecognitionException {
		Load_index_into_cacheContext _localctx = new Load_index_into_cacheContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_load_index_into_cache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4870);
			match(LOAD);
			setState(4871);
			match(INDEX);
			setState(4872);
			match(INTO);
			setState(4873);
			match(CACHE);
			setState(4874);
			load_tbl_index_list();
			setState(4879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4875);
				match(COMMA);
				setState(4876);
				load_tbl_index_list();
				}
				}
				setState(4881);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reset_statementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public Reset_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReset_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReset_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReset_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reset_statementContext reset_statement() throws RecognitionException {
		Reset_statementContext _localctx = new Reset_statementContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_reset_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4882);
			match(RESET);
			setState(4883);
			match(QUERY);
			setState(4884);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shutdown_statementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdown_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShutdown_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShutdown_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShutdown_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Shutdown_statementContext shutdown_statement() throws RecognitionException {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_shutdown_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4886);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tbl_index_listContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Tbl_index_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tbl_index_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTbl_index_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTbl_index_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTbl_index_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tbl_index_listContext tbl_index_list() throws RecognitionException {
		Tbl_index_listContext _localctx = new Tbl_index_listContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_tbl_index_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4888);
			table_name();
			setState(4896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(4890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(4889);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4892);
				match(LR_BRACKET);
				setState(4893);
				id_list();
				setState(4894);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flush_optionContext extends ParserRuleContext {
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public Channel_optionContext channel_option() {
			return getRuleContext(Channel_optionContext.class,0);
		}
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public Flush_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flush_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlush_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlush_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFlush_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flush_optionContext flush_option() throws RecognitionException {
		Flush_optionContext _localctx = new Flush_optionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_flush_option);
		int _la;
		try {
			setState(4930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4898);
				match(DES_KEY_FILE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4899);
				match(HOSTS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENGINE - 308)) | (1L << (ERROR - 308)) | (1L << (GENERAL - 308)))) != 0) || _la==RELAY || _la==SLOW) {
					{
					setState(4900);
					_la = _input.LA(1);
					if ( !(_la==BINARY || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENGINE - 308)) | (1L << (ERROR - 308)) | (1L << (GENERAL - 308)))) != 0) || _la==RELAY || _la==SLOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4903);
				match(LOGS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4904);
				match(RELAY);
				setState(4905);
				match(LOGS);
				setState(4907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4906);
					channel_option();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4909);
				match(OPTIMIZER_COSTS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4910);
				match(PRIVILEGES);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4911);
				match(QUERY);
				setState(4912);
				match(CACHE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4913);
				match(STATUS);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4914);
				match(USER_RESOURCES);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4915);
				match(TABLES);
				setState(4919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4916);
					match(WITH);
					setState(4917);
					match(READ);
					setState(4918);
					match(LOCK);
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4921);
				match(TABLES);
				setState(4922);
				table_list();
				setState(4928);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(4923);
					match(WITH);
					setState(4924);
					match(READ);
					setState(4925);
					match(LOCK);
					}
					break;
				case FOR:
					{
					setState(4926);
					match(FOR);
					setState(4927);
					match(EXPORT);
					}
					break;
				case EOF:
				case MINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_tbl_index_listContext extends ParserRuleContext {
		public Id_listContext partition_list;
		public Id_listContext index_list;
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public List<Id_listContext> id_list() {
			return getRuleContexts(Id_listContext.class);
		}
		public Id_listContext id_list(int i) {
			return getRuleContext(Id_listContext.class,i);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public Load_tbl_index_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_tbl_index_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoad_tbl_index_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoad_tbl_index_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoad_tbl_index_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Load_tbl_index_listContext load_tbl_index_list() throws RecognitionException {
		Load_tbl_index_listContext _localctx = new Load_tbl_index_listContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_load_tbl_index_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4932);
			table_name();
			setState(4940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4933);
				match(PARTITION);
				setState(4934);
				match(LR_BRACKET);
				setState(4937);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(4935);
					((Load_tbl_index_listContext)_localctx).partition_list = id_list();
					}
					break;
				case ALL:
					{
					setState(4936);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4939);
				match(RR_BRACKET);
				}
			}

			setState(4949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(4943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(4942);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4945);
				match(LR_BRACKET);
				setState(4946);
				((Load_tbl_index_listContext)_localctx).index_list = id_list();
				setState(4947);
				match(RR_BRACKET);
				}
			}

			setState(4953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(4951);
				match(IGNORE);
				setState(4952);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_describe_statementContext extends ParserRuleContext {
		public Id_Context colname;
		public Token col_wildcard;
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Simple_describe_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_describe_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimple_describe_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimple_describe_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimple_describe_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_describe_statementContext simple_describe_statement() throws RecognitionException {
		Simple_describe_statementContext _localctx = new Simple_describe_statementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_simple_describe_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4955);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4956);
			table_name();
			setState(4959);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(4957);
				((Simple_describe_statementContext)_localctx).colname = id_();
				}
				break;
			case STRING_LITERAL:
				{
				setState(4958);
				((Simple_describe_statementContext)_localctx).col_wildcard = match(STRING_LITERAL);
				}
				break;
			case EOF:
			case MINUS:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_describe_statementContext extends ParserRuleContext {
		public Describe_object_clauseContext describe_object_clause() {
			return getRuleContext(Describe_object_clauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public Full_describe_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_describe_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFull_describe_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFull_describe_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFull_describe_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_describe_statementContext full_describe_statement() throws RecognitionException {
		Full_describe_statementContext _localctx = new Full_describe_statementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_full_describe_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4961);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4967);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXTENDED:
				{
				setState(4962);
				match(EXTENDED);
				}
				break;
			case PARTITIONS:
				{
				setState(4963);
				match(PARTITIONS);
				}
				break;
			case FORMAT:
				{
				setState(4964);
				match(FORMAT);
				setState(4965);
				match(EQUAL_SYMBOL);
				setState(4966);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DELETE:
			case FOR:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				break;
			default:
				break;
			}
			setState(4969);
			describe_object_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Help_statementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Help_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_help_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHelp_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHelp_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHelp_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Help_statementContext help_statement() throws RecognitionException {
		Help_statementContext _localctx = new Help_statementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_help_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4971);
			match(HELP);
			setState(4972);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUse_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUse_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUse_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_use_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4974);
			match(USE);
			setState(4975);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Describe_object_clauseContext extends ParserRuleContext {
		public Describe_object_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_object_clause; }
	 
		public Describe_object_clauseContext() { }
		public void copyFrom(Describe_object_clauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ConnectionDescObjContext extends Describe_object_clauseContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public ConnectionDescObjContext(Describe_object_clauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConnectionDescObj(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConnectionDescObj(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConnectionDescObj(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescstmtDescObjContext extends Describe_object_clauseContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Replace_statementContext replace_statement() {
			return getRuleContext(Replace_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public DescstmtDescObjContext(Describe_object_clauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescstmtDescObj(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescstmtDescObj(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescstmtDescObj(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_object_clauseContext describe_object_clause() throws RecognitionException {
		Describe_object_clauseContext _localctx = new Describe_object_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_describe_object_clause);
		try {
			setState(4987);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescstmtDescObjContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4982);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(4977);
					select_statement();
					}
					break;
				case DELETE:
					{
					setState(4978);
					delete_statement();
					}
					break;
				case INSERT:
					{
					setState(4979);
					insert_statement();
					}
					break;
				case REPLACE:
					{
					setState(4980);
					replace_statement();
					}
					break;
				case UPDATE:
					{
					setState(4981);
					update_statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new ConnectionDescObjContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4984);
				match(FOR);
				setState(4985);
				match(CONNECTION);
				setState(4986);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4989);
			id_();
			setState(4993);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				{
				setState(4990);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(4991);
				match(DOT);
				setState(4992);
				id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_idContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public Full_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFull_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFull_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFull_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_idContext full_id() throws RecognitionException {
		Full_idContext _localctx = new Full_idContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_full_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4995);
			id_();
			setState(4999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(4996);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(4997);
				match(DOT);
				setState(4998);
				id_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<Dot_ext_idContext> dot_ext_id() {
			return getRuleContexts(Dot_ext_idContext.class);
		}
		public Dot_ext_idContext dot_ext_id(int i) {
			return getRuleContext(Dot_ext_idContext.class,i);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFull_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFull_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFull_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_full_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5001);
			id_();
			setState(5006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
			case 1:
				{
				setState(5002);
				dot_ext_id();
				setState(5004);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(5003);
					dot_ext_id();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_col_nameContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public Index_col_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_col_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndex_col_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndex_col_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndex_col_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_col_nameContext index_col_name() throws RecognitionException {
		Index_col_nameContext _localctx = new Index_col_nameContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_index_col_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5008);
			id_();
			setState(5013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5009);
				match(LR_BRACKET);
				setState(5010);
				decimal_literal();
				setState(5011);
				match(RR_BRACKET);
				}
			}

			setState(5016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5015);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_nameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(MySqlParser.STRING_USER_NAME, 0); }
		public User_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUser_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUser_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUser_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_nameContext user_name() throws RecognitionException {
		User_nameContext _localctx = new User_nameContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_user_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5018);
			match(STRING_USER_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mysql_variableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public Mysql_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysql_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysql_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysql_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysql_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mysql_variableContext mysql_variable() throws RecognitionException {
		Mysql_variableContext _localctx = new Mysql_variableContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_mysql_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5020);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Charset_nameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public Charset_name_baseContext charset_name_base() {
			return getRuleContext(Charset_name_baseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public Charset_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharset_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharset_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharset_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Charset_nameContext charset_name() throws RecognitionException {
		Charset_nameContext _localctx = new Charset_nameContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_charset_name);
		try {
			setState(5026);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5022);
				match(BINARY);
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				enterOuterAlt(_localctx, 2);
				{
				setState(5023);
				charset_name_base();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5024);
				match(STRING_LITERAL);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(5025);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_nameContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collation_nameContext collation_name() throws RecognitionException {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_collation_name);
		try {
			setState(5030);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5028);
				id_();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5029);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Engine_nameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFOMANCE_SCHEMA() { return getToken(MySqlParser.PERFOMANCE_SCHEMA, 0); }
		public Engine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEngine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Engine_nameContext engine_name() throws RecognitionException {
		Engine_nameContext _localctx = new Engine_nameContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_engine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5032);
			_la = _input.LA(1);
			if ( !(((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (ARCHIVE - 606)) | (1L << (BLACKHOLE - 606)) | (1L << (CSV - 606)) | (1L << (FEDERATED - 606)) | (1L << (INNODB - 606)) | (1L << (MEMORY - 606)) | (1L << (MRG_MYISAM - 606)) | (1L << (MYISAM - 606)) | (1L << (NDB - 606)) | (1L << (NDBCLUSTER - 606)) | (1L << (PERFOMANCE_SCHEMA - 606)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Uuid_setContext extends ParserRuleContext {
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public Uuid_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuid_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUuid_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUuid_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUuid_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Uuid_setContext uuid_set() throws RecognitionException {
		Uuid_setContext _localctx = new Uuid_setContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_uuid_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5034);
			decimal_literal();
			setState(5035);
			match(MINUS);
			setState(5036);
			decimal_literal();
			setState(5037);
			match(MINUS);
			setState(5038);
			decimal_literal();
			setState(5039);
			match(MINUS);
			setState(5040);
			decimal_literal();
			setState(5041);
			match(MINUS);
			setState(5042);
			decimal_literal();
			setState(5048); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5043);
				match(COLON_SYMB);
				setState(5044);
				decimal_literal();
				setState(5045);
				match(MINUS);
				setState(5046);
				decimal_literal();
				}
				}
				setState(5050); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public Xid_string_idContext xid_gtrid;
		public Xid_string_idContext xid_bqual;
		public Decimal_literalContext xid_formatID;
		public List<Xid_string_idContext> xid_string_id() {
			return getRuleContexts(Xid_string_idContext.class);
		}
		public Xid_string_idContext xid_string_id(int i) {
			return getRuleContext(Xid_string_idContext.class,i);
		}
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5052);
			((XidContext)_localctx).xid_gtrid = xid_string_id();
			setState(5059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5053);
				match(COMMA);
				setState(5054);
				((XidContext)_localctx).xid_bqual = xid_string_id();
				setState(5057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5055);
					match(COMMA);
					setState(5056);
					((XidContext)_localctx).xid_formatID = decimal_literal();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xid_string_idContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public Xid_string_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid_string_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXid_string_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXid_string_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXid_string_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xid_string_idContext xid_string_id() throws RecognitionException {
		Xid_string_idContext _localctx = new Xid_string_idContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_xid_string_id);
		int _la;
		try {
			setState(5068);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5061);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5062);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5064); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5063);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(5066); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_pluginContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Auth_pluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_plugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuth_plugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuth_plugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAuth_plugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_pluginContext auth_plugin() throws RecognitionException {
		Auth_pluginContext _localctx = new Auth_pluginContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_auth_plugin);
		try {
			setState(5072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5070);
				id_();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5071);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_Context extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public Id_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterId_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitId_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitId_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_Context id_() throws RecognitionException {
		Id_Context _localctx = new Id_Context(_ctx, getState());
		enterRule(_localctx, 476, RULE_id_);
		try {
			setState(5077);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACTION:
			case AFTER:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTRIBUTORS:
			case COPY:
			case DATA:
			case DATAFILE:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FIELDS:
			case FIRST:
			case FIXED:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IMPORT:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INVOKER:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONLINE:
			case ONLY:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PLUGINS:
			case PORT:
			case PRESERVE:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATION:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STORAGE:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WORK:
			case WRAPPER:
			case X509:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5074);
				simple_id();
				}
				break;
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5075);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(5076);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public Charset_name_baseContext charset_name_base() {
			return getRuleContext(Charset_name_baseContext.class,0);
		}
		public Transaction_level_baseContext transaction_level_base() {
			return getRuleContext(Transaction_level_baseContext.class,0);
		}
		public Engine_nameContext engine_name() {
			return getRuleContext(Engine_nameContext.class,0);
		}
		public Privileges_baseContext privileges_base() {
			return getRuleContext(Privileges_baseContext.class,0);
		}
		public Interval_type_baseContext interval_type_base() {
			return getRuleContext(Interval_type_baseContext.class,0);
		}
		public Data_type_baseContext data_type_base() {
			return getRuleContext(Data_type_baseContext.class,0);
		}
		public Keywords_can_be_idContext keywords_can_be_id() {
			return getRuleContext(Keywords_can_be_idContext.class,0);
		}
		public Function_name_baseContext function_name_base() {
			return getRuleContext(Function_name_baseContext.class,0);
		}
		public Spatial_data_typeContext spatial_data_type() {
			return getRuleContext(Spatial_data_typeContext.class,0);
		}
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimple_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimple_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimple_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_simple_id);
		try {
			setState(5089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5079);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5080);
				charset_name_base();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5081);
				transaction_level_base();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5082);
				engine_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5083);
				privileges_base();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5084);
				interval_type_base();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5085);
				data_type_base();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5086);
				keywords_can_be_id();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5087);
				function_name_base();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5088);
				spatial_data_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dot_ext_idContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Dot_ext_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dot_ext_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDot_ext_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDot_ext_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDot_ext_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dot_ext_idContext dot_ext_id() throws RecognitionException {
		Dot_ext_idContext _localctx = new Dot_ext_idContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_dot_ext_id);
		try {
			setState(5094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5091);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5092);
				match(DOT);
				setState(5093);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decimal_literalContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public Decimal_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimal_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimal_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimal_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimal_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decimal_literalContext decimal_literal() throws RecognitionException {
		Decimal_literalContext _localctx = new Decimal_literalContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_decimal_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5096);
			_la = _input.LA(1);
			if ( !(((((_la - 948)) & ~0x3f) == 0 && ((1L << (_la - 948)) & ((1L << (ZERO_DECIMAL - 948)) | (1L << (ONE_DECIMAL - 948)) | (1L << (TWO_DECIMAL - 948)) | (1L << (DECIMAL_LITERAL - 948)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filesize_literalContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public Filesize_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filesize_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFilesize_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFilesize_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFilesize_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Filesize_literalContext filesize_literal() throws RecognitionException {
		Filesize_literalContext _localctx = new Filesize_literalContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_filesize_literal);
		try {
			setState(5100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5098);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5099);
				decimal_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_literalContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public String_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterString_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitString_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitString_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_literalContext string_literal() throws RecognitionException {
		String_literalContext _localctx = new String_literalContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_string_literal);
		int _la;
		try {
			int _alt;
			setState(5125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5107);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5103);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5102);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5105);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5106);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5110); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5109);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5112); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,751,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5119);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5115);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5114);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5117);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5118);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5123);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
				case 1:
					{
					setState(5121);
					match(COLLATE);
					setState(5122);
					collation_name();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_literalContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBoolean_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBoolean_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBoolean_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Boolean_literalContext boolean_literal() throws RecognitionException {
		Boolean_literalContext _localctx = new Boolean_literalContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_boolean_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5127);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hexadecimal_literalContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public Hexadecimal_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimal_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimal_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimal_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHexadecimal_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hexadecimal_literalContext hexadecimal_literal() throws RecognitionException {
		Hexadecimal_literalContext _localctx = new Hexadecimal_literalContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_hexadecimal_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(5129);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(5132);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NOTNULL() { return getToken(MySqlParser.NOTNULL, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNull_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNull_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNull_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_null_notnull);
		int _la;
		try {
			setState(5136);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTNULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5134);
				match(NOTNULL);
				}
				break;
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5135);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public String_literalContext string_literal() {
			return getRuleContext(String_literalContext.class,0);
		}
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public Hexadecimal_literalContext hexadecimal_literal() {
			return getRuleContext(Hexadecimal_literalContext.class,0);
		}
		public Boolean_literalContext boolean_literal() {
			return getRuleContext(Boolean_literalContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NOTNULL() { return getToken(MySqlParser.NOTNULL, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_constant);
		int _la;
		try {
			setState(5146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5138);
				string_literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5139);
				decimal_literal();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5140);
				hexadecimal_literal();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5141);
				boolean_literal();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5142);
				match(REAL_LITERAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5143);
				match(BIT_STRING);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5144);
				match(NOTNULL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5145);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
	 
		public Data_typeContext() { }
		public void copyFrom(Data_typeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDatatypeContext extends Data_typeContext {
		public Spatial_data_typeContext spatial_data_type() {
			return getRuleContext(Spatial_data_typeContext.class,0);
		}
		public SpatialDatatypeContext(Data_typeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpatialDatatype(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDatatypeContext extends Data_typeContext {
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public Length_one_dimensionContext length_one_dimension() {
			return getRuleContext(Length_one_dimensionContext.class,0);
		}
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySqlParser.ZEROFILL, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public Length_two_dimensionContext length_two_dimension() {
			return getRuleContext(Length_two_dimensionContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public Length_two_optional_dimensionContext length_two_optional_dimension() {
			return getRuleContext(Length_two_optional_dimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public DimensionDatatypeContext(Data_typeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDimensionDatatype(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectCharDatatypeContext extends Data_typeContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public CollectCharDatatypeContext(Data_typeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectCharDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectCharDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectCharDatatype(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharDatatypeContext extends Data_typeContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public Length_one_dimensionContext length_one_dimension() {
			return getRuleContext(Length_one_dimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public CharDatatypeContext(Data_typeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharDatatype(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDatatypeContext extends Data_typeContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public SimpleDatatypeContext(Data_typeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_data_type);
		int _la;
		try {
			setState(5223);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR:
			case VARCHAR:
			case TINYTEXT:
			case TEXT:
			case MEDIUMTEXT:
			case LONGTEXT:
				_localctx = new CharDatatypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5148);
				_la = _input.LA(1);
				if ( !(((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (CHAR - 186)) | (1L << (VARCHAR - 186)) | (1L << (TINYTEXT - 186)) | (1L << (TEXT - 186)) | (1L << (MEDIUMTEXT - 186)) | (1L << (LONGTEXT - 186)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5150);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
				case 1:
					{
					setState(5149);
					length_one_dimension();
					}
					break;
				}
				setState(5153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5152);
					match(BINARY);
					}
				}

				setState(5158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(5155);
					match(CHARACTER);
					setState(5156);
					match(SET);
					setState(5157);
					charset_name();
					}
				}

				setState(5162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5160);
					match(COLLATE);
					setState(5161);
					collation_name();
					}
				}

				}
				break;
			case TINYINT:
			case SMALLINT:
			case MEDIUMINT:
			case INT:
			case INTEGER:
			case BIGINT:
				_localctx = new DimensionDatatypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5164);
				_la = _input.LA(1);
				if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (TINYINT - 170)) | (1L << (SMALLINT - 170)) | (1L << (MEDIUMINT - 170)) | (1L << (INT - 170)) | (1L << (INTEGER - 170)) | (1L << (BIGINT - 170)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5166);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(5165);
					length_one_dimension();
					}
					break;
				}
				setState(5169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5168);
					match(UNSIGNED);
					}
				}

				setState(5172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5171);
					match(ZEROFILL);
					}
				}

				}
				break;
			case REAL:
			case DOUBLE:
			case FLOAT:
				_localctx = new DimensionDatatypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5174);
				_la = _input.LA(1);
				if ( !(((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (REAL - 176)) | (1L << (DOUBLE - 176)) | (1L << (FLOAT - 176)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5176);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
				case 1:
					{
					setState(5175);
					length_two_dimension();
					}
					break;
				}
				setState(5179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5178);
					match(UNSIGNED);
					}
				}

				setState(5182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5181);
					match(ZEROFILL);
					}
				}

				}
				break;
			case DECIMAL:
			case NUMERIC:
				_localctx = new DimensionDatatypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5184);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==NUMERIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5186);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
				case 1:
					{
					setState(5185);
					length_two_optional_dimension();
					}
					break;
				}
				setState(5189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5188);
					match(UNSIGNED);
					}
				}

				setState(5192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5191);
					match(ZEROFILL);
					}
				}

				}
				break;
			case DATE:
			case YEAR:
			case TINYBLOB:
			case BLOB:
			case MEDIUMBLOB:
			case LONGBLOB:
				_localctx = new SimpleDatatypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5194);
				_la = _input.LA(1);
				if ( !(((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (YEAR - 181)) | (1L << (TINYBLOB - 181)) | (1L << (BLOB - 181)) | (1L << (MEDIUMBLOB - 181)) | (1L << (LONGBLOB - 181)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case BINARY:
			case VARBINARY:
			case BIT:
				_localctx = new DimensionDatatypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5195);
				_la = _input.LA(1);
				if ( !(((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (TIME - 182)) | (1L << (TIMESTAMP - 182)) | (1L << (DATETIME - 182)) | (1L << (BINARY - 182)) | (1L << (VARBINARY - 182)))) != 0) || _la==BIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
				case 1:
					{
					setState(5196);
					length_one_dimension();
					}
					break;
				}
				}
				break;
			case SET:
			case ENUM:
				_localctx = new CollectCharDatatypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5199);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5200);
				match(LR_BRACKET);
				setState(5201);
				match(STRING_LITERAL);
				setState(5206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5202);
					match(COMMA);
					setState(5203);
					match(STRING_LITERAL);
					}
					}
					setState(5208);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5209);
				match(RR_BRACKET);
				setState(5211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5210);
					match(BINARY);
					}
				}

				setState(5216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(5213);
					match(CHARACTER);
					setState(5214);
					match(SET);
					setState(5215);
					charset_name();
					}
				}

				setState(5220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5218);
					match(COLLATE);
					setState(5219);
					collation_name();
					}
				}

				}
				break;
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
				_localctx = new SpatialDatatypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5222);
				spatial_data_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_type_to_convertContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public Length_one_dimensionContext length_one_dimension() {
			return getRuleContext(Length_one_dimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public Length_two_dimensionContext length_two_dimension() {
			return getRuleContext(Length_two_dimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public Data_type_to_convertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type_to_convert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterData_type_to_convert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitData_type_to_convert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitData_type_to_convert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_type_to_convertContext data_type_to_convert() throws RecognitionException {
		Data_type_to_convertContext _localctx = new Data_type_to_convertContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_data_type_to_convert);
		int _la;
		try {
			setState(5249);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5225);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5226);
					length_one_dimension();
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5229);
				match(CHAR);
				setState(5231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5230);
					length_one_dimension();
					}
				}

				setState(5236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(5233);
					match(CHARACTER);
					setState(5234);
					match(SET);
					setState(5235);
					charset_name();
					}
				}

				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5238);
				match(DATE);
				}
				break;
			case DATETIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(5239);
				match(DATETIME);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(5240);
				match(TIME);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5241);
				match(DECIMAL);
				setState(5243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5242);
					length_two_dimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				enterOuterAlt(_localctx, 7);
				{
				setState(5245);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(5246);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Spatial_data_typeContext extends ParserRuleContext {
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public Spatial_data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatial_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatial_data_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatial_data_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpatial_data_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Spatial_data_typeContext spatial_data_type() throws RecognitionException {
		Spatial_data_typeContext _localctx = new Spatial_data_typeContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_spatial_data_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5251);
			_la = _input.LA(1);
			if ( !(((((_la - 621)) & ~0x3f) == 0 && ((1L << (_la - 621)) & ((1L << (GEOMETRYCOLLECTION - 621)) | (1L << (LINESTRING - 621)) | (1L << (MULTILINESTRING - 621)) | (1L << (MULTIPOINT - 621)) | (1L << (MULTIPOLYGON - 621)) | (1L << (POINT - 621)) | (1L << (POLYGON - 621)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Length_one_dimensionContext extends ParserRuleContext {
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public Length_one_dimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length_one_dimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLength_one_dimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLength_one_dimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLength_one_dimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Length_one_dimensionContext length_one_dimension() throws RecognitionException {
		Length_one_dimensionContext _localctx = new Length_one_dimensionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_length_one_dimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5253);
			match(LR_BRACKET);
			setState(5254);
			decimal_literal();
			setState(5255);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Length_two_dimensionContext extends ParserRuleContext {
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public Length_two_dimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length_two_dimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLength_two_dimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLength_two_dimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLength_two_dimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Length_two_dimensionContext length_two_dimension() throws RecognitionException {
		Length_two_dimensionContext _localctx = new Length_two_dimensionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_length_two_dimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5257);
			match(LR_BRACKET);
			setState(5258);
			decimal_literal();
			setState(5259);
			match(COMMA);
			setState(5260);
			decimal_literal();
			setState(5261);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Length_two_optional_dimensionContext extends ParserRuleContext {
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public Length_two_optional_dimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length_two_optional_dimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLength_two_optional_dimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLength_two_optional_dimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLength_two_optional_dimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Length_two_optional_dimensionContext length_two_optional_dimension() throws RecognitionException {
		Length_two_optional_dimensionContext _localctx = new Length_two_optional_dimensionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_length_two_optional_dimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5263);
			match(LR_BRACKET);
			setState(5264);
			decimal_literal();
			setState(5267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5265);
				match(COMMA);
				setState(5266);
				decimal_literal();
				}
			}

			setState(5269);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_listContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Id_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterId_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitId_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitId_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_listContext id_list() throws RecognitionException {
		Id_listContext _localctx = new Id_listContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_id_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5271);
			id_();
			setState(5276);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,785,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5272);
					match(COMMA);
					setState(5273);
					id_();
					}
					} 
				}
				setState(5278);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,785,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_listContext extends ParserRuleContext {
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public Table_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTable_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTable_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTable_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_listContext table_list() throws RecognitionException {
		Table_listContext _localctx = new Table_listContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_table_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5279);
			table_name();
			setState(5284);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,786,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5280);
					match(COMMA);
					setState(5281);
					table_name();
					}
					} 
				}
				setState(5286);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,786,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_pair_listContext extends ParserRuleContext {
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public Table_pair_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_pair_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTable_pair_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTable_pair_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTable_pair_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_pair_listContext table_pair_list() throws RecognitionException {
		Table_pair_listContext _localctx = new Table_pair_listContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_table_pair_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5287);
			match(LR_BRACKET);
			setState(5288);
			table_name();
			setState(5289);
			match(COMMA);
			setState(5290);
			table_name();
			setState(5291);
			match(RR_BRACKET);
			setState(5301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5292);
				match(COMMA);
				setState(5293);
				match(LR_BRACKET);
				setState(5294);
				table_name();
				setState(5295);
				match(COMMA);
				setState(5296);
				table_name();
				setState(5297);
				match(RR_BRACKET);
				}
				}
				setState(5303);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_colname_listContext extends ParserRuleContext {
		public List<Index_col_nameContext> index_col_name() {
			return getRuleContexts(Index_col_nameContext.class);
		}
		public Index_col_nameContext index_col_name(int i) {
			return getRuleContext(Index_col_nameContext.class,i);
		}
		public Index_colname_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_colname_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndex_colname_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndex_colname_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndex_colname_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_colname_listContext index_colname_list() throws RecognitionException {
		Index_colname_listContext _localctx = new Index_colname_listContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_index_colname_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5304);
			match(LR_BRACKET);
			setState(5305);
			index_col_name();
			setState(5310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5306);
				match(COMMA);
				setState(5307);
				index_col_name();
				}
				}
				setState(5312);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5313);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5315);
			expression(0);
			setState(5320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5316);
				match(COMMA);
				setState(5317);
				expression(0);
				}
				}
				setState(5322);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_listContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Constant_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_listContext constant_list() throws RecognitionException {
		Constant_listContext _localctx = new Constant_listContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_constant_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5323);
			constant();
			setState(5328);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5324);
				match(COMMA);
				setState(5325);
				constant();
				}
				}
				setState(5330);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_string_listContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public Simple_string_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_string_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimple_string_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimple_string_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimple_string_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_string_listContext simple_string_list() throws RecognitionException {
		Simple_string_listContext _localctx = new Simple_string_listContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_simple_string_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5331);
			match(STRING_LITERAL);
			setState(5336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5332);
				match(COMMA);
				setState(5333);
				match(STRING_LITERAL);
				}
				}
				setState(5338);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_var_listContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySqlParser.LOCAL_ID, i);
		}
		public User_var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUser_var_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUser_var_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUser_var_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_var_listContext user_var_list() throws RecognitionException {
		User_var_listContext _localctx = new User_var_listContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_user_var_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5339);
			match(LOCAL_ID);
			setState(5344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5340);
				match(COMMA);
				setState(5341);
				match(LOCAL_ID);
				}
				}
				setState(5346);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefault_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefault_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefault_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_default_value);
		try {
			setState(5349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5347);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5348);
				constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_existsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public If_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIf_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIf_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIf_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_existsContext if_exists() throws RecognitionException {
		If_existsContext _localctx = new If_existsContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_if_exists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5351);
			match(IF);
			setState(5352);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_not_existsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public If_not_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_not_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIf_not_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIf_not_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIf_not_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_not_existsContext if_not_exists() throws RecognitionException {
		If_not_existsContext _localctx = new If_not_existsContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_if_not_exists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5354);
			match(IF);
			setState(5355);
			match(NOT);
			setState(5356);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	 
		public Function_callContext() { }
		public void copyFrom(Function_callContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends Function_callContext {
		public Specific_function_callContext specific_function_call() {
			return getRuleContext(Specific_function_callContext.class,0);
		}
		public SpecificFunctionCallContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends Function_callContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Dot_ext_idContext dot_ext_id() {
			return getRuleContext(Dot_ext_idContext.class,0);
		}
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public UdfFunctionCallContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AggregateFunctionCallContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public ScalarFunctionCallContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_function_call);
		int _la;
		try {
			setState(5377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5358);
				specific_function_call();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5359);
				aggregate_windowed_function();
				}
				break;
			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5360);
				scalar_function_name();
				setState(5361);
				match(LR_BRACKET);
				setState(5363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << DEFAULT) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IF - 64)) | (1L << (INTERVAL - 64)) | (1L << (LEFT - 64)) | (1L << (NOTNULL - 64)) | (1L << (NOT - 64)) | (1L << (NULL_LITERAL - 64)) | (1L << (REPLACE - 64)) | (1L << (RIGHT - 64)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (TRUE - 152)) | (1L << (VALUES - 152)) | (1L << (DATE - 152)) | (1L << (TIME - 152)) | (1L << (TIMESTAMP - 152)) | (1L << (DATETIME - 152)) | (1L << (YEAR - 152)) | (1L << (CHAR - 152)) | (1L << (BINARY - 152)) | (1L << (TEXT - 152)) | (1L << (ENUM - 152)) | (1L << (AVG - 152)) | (1L << (BIT_AND - 152)) | (1L << (BIT_OR - 152)) | (1L << (BIT_XOR - 152)) | (1L << (COUNT - 152)) | (1L << (GROUP_CONCAT - 152)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (MAX - 216)) | (1L << (MIN - 216)) | (1L << (STD - 216)) | (1L << (STDDEV - 216)) | (1L << (STDDEV_POP - 216)) | (1L << (STDDEV_SAMP - 216)) | (1L << (SUM - 216)) | (1L << (VAR_POP - 216)) | (1L << (VAR_SAMP - 216)) | (1L << (VARIANCE - 216)) | (1L << (CURRENT_DATE - 216)) | (1L << (CURRENT_TIME - 216)) | (1L << (CURRENT_TIMESTAMP - 216)) | (1L << (LOCALTIME - 216)) | (1L << (CURDATE - 216)) | (1L << (CURTIME - 216)) | (1L << (DATE_ADD - 216)) | (1L << (DATE_SUB - 216)) | (1L << (EXTRACT - 216)) | (1L << (LOCALTIMESTAMP - 216)) | (1L << (NOW - 216)) | (1L << (POSITION - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (SYSDATE - 216)) | (1L << (TRIM - 216)) | (1L << (UTC_DATE - 216)) | (1L << (UTC_TIME - 216)) | (1L << (UTC_TIMESTAMP - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)) | (1L << (COLUMNS - 216)) | (1L << (COLUMN_FORMAT - 216)) | (1L << (COMMENT - 216)) | (1L << (COMMIT - 216)) | (1L << (COMPACT - 216)) | (1L << (COMPLETION - 216)) | (1L << (COMPRESSED - 216)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (CONCURRENT - 281)) | (1L << (CONNECTION - 281)) | (1L << (CONSISTENT - 281)) | (1L << (CONTAINS - 281)) | (1L << (CONTRIBUTORS - 281)) | (1L << (COPY - 281)) | (1L << (DATA - 281)) | (1L << (DATAFILE - 281)) | (1L << (DEFINER - 281)) | (1L << (DELAY_KEY_WRITE - 281)) | (1L << (DIRECTORY - 281)) | (1L << (DISABLE - 281)) | (1L << (DISCARD - 281)) | (1L << (DISK - 281)) | (1L << (DO - 281)) | (1L << (DUMPFILE - 281)) | (1L << (DUPLICATE - 281)) | (1L << (DYNAMIC - 281)) | (1L << (ENABLE - 281)) | (1L << (ENDS - 281)) | (1L << (ENGINE - 281)) | (1L << (ENGINES - 281)) | (1L << (ERRORS - 281)) | (1L << (ESCAPE - 281)) | (1L << (EVEN - 281)) | (1L << (EVENT - 281)) | (1L << (EVENTS - 281)) | (1L << (EVERY - 281)) | (1L << (EXCHANGE - 281)) | (1L << (EXCLUSIVE - 281)) | (1L << (EXPIRE - 281)) | (1L << (EXTENT_SIZE - 281)) | (1L << (FIELDS - 281)) | (1L << (FIRST - 281)) | (1L << (FIXED - 281)) | (1L << (FULL - 281)) | (1L << (FUNCTION - 281)) | (1L << (GLOBAL - 281)) | (1L << (GRANTS - 281)) | (1L << (HASH - 281)) | (1L << (HOST - 281)) | (1L << (IDENTIFIED - 281)))) != 0) || ((((_la - 346)) & ~0x3f) == 0 && ((1L << (_la - 346)) & ((1L << (IMPORT - 346)) | (1L << (INITIAL_SIZE - 346)) | (1L << (INPLACE - 346)) | (1L << (INSERT_METHOD - 346)) | (1L << (INVOKER - 346)) | (1L << (ISOLATION - 346)) | (1L << (ISSUER - 346)) | (1L << (KEY_BLOCK_SIZE - 346)) | (1L << (LANGUAGE - 346)) | (1L << (LAST - 346)) | (1L << (LESS - 346)) | (1L << (LEVEL - 346)) | (1L << (LIST - 346)) | (1L << (LOCAL - 346)) | (1L << (LOGFILE - 346)) | (1L << (LOGS - 346)) | (1L << (MASTER - 346)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 346)) | (1L << (MAX_QUERIES_PER_HOUR - 346)) | (1L << (MAX_ROWS - 346)) | (1L << (MAX_SIZE - 346)) | (1L << (MAX_UPDATES_PER_HOUR - 346)) | (1L << (MAX_USER_CONNECTIONS - 346)) | (1L << (MERGE - 346)) | (1L << (MID - 346)) | (1L << (MIN_ROWS - 346)) | (1L << (MODIFY - 346)) | (1L << (MUTEX - 346)) | (1L << (MYSQL - 346)) | (1L << (NAME - 346)) | (1L << (NAMES - 346)) | (1L << (NCHAR - 346)))) != 0) || ((((_la - 411)) & ~0x3f) == 0 && ((1L << (_la - 411)) & ((1L << (NO - 411)) | (1L << (NODEGROUP - 411)) | (1L << (NONE - 411)) | (1L << (OFFLINE - 411)) | (1L << (OFFSET - 411)) | (1L << (OJ - 411)) | (1L << (OLD_PASSWORD - 411)) | (1L << (ONLINE - 411)) | (1L << (ONLY - 411)) | (1L << (OPTIONS - 411)) | (1L << (OWNER - 411)) | (1L << (PACK_KEYS - 411)) | (1L << (PARSER - 411)) | (1L << (PARTIAL - 411)) | (1L << (PARTITIONING - 411)) | (1L << (PARTITIONS - 411)) | (1L << (PASSWORD - 411)) | (1L << (PLUGINS - 411)) | (1L << (PORT - 411)) | (1L << (PRESERVE - 411)) | (1L << (PROCESSLIST - 411)) | (1L << (PROFILE - 411)) | (1L << (PROFILES - 411)) | (1L << (PROXY - 411)) | (1L << (QUERY - 411)) | (1L << (QUICK - 411)) | (1L << (REBUILD - 411)) | (1L << (REDO_BUFFER_SIZE - 411)) | (1L << (REDUNDANT - 411)) | (1L << (RELAYLOG - 411)) | (1L << (REMOVE - 411)) | (1L << (REORGANIZE - 411)) | (1L << (REPAIR - 411)) | (1L << (REPLICATION - 411)) | (1L << (RETURNS - 411)) | (1L << (ROLLBACK - 411)) | (1L << (ROLLUP - 411)) | (1L << (ROW - 411)) | (1L << (ROWS - 411)) | (1L << (ROW_FORMAT - 411)))) != 0) || ((((_la - 475)) & ~0x3f) == 0 && ((1L << (_la - 475)) & ((1L << (SAVEPOINT - 475)) | (1L << (SCHEDULE - 475)) | (1L << (SECURITY - 475)) | (1L << (SERVER - 475)) | (1L << (SESSION - 475)) | (1L << (SHARE - 475)) | (1L << (SHARED - 475)) | (1L << (SIGNED - 475)) | (1L << (SIMPLE - 475)) | (1L << (SLAVE - 475)) | (1L << (SNAPSHOT - 475)) | (1L << (SOCKET - 475)) | (1L << (SOME - 475)) | (1L << (SOUNDS - 475)) | (1L << (SQL_BUFFER_RESULT - 475)) | (1L << (SQL_CACHE - 475)) | (1L << (SQL_NO_CACHE - 475)) | (1L << (START - 475)) | (1L << (STARTS - 475)) | (1L << (STATS_AUTO_RECALC - 475)) | (1L << (STATS_PERSISTENT - 475)) | (1L << (STATS_SAMPLE_PAGES - 475)) | (1L << (STATUS - 475)) | (1L << (STORAGE - 475)) | (1L << (SUBJECT - 475)) | (1L << (SUBPARTITION - 475)) | (1L << (SUBPARTITIONS - 475)) | (1L << (TABLESPACE - 475)) | (1L << (TEMPORARY - 475)) | (1L << (TEMPTABLE - 475)) | (1L << (THAN - 475)) | (1L << (TRANSACTION - 475)) | (1L << (TRUNCATE - 475)) | (1L << (UNDEFINED - 475)) | (1L << (UNDOFILE - 475)) | (1L << (UNDO_BUFFER_SIZE - 475)) | (1L << (UNKNOWN - 475)) | (1L << (UPGRADE - 475)) | (1L << (USER - 475)) | (1L << (VALUE - 475)) | (1L << (VARIABLES - 475)) | (1L << (VIEW - 475)) | (1L << (WAIT - 475)) | (1L << (WARNINGS - 475)))) != 0) || ((((_la - 539)) & ~0x3f) == 0 && ((1L << (_la - 539)) & ((1L << (WORK - 539)) | (1L << (WRAPPER - 539)) | (1L << (X509 - 539)) | (1L << (XML - 539)) | (1L << (QUARTER - 539)) | (1L << (MONTH - 539)) | (1L << (DAY - 539)) | (1L << (HOUR - 539)) | (1L << (MINUTE - 539)) | (1L << (WEEK - 539)) | (1L << (SECOND - 539)) | (1L << (MICROSECOND - 539)) | (1L << (TABLES - 539)) | (1L << (ROUTINE - 539)) | (1L << (EXECUTE - 539)) | (1L << (FILE - 539)) | (1L << (PROCESS - 539)) | (1L << (RELOAD - 539)) | (1L << (SHUTDOWN - 539)) | (1L << (SUPER - 539)) | (1L << (PRIVILEGES - 539)) | (1L << (ARMSCII8 - 539)) | (1L << (ASCII - 539)) | (1L << (BIG5 - 539)) | (1L << (CP1250 - 539)) | (1L << (CP1251 - 539)) | (1L << (CP1256 - 539)) | (1L << (CP1257 - 539)) | (1L << (CP850 - 539)) | (1L << (CP852 - 539)) | (1L << (CP866 - 539)) | (1L << (CP932 - 539)) | (1L << (DEC8 - 539)) | (1L << (EUCJPMS - 539)) | (1L << (EUCKR - 539)) | (1L << (GB2312 - 539)) | (1L << (GBK - 539)) | (1L << (GEOSTD8 - 539)) | (1L << (GREEK - 539)) | (1L << (HEBREW - 539)) | (1L << (HP8 - 539)) | (1L << (KEYBCS2 - 539)) | (1L << (KOI8R - 539)) | (1L << (KOI8U - 539)) | (1L << (LATIN1 - 539)) | (1L << (LATIN2 - 539)) | (1L << (LATIN5 - 539)) | (1L << (LATIN7 - 539)) | (1L << (MACCE - 539)) | (1L << (MACROMAN - 539)) | (1L << (SJIS - 539)) | (1L << (SWE7 - 539)) | (1L << (TIS620 - 539)) | (1L << (UCS2 - 539)) | (1L << (UJIS - 539)) | (1L << (UTF16 - 539)) | (1L << (UTF16LE - 539)) | (1L << (UTF32 - 539)))) != 0) || ((((_la - 603)) & ~0x3f) == 0 && ((1L << (_la - 603)) & ((1L << (UTF8 - 603)) | (1L << (UTF8MB3 - 603)) | (1L << (UTF8MB4 - 603)) | (1L << (ARCHIVE - 603)) | (1L << (BLACKHOLE - 603)) | (1L << (CSV - 603)) | (1L << (FEDERATED - 603)) | (1L << (INNODB - 603)) | (1L << (MEMORY - 603)) | (1L << (MRG_MYISAM - 603)) | (1L << (MYISAM - 603)) | (1L << (NDB - 603)) | (1L << (NDBCLUSTER - 603)) | (1L << (PERFOMANCE_SCHEMA - 603)) | (1L << (REPEATABLE - 603)) | (1L << (COMMITTED - 603)) | (1L << (UNCOMMITTED - 603)) | (1L << (SERIALIZABLE - 603)) | (1L << (GEOMETRYCOLLECTION - 603)) | (1L << (LINESTRING - 603)) | (1L << (MULTILINESTRING - 603)) | (1L << (MULTIPOINT - 603)) | (1L << (MULTIPOLYGON - 603)) | (1L << (POINT - 603)) | (1L << (POLYGON - 603)) | (1L << (ABS - 603)) | (1L << (ACOS - 603)) | (1L << (ADDDATE - 603)) | (1L << (ADDTIME - 603)) | (1L << (AES_DECRYPT - 603)) | (1L << (AES_ENCRYPT - 603)) | (1L << (AREA - 603)) | (1L << (ASBINARY - 603)) | (1L << (ASIN - 603)) | (1L << (ASTEXT - 603)) | (1L << (ASWKB - 603)) | (1L << (ASWKT - 603)) | (1L << (ASYMMETRIC_DECRYPT - 603)) | (1L << (ASYMMETRIC_DERIVE - 603)) | (1L << (ASYMMETRIC_ENCRYPT - 603)) | (1L << (ASYMMETRIC_SIGN - 603)) | (1L << (ASYMMETRIC_VERIFY - 603)) | (1L << (ATAN - 603)) | (1L << (ATAN2 - 603)) | (1L << (BENCHMARK - 603)) | (1L << (BIN - 603)) | (1L << (BIT_COUNT - 603)) | (1L << (BIT_LENGTH - 603)) | (1L << (BUFFER - 603)) | (1L << (CEIL - 603)) | (1L << (CEILING - 603)) | (1L << (CENTROID - 603)) | (1L << (CHARACTER_LENGTH - 603)) | (1L << (CHARSET - 603)) | (1L << (CHAR_LENGTH - 603)) | (1L << (COERCIBILITY - 603)) | (1L << (COLLATION - 603)) | (1L << (COMPRESS - 603)) | (1L << (CONCAT - 603)) | (1L << (CONCAT_WS - 603)) | (1L << (CONNECTION_ID - 603)) | (1L << (CONV - 603)) | (1L << (CONVERT_TZ - 603)) | (1L << (COS - 603)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (COT - 667)) | (1L << (CRC32 - 667)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 667)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 667)) | (1L << (CREATE_DH_PARAMETERS - 667)) | (1L << (CREATE_DIGEST - 667)) | (1L << (CROSSES - 667)) | (1L << (DATEDIFF - 667)) | (1L << (DATE_FORMAT - 667)) | (1L << (DAYNAME - 667)) | (1L << (DAYOFMONTH - 667)) | (1L << (DAYOFWEEK - 667)) | (1L << (DAYOFYEAR - 667)) | (1L << (DECODE - 667)) | (1L << (DEGREES - 667)) | (1L << (DES_DECRYPT - 667)) | (1L << (DES_ENCRYPT - 667)) | (1L << (DIMENSION - 667)) | (1L << (DISJOINT - 667)) | (1L << (ELT - 667)) | (1L << (ENCODE - 667)) | (1L << (ENCRYPT - 667)) | (1L << (ENDPOINT - 667)) | (1L << (ENVELOPE - 667)) | (1L << (EQUALS - 667)) | (1L << (EXP - 667)) | (1L << (EXPORT_SET - 667)) | (1L << (EXTERIORRING - 667)) | (1L << (EXTRACTVALUE - 667)) | (1L << (FIELD - 667)) | (1L << (FIND_IN_SET - 667)) | (1L << (FLOOR - 667)) | (1L << (FORMAT - 667)) | (1L << (FOUND_ROWS - 667)) | (1L << (FROM_BASE64 - 667)) | (1L << (FROM_DAYS - 667)) | (1L << (FROM_UNIXTIME - 667)) | (1L << (GEOMCOLLFROMTEXT - 667)) | (1L << (GEOMCOLLFROMWKB - 667)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 667)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 667)) | (1L << (GEOMETRYFROMTEXT - 667)) | (1L << (GEOMETRYFROMWKB - 667)) | (1L << (GEOMETRYN - 667)) | (1L << (GEOMETRYTYPE - 667)) | (1L << (GEOMFROMTEXT - 667)) | (1L << (GEOMFROMWKB - 667)) | (1L << (GET_FORMAT - 667)) | (1L << (GET_LOCK - 667)) | (1L << (GLENGTH - 667)) | (1L << (GREATEST - 667)) | (1L << (GTID_SUBSET - 667)) | (1L << (GTID_SUBTRACT - 667)) | (1L << (HEX - 667)) | (1L << (IFNULL - 667)) | (1L << (INET6_ATON - 667)) | (1L << (INET6_NTOA - 667)) | (1L << (INET_ATON - 667)) | (1L << (INET_NTOA - 667)) | (1L << (INSTR - 667)) | (1L << (INTERIORRINGN - 667)) | (1L << (INTERSECTS - 667)) | (1L << (ISCLOSED - 667)) | (1L << (ISEMPTY - 667)))) != 0) || ((((_la - 731)) & ~0x3f) == 0 && ((1L << (_la - 731)) & ((1L << (ISNULL - 731)) | (1L << (ISSIMPLE - 731)) | (1L << (IS_FREE_LOCK - 731)) | (1L << (IS_IPV4 - 731)) | (1L << (IS_IPV4_COMPAT - 731)) | (1L << (IS_IPV4_MAPPED - 731)) | (1L << (IS_IPV6 - 731)) | (1L << (IS_USED_LOCK - 731)) | (1L << (LAST_INSERT_ID - 731)) | (1L << (LCASE - 731)) | (1L << (LEAST - 731)) | (1L << (LENGTH - 731)) | (1L << (LINEFROMTEXT - 731)) | (1L << (LINEFROMWKB - 731)) | (1L << (LINESTRINGFROMTEXT - 731)) | (1L << (LINESTRINGFROMWKB - 731)) | (1L << (LN - 731)) | (1L << (LOAD_FILE - 731)) | (1L << (LOCATE - 731)) | (1L << (LOG - 731)) | (1L << (LOG10 - 731)) | (1L << (LOG2 - 731)) | (1L << (LOWER - 731)) | (1L << (LPAD - 731)) | (1L << (LTRIM - 731)) | (1L << (MAKEDATE - 731)) | (1L << (MAKETIME - 731)) | (1L << (MAKE_SET - 731)) | (1L << (MASTER_POS_WAIT - 731)) | (1L << (MBRCONTAINS - 731)) | (1L << (MBRDISJOINT - 731)) | (1L << (MBREQUAL - 731)) | (1L << (MBRINTERSECTS - 731)) | (1L << (MBROVERLAPS - 731)) | (1L << (MBRTOUCHES - 731)) | (1L << (MBRWITHIN - 731)) | (1L << (MD5 - 731)) | (1L << (MLINEFROMTEXT - 731)) | (1L << (MLINEFROMWKB - 731)) | (1L << (MONTHNAME - 731)) | (1L << (MPOINTFROMTEXT - 731)) | (1L << (MPOINTFROMWKB - 731)) | (1L << (MPOLYFROMTEXT - 731)) | (1L << (MPOLYFROMWKB - 731)) | (1L << (MULTILINESTRINGFROMTEXT - 731)) | (1L << (MULTILINESTRINGFROMWKB - 731)) | (1L << (MULTIPOINTFROMTEXT - 731)) | (1L << (MULTIPOINTFROMWKB - 731)) | (1L << (MULTIPOLYGONFROMTEXT - 731)) | (1L << (MULTIPOLYGONFROMWKB - 731)) | (1L << (NAME_CONST - 731)) | (1L << (NULLIF - 731)) | (1L << (NUMGEOMETRIES - 731)) | (1L << (NUMINTERIORRINGS - 731)) | (1L << (NUMPOINTS - 731)) | (1L << (OCT - 731)) | (1L << (OCTET_LENGTH - 731)) | (1L << (ORD - 731)) | (1L << (OVERLAPS - 731)) | (1L << (PERIOD_ADD - 731)) | (1L << (PERIOD_DIFF - 731)) | (1L << (PI - 731)) | (1L << (POINTFROMTEXT - 731)) | (1L << (POINTFROMWKB - 731)))) != 0) || ((((_la - 795)) & ~0x3f) == 0 && ((1L << (_la - 795)) & ((1L << (POINTN - 795)) | (1L << (POLYFROMTEXT - 795)) | (1L << (POLYFROMWKB - 795)) | (1L << (POLYGONFROMTEXT - 795)) | (1L << (POLYGONFROMWKB - 795)) | (1L << (POW - 795)) | (1L << (POWER - 795)) | (1L << (QUOTE - 795)) | (1L << (RADIANS - 795)) | (1L << (RAND - 795)) | (1L << (RANDOM_BYTES - 795)) | (1L << (RELEASE_LOCK - 795)) | (1L << (REVERSE - 795)) | (1L << (ROUND - 795)) | (1L << (ROW_COUNT - 795)) | (1L << (RPAD - 795)) | (1L << (RTRIM - 795)) | (1L << (SEC_TO_TIME - 795)) | (1L << (SESSION_USER - 795)) | (1L << (SHA - 795)) | (1L << (SHA1 - 795)) | (1L << (SHA2 - 795)) | (1L << (SIGN - 795)) | (1L << (SIN - 795)) | (1L << (SLEEP - 795)) | (1L << (SOUNDEX - 795)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 795)) | (1L << (SQRT - 795)) | (1L << (SRID - 795)) | (1L << (STARTPOINT - 795)) | (1L << (STRCMP - 795)) | (1L << (STR_TO_DATE - 795)) | (1L << (ST_AREA - 795)) | (1L << (ST_ASBINARY - 795)) | (1L << (ST_ASTEXT - 795)) | (1L << (ST_ASWKB - 795)) | (1L << (ST_ASWKT - 795)) | (1L << (ST_BUFFER - 795)) | (1L << (ST_CENTROID - 795)) | (1L << (ST_CONTAINS - 795)) | (1L << (ST_CROSSES - 795)) | (1L << (ST_DIFFERENCE - 795)) | (1L << (ST_DIMENSION - 795)) | (1L << (ST_DISJOINT - 795)) | (1L << (ST_DISTANCE - 795)) | (1L << (ST_ENDPOINT - 795)) | (1L << (ST_ENVELOPE - 795)) | (1L << (ST_EQUALS - 795)) | (1L << (ST_EXTERIORRING - 795)) | (1L << (ST_GEOMCOLLFROMTEXT - 795)) | (1L << (ST_GEOMCOLLFROMTXT - 795)) | (1L << (ST_GEOMCOLLFROMWKB - 795)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 795)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 795)) | (1L << (ST_GEOMETRYFROMTEXT - 795)) | (1L << (ST_GEOMETRYFROMWKB - 795)) | (1L << (ST_GEOMETRYN - 795)) | (1L << (ST_GEOMETRYTYPE - 795)) | (1L << (ST_GEOMFROMTEXT - 795)) | (1L << (ST_GEOMFROMWKB - 795)) | (1L << (ST_INTERIORRINGN - 795)) | (1L << (ST_INTERSECTION - 795)) | (1L << (ST_INTERSECTS - 795)) | (1L << (ST_ISCLOSED - 795)))) != 0) || ((((_la - 859)) & ~0x3f) == 0 && ((1L << (_la - 859)) & ((1L << (ST_ISEMPTY - 859)) | (1L << (ST_ISSIMPLE - 859)) | (1L << (ST_LINEFROMTEXT - 859)) | (1L << (ST_LINEFROMWKB - 859)) | (1L << (ST_LINESTRINGFROMTEXT - 859)) | (1L << (ST_LINESTRINGFROMWKB - 859)) | (1L << (ST_NUMGEOMETRIES - 859)) | (1L << (ST_NUMINTERIORRING - 859)) | (1L << (ST_NUMINTERIORRINGS - 859)) | (1L << (ST_NUMPOINTS - 859)) | (1L << (ST_OVERLAPS - 859)) | (1L << (ST_POINTFROMTEXT - 859)) | (1L << (ST_POINTFROMWKB - 859)) | (1L << (ST_POINTN - 859)) | (1L << (ST_POLYFROMTEXT - 859)) | (1L << (ST_POLYFROMWKB - 859)) | (1L << (ST_POLYGONFROMTEXT - 859)) | (1L << (ST_POLYGONFROMWKB - 859)) | (1L << (ST_SRID - 859)) | (1L << (ST_STARTPOINT - 859)) | (1L << (ST_SYMDIFFERENCE - 859)) | (1L << (ST_TOUCHES - 859)) | (1L << (ST_UNION - 859)) | (1L << (ST_WITHIN - 859)) | (1L << (ST_X - 859)) | (1L << (ST_Y - 859)) | (1L << (SUBDATE - 859)) | (1L << (SUBSTRING_INDEX - 859)) | (1L << (SUBTIME - 859)) | (1L << (SYSTEM_USER - 859)) | (1L << (TAN - 859)) | (1L << (TIMEDIFF - 859)) | (1L << (TIMESTAMPADD - 859)) | (1L << (TIMESTAMPDIFF - 859)) | (1L << (TIME_FORMAT - 859)) | (1L << (TIME_TO_SEC - 859)) | (1L << (TOUCHES - 859)) | (1L << (TO_BASE64 - 859)) | (1L << (TO_DAYS - 859)) | (1L << (TO_SECONDS - 859)) | (1L << (UCASE - 859)) | (1L << (UNCOMPRESS - 859)) | (1L << (UNCOMPRESSED_LENGTH - 859)) | (1L << (UNHEX - 859)) | (1L << (UNIX_TIMESTAMP - 859)) | (1L << (UPDATEXML - 859)) | (1L << (UPPER - 859)) | (1L << (UUID - 859)) | (1L << (UUID_SHORT - 859)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 859)) | (1L << (VERSION - 859)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 859)) | (1L << (WEEKDAY - 859)) | (1L << (WEEKOFYEAR - 859)) | (1L << (WEIGHT_STRING - 859)) | (1L << (WITHIN - 859)) | (1L << (YEARWEEK - 859)) | (1L << (Y_FUNCTION - 859)) | (1L << (X_FUNCTION - 859)))) != 0) || ((((_la - 930)) & ~0x3f) == 0 && ((1L << (_la - 930)) & ((1L << (PLUS - 930)) | (1L << (MINUS - 930)) | (1L << (EXCLAMATION_SYMBOL - 930)) | (1L << (BIT_NOT_OP - 930)) | (1L << (LR_BRACKET - 930)) | (1L << (ZERO_DECIMAL - 930)) | (1L << (ONE_DECIMAL - 930)) | (1L << (TWO_DECIMAL - 930)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 930)) | (1L << (START_NATIONAL_STRING_LITERAL - 930)) | (1L << (STRING_LITERAL - 930)) | (1L << (DECIMAL_LITERAL - 930)) | (1L << (HEXADECIMAL_LITERAL - 930)) | (1L << (REAL_LITERAL - 930)) | (1L << (NULL_SPEC_LITERAL - 930)) | (1L << (BIT_STRING - 930)) | (1L << (STRING_CHARSET_NAME - 930)) | (1L << (ID - 930)) | (1L << (REVERSE_QUOTE_ID - 930)) | (1L << (LOCAL_ID - 930)) | (1L << (GLOBAL_ID - 930)))) != 0)) {
					{
					setState(5362);
					function_args();
					}
				}

				setState(5365);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5367);
				id_();
				setState(5369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT || _la==DOT_ID) {
					{
					setState(5368);
					dot_ext_id();
					}
				}

				setState(5371);
				match(LR_BRACKET);
				setState(5373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << DEFAULT) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IF - 64)) | (1L << (INTERVAL - 64)) | (1L << (LEFT - 64)) | (1L << (NOTNULL - 64)) | (1L << (NOT - 64)) | (1L << (NULL_LITERAL - 64)) | (1L << (REPLACE - 64)) | (1L << (RIGHT - 64)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (TRUE - 152)) | (1L << (VALUES - 152)) | (1L << (DATE - 152)) | (1L << (TIME - 152)) | (1L << (TIMESTAMP - 152)) | (1L << (DATETIME - 152)) | (1L << (YEAR - 152)) | (1L << (CHAR - 152)) | (1L << (BINARY - 152)) | (1L << (TEXT - 152)) | (1L << (ENUM - 152)) | (1L << (AVG - 152)) | (1L << (BIT_AND - 152)) | (1L << (BIT_OR - 152)) | (1L << (BIT_XOR - 152)) | (1L << (COUNT - 152)) | (1L << (GROUP_CONCAT - 152)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (MAX - 216)) | (1L << (MIN - 216)) | (1L << (STD - 216)) | (1L << (STDDEV - 216)) | (1L << (STDDEV_POP - 216)) | (1L << (STDDEV_SAMP - 216)) | (1L << (SUM - 216)) | (1L << (VAR_POP - 216)) | (1L << (VAR_SAMP - 216)) | (1L << (VARIANCE - 216)) | (1L << (CURRENT_DATE - 216)) | (1L << (CURRENT_TIME - 216)) | (1L << (CURRENT_TIMESTAMP - 216)) | (1L << (LOCALTIME - 216)) | (1L << (CURDATE - 216)) | (1L << (CURTIME - 216)) | (1L << (DATE_ADD - 216)) | (1L << (DATE_SUB - 216)) | (1L << (EXTRACT - 216)) | (1L << (LOCALTIMESTAMP - 216)) | (1L << (NOW - 216)) | (1L << (POSITION - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (SYSDATE - 216)) | (1L << (TRIM - 216)) | (1L << (UTC_DATE - 216)) | (1L << (UTC_TIME - 216)) | (1L << (UTC_TIMESTAMP - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)) | (1L << (COLUMNS - 216)) | (1L << (COLUMN_FORMAT - 216)) | (1L << (COMMENT - 216)) | (1L << (COMMIT - 216)) | (1L << (COMPACT - 216)) | (1L << (COMPLETION - 216)) | (1L << (COMPRESSED - 216)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (CONCURRENT - 281)) | (1L << (CONNECTION - 281)) | (1L << (CONSISTENT - 281)) | (1L << (CONTAINS - 281)) | (1L << (CONTRIBUTORS - 281)) | (1L << (COPY - 281)) | (1L << (DATA - 281)) | (1L << (DATAFILE - 281)) | (1L << (DEFINER - 281)) | (1L << (DELAY_KEY_WRITE - 281)) | (1L << (DIRECTORY - 281)) | (1L << (DISABLE - 281)) | (1L << (DISCARD - 281)) | (1L << (DISK - 281)) | (1L << (DO - 281)) | (1L << (DUMPFILE - 281)) | (1L << (DUPLICATE - 281)) | (1L << (DYNAMIC - 281)) | (1L << (ENABLE - 281)) | (1L << (ENDS - 281)) | (1L << (ENGINE - 281)) | (1L << (ENGINES - 281)) | (1L << (ERRORS - 281)) | (1L << (ESCAPE - 281)) | (1L << (EVEN - 281)) | (1L << (EVENT - 281)) | (1L << (EVENTS - 281)) | (1L << (EVERY - 281)) | (1L << (EXCHANGE - 281)) | (1L << (EXCLUSIVE - 281)) | (1L << (EXPIRE - 281)) | (1L << (EXTENT_SIZE - 281)) | (1L << (FIELDS - 281)) | (1L << (FIRST - 281)) | (1L << (FIXED - 281)) | (1L << (FULL - 281)) | (1L << (FUNCTION - 281)) | (1L << (GLOBAL - 281)) | (1L << (GRANTS - 281)) | (1L << (HASH - 281)) | (1L << (HOST - 281)) | (1L << (IDENTIFIED - 281)))) != 0) || ((((_la - 346)) & ~0x3f) == 0 && ((1L << (_la - 346)) & ((1L << (IMPORT - 346)) | (1L << (INITIAL_SIZE - 346)) | (1L << (INPLACE - 346)) | (1L << (INSERT_METHOD - 346)) | (1L << (INVOKER - 346)) | (1L << (ISOLATION - 346)) | (1L << (ISSUER - 346)) | (1L << (KEY_BLOCK_SIZE - 346)) | (1L << (LANGUAGE - 346)) | (1L << (LAST - 346)) | (1L << (LESS - 346)) | (1L << (LEVEL - 346)) | (1L << (LIST - 346)) | (1L << (LOCAL - 346)) | (1L << (LOGFILE - 346)) | (1L << (LOGS - 346)) | (1L << (MASTER - 346)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 346)) | (1L << (MAX_QUERIES_PER_HOUR - 346)) | (1L << (MAX_ROWS - 346)) | (1L << (MAX_SIZE - 346)) | (1L << (MAX_UPDATES_PER_HOUR - 346)) | (1L << (MAX_USER_CONNECTIONS - 346)) | (1L << (MERGE - 346)) | (1L << (MID - 346)) | (1L << (MIN_ROWS - 346)) | (1L << (MODIFY - 346)) | (1L << (MUTEX - 346)) | (1L << (MYSQL - 346)) | (1L << (NAME - 346)) | (1L << (NAMES - 346)) | (1L << (NCHAR - 346)))) != 0) || ((((_la - 411)) & ~0x3f) == 0 && ((1L << (_la - 411)) & ((1L << (NO - 411)) | (1L << (NODEGROUP - 411)) | (1L << (NONE - 411)) | (1L << (OFFLINE - 411)) | (1L << (OFFSET - 411)) | (1L << (OJ - 411)) | (1L << (OLD_PASSWORD - 411)) | (1L << (ONLINE - 411)) | (1L << (ONLY - 411)) | (1L << (OPTIONS - 411)) | (1L << (OWNER - 411)) | (1L << (PACK_KEYS - 411)) | (1L << (PARSER - 411)) | (1L << (PARTIAL - 411)) | (1L << (PARTITIONING - 411)) | (1L << (PARTITIONS - 411)) | (1L << (PASSWORD - 411)) | (1L << (PLUGINS - 411)) | (1L << (PORT - 411)) | (1L << (PRESERVE - 411)) | (1L << (PROCESSLIST - 411)) | (1L << (PROFILE - 411)) | (1L << (PROFILES - 411)) | (1L << (PROXY - 411)) | (1L << (QUERY - 411)) | (1L << (QUICK - 411)) | (1L << (REBUILD - 411)) | (1L << (REDO_BUFFER_SIZE - 411)) | (1L << (REDUNDANT - 411)) | (1L << (RELAYLOG - 411)) | (1L << (REMOVE - 411)) | (1L << (REORGANIZE - 411)) | (1L << (REPAIR - 411)) | (1L << (REPLICATION - 411)) | (1L << (RETURNS - 411)) | (1L << (ROLLBACK - 411)) | (1L << (ROLLUP - 411)) | (1L << (ROW - 411)) | (1L << (ROWS - 411)) | (1L << (ROW_FORMAT - 411)))) != 0) || ((((_la - 475)) & ~0x3f) == 0 && ((1L << (_la - 475)) & ((1L << (SAVEPOINT - 475)) | (1L << (SCHEDULE - 475)) | (1L << (SECURITY - 475)) | (1L << (SERVER - 475)) | (1L << (SESSION - 475)) | (1L << (SHARE - 475)) | (1L << (SHARED - 475)) | (1L << (SIGNED - 475)) | (1L << (SIMPLE - 475)) | (1L << (SLAVE - 475)) | (1L << (SNAPSHOT - 475)) | (1L << (SOCKET - 475)) | (1L << (SOME - 475)) | (1L << (SOUNDS - 475)) | (1L << (SQL_BUFFER_RESULT - 475)) | (1L << (SQL_CACHE - 475)) | (1L << (SQL_NO_CACHE - 475)) | (1L << (START - 475)) | (1L << (STARTS - 475)) | (1L << (STATS_AUTO_RECALC - 475)) | (1L << (STATS_PERSISTENT - 475)) | (1L << (STATS_SAMPLE_PAGES - 475)) | (1L << (STATUS - 475)) | (1L << (STORAGE - 475)) | (1L << (SUBJECT - 475)) | (1L << (SUBPARTITION - 475)) | (1L << (SUBPARTITIONS - 475)) | (1L << (TABLESPACE - 475)) | (1L << (TEMPORARY - 475)) | (1L << (TEMPTABLE - 475)) | (1L << (THAN - 475)) | (1L << (TRANSACTION - 475)) | (1L << (TRUNCATE - 475)) | (1L << (UNDEFINED - 475)) | (1L << (UNDOFILE - 475)) | (1L << (UNDO_BUFFER_SIZE - 475)) | (1L << (UNKNOWN - 475)) | (1L << (UPGRADE - 475)) | (1L << (USER - 475)) | (1L << (VALUE - 475)) | (1L << (VARIABLES - 475)) | (1L << (VIEW - 475)) | (1L << (WAIT - 475)) | (1L << (WARNINGS - 475)))) != 0) || ((((_la - 539)) & ~0x3f) == 0 && ((1L << (_la - 539)) & ((1L << (WORK - 539)) | (1L << (WRAPPER - 539)) | (1L << (X509 - 539)) | (1L << (XML - 539)) | (1L << (QUARTER - 539)) | (1L << (MONTH - 539)) | (1L << (DAY - 539)) | (1L << (HOUR - 539)) | (1L << (MINUTE - 539)) | (1L << (WEEK - 539)) | (1L << (SECOND - 539)) | (1L << (MICROSECOND - 539)) | (1L << (TABLES - 539)) | (1L << (ROUTINE - 539)) | (1L << (EXECUTE - 539)) | (1L << (FILE - 539)) | (1L << (PROCESS - 539)) | (1L << (RELOAD - 539)) | (1L << (SHUTDOWN - 539)) | (1L << (SUPER - 539)) | (1L << (PRIVILEGES - 539)) | (1L << (ARMSCII8 - 539)) | (1L << (ASCII - 539)) | (1L << (BIG5 - 539)) | (1L << (CP1250 - 539)) | (1L << (CP1251 - 539)) | (1L << (CP1256 - 539)) | (1L << (CP1257 - 539)) | (1L << (CP850 - 539)) | (1L << (CP852 - 539)) | (1L << (CP866 - 539)) | (1L << (CP932 - 539)) | (1L << (DEC8 - 539)) | (1L << (EUCJPMS - 539)) | (1L << (EUCKR - 539)) | (1L << (GB2312 - 539)) | (1L << (GBK - 539)) | (1L << (GEOSTD8 - 539)) | (1L << (GREEK - 539)) | (1L << (HEBREW - 539)) | (1L << (HP8 - 539)) | (1L << (KEYBCS2 - 539)) | (1L << (KOI8R - 539)) | (1L << (KOI8U - 539)) | (1L << (LATIN1 - 539)) | (1L << (LATIN2 - 539)) | (1L << (LATIN5 - 539)) | (1L << (LATIN7 - 539)) | (1L << (MACCE - 539)) | (1L << (MACROMAN - 539)) | (1L << (SJIS - 539)) | (1L << (SWE7 - 539)) | (1L << (TIS620 - 539)) | (1L << (UCS2 - 539)) | (1L << (UJIS - 539)) | (1L << (UTF16 - 539)) | (1L << (UTF16LE - 539)) | (1L << (UTF32 - 539)))) != 0) || ((((_la - 603)) & ~0x3f) == 0 && ((1L << (_la - 603)) & ((1L << (UTF8 - 603)) | (1L << (UTF8MB3 - 603)) | (1L << (UTF8MB4 - 603)) | (1L << (ARCHIVE - 603)) | (1L << (BLACKHOLE - 603)) | (1L << (CSV - 603)) | (1L << (FEDERATED - 603)) | (1L << (INNODB - 603)) | (1L << (MEMORY - 603)) | (1L << (MRG_MYISAM - 603)) | (1L << (MYISAM - 603)) | (1L << (NDB - 603)) | (1L << (NDBCLUSTER - 603)) | (1L << (PERFOMANCE_SCHEMA - 603)) | (1L << (REPEATABLE - 603)) | (1L << (COMMITTED - 603)) | (1L << (UNCOMMITTED - 603)) | (1L << (SERIALIZABLE - 603)) | (1L << (GEOMETRYCOLLECTION - 603)) | (1L << (LINESTRING - 603)) | (1L << (MULTILINESTRING - 603)) | (1L << (MULTIPOINT - 603)) | (1L << (MULTIPOLYGON - 603)) | (1L << (POINT - 603)) | (1L << (POLYGON - 603)) | (1L << (ABS - 603)) | (1L << (ACOS - 603)) | (1L << (ADDDATE - 603)) | (1L << (ADDTIME - 603)) | (1L << (AES_DECRYPT - 603)) | (1L << (AES_ENCRYPT - 603)) | (1L << (AREA - 603)) | (1L << (ASBINARY - 603)) | (1L << (ASIN - 603)) | (1L << (ASTEXT - 603)) | (1L << (ASWKB - 603)) | (1L << (ASWKT - 603)) | (1L << (ASYMMETRIC_DECRYPT - 603)) | (1L << (ASYMMETRIC_DERIVE - 603)) | (1L << (ASYMMETRIC_ENCRYPT - 603)) | (1L << (ASYMMETRIC_SIGN - 603)) | (1L << (ASYMMETRIC_VERIFY - 603)) | (1L << (ATAN - 603)) | (1L << (ATAN2 - 603)) | (1L << (BENCHMARK - 603)) | (1L << (BIN - 603)) | (1L << (BIT_COUNT - 603)) | (1L << (BIT_LENGTH - 603)) | (1L << (BUFFER - 603)) | (1L << (CEIL - 603)) | (1L << (CEILING - 603)) | (1L << (CENTROID - 603)) | (1L << (CHARACTER_LENGTH - 603)) | (1L << (CHARSET - 603)) | (1L << (CHAR_LENGTH - 603)) | (1L << (COERCIBILITY - 603)) | (1L << (COLLATION - 603)) | (1L << (COMPRESS - 603)) | (1L << (CONCAT - 603)) | (1L << (CONCAT_WS - 603)) | (1L << (CONNECTION_ID - 603)) | (1L << (CONV - 603)) | (1L << (CONVERT_TZ - 603)) | (1L << (COS - 603)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (COT - 667)) | (1L << (CRC32 - 667)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 667)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 667)) | (1L << (CREATE_DH_PARAMETERS - 667)) | (1L << (CREATE_DIGEST - 667)) | (1L << (CROSSES - 667)) | (1L << (DATEDIFF - 667)) | (1L << (DATE_FORMAT - 667)) | (1L << (DAYNAME - 667)) | (1L << (DAYOFMONTH - 667)) | (1L << (DAYOFWEEK - 667)) | (1L << (DAYOFYEAR - 667)) | (1L << (DECODE - 667)) | (1L << (DEGREES - 667)) | (1L << (DES_DECRYPT - 667)) | (1L << (DES_ENCRYPT - 667)) | (1L << (DIMENSION - 667)) | (1L << (DISJOINT - 667)) | (1L << (ELT - 667)) | (1L << (ENCODE - 667)) | (1L << (ENCRYPT - 667)) | (1L << (ENDPOINT - 667)) | (1L << (ENVELOPE - 667)) | (1L << (EQUALS - 667)) | (1L << (EXP - 667)) | (1L << (EXPORT_SET - 667)) | (1L << (EXTERIORRING - 667)) | (1L << (EXTRACTVALUE - 667)) | (1L << (FIELD - 667)) | (1L << (FIND_IN_SET - 667)) | (1L << (FLOOR - 667)) | (1L << (FORMAT - 667)) | (1L << (FOUND_ROWS - 667)) | (1L << (FROM_BASE64 - 667)) | (1L << (FROM_DAYS - 667)) | (1L << (FROM_UNIXTIME - 667)) | (1L << (GEOMCOLLFROMTEXT - 667)) | (1L << (GEOMCOLLFROMWKB - 667)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 667)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 667)) | (1L << (GEOMETRYFROMTEXT - 667)) | (1L << (GEOMETRYFROMWKB - 667)) | (1L << (GEOMETRYN - 667)) | (1L << (GEOMETRYTYPE - 667)) | (1L << (GEOMFROMTEXT - 667)) | (1L << (GEOMFROMWKB - 667)) | (1L << (GET_FORMAT - 667)) | (1L << (GET_LOCK - 667)) | (1L << (GLENGTH - 667)) | (1L << (GREATEST - 667)) | (1L << (GTID_SUBSET - 667)) | (1L << (GTID_SUBTRACT - 667)) | (1L << (HEX - 667)) | (1L << (IFNULL - 667)) | (1L << (INET6_ATON - 667)) | (1L << (INET6_NTOA - 667)) | (1L << (INET_ATON - 667)) | (1L << (INET_NTOA - 667)) | (1L << (INSTR - 667)) | (1L << (INTERIORRINGN - 667)) | (1L << (INTERSECTS - 667)) | (1L << (ISCLOSED - 667)) | (1L << (ISEMPTY - 667)))) != 0) || ((((_la - 731)) & ~0x3f) == 0 && ((1L << (_la - 731)) & ((1L << (ISNULL - 731)) | (1L << (ISSIMPLE - 731)) | (1L << (IS_FREE_LOCK - 731)) | (1L << (IS_IPV4 - 731)) | (1L << (IS_IPV4_COMPAT - 731)) | (1L << (IS_IPV4_MAPPED - 731)) | (1L << (IS_IPV6 - 731)) | (1L << (IS_USED_LOCK - 731)) | (1L << (LAST_INSERT_ID - 731)) | (1L << (LCASE - 731)) | (1L << (LEAST - 731)) | (1L << (LENGTH - 731)) | (1L << (LINEFROMTEXT - 731)) | (1L << (LINEFROMWKB - 731)) | (1L << (LINESTRINGFROMTEXT - 731)) | (1L << (LINESTRINGFROMWKB - 731)) | (1L << (LN - 731)) | (1L << (LOAD_FILE - 731)) | (1L << (LOCATE - 731)) | (1L << (LOG - 731)) | (1L << (LOG10 - 731)) | (1L << (LOG2 - 731)) | (1L << (LOWER - 731)) | (1L << (LPAD - 731)) | (1L << (LTRIM - 731)) | (1L << (MAKEDATE - 731)) | (1L << (MAKETIME - 731)) | (1L << (MAKE_SET - 731)) | (1L << (MASTER_POS_WAIT - 731)) | (1L << (MBRCONTAINS - 731)) | (1L << (MBRDISJOINT - 731)) | (1L << (MBREQUAL - 731)) | (1L << (MBRINTERSECTS - 731)) | (1L << (MBROVERLAPS - 731)) | (1L << (MBRTOUCHES - 731)) | (1L << (MBRWITHIN - 731)) | (1L << (MD5 - 731)) | (1L << (MLINEFROMTEXT - 731)) | (1L << (MLINEFROMWKB - 731)) | (1L << (MONTHNAME - 731)) | (1L << (MPOINTFROMTEXT - 731)) | (1L << (MPOINTFROMWKB - 731)) | (1L << (MPOLYFROMTEXT - 731)) | (1L << (MPOLYFROMWKB - 731)) | (1L << (MULTILINESTRINGFROMTEXT - 731)) | (1L << (MULTILINESTRINGFROMWKB - 731)) | (1L << (MULTIPOINTFROMTEXT - 731)) | (1L << (MULTIPOINTFROMWKB - 731)) | (1L << (MULTIPOLYGONFROMTEXT - 731)) | (1L << (MULTIPOLYGONFROMWKB - 731)) | (1L << (NAME_CONST - 731)) | (1L << (NULLIF - 731)) | (1L << (NUMGEOMETRIES - 731)) | (1L << (NUMINTERIORRINGS - 731)) | (1L << (NUMPOINTS - 731)) | (1L << (OCT - 731)) | (1L << (OCTET_LENGTH - 731)) | (1L << (ORD - 731)) | (1L << (OVERLAPS - 731)) | (1L << (PERIOD_ADD - 731)) | (1L << (PERIOD_DIFF - 731)) | (1L << (PI - 731)) | (1L << (POINTFROMTEXT - 731)) | (1L << (POINTFROMWKB - 731)))) != 0) || ((((_la - 795)) & ~0x3f) == 0 && ((1L << (_la - 795)) & ((1L << (POINTN - 795)) | (1L << (POLYFROMTEXT - 795)) | (1L << (POLYFROMWKB - 795)) | (1L << (POLYGONFROMTEXT - 795)) | (1L << (POLYGONFROMWKB - 795)) | (1L << (POW - 795)) | (1L << (POWER - 795)) | (1L << (QUOTE - 795)) | (1L << (RADIANS - 795)) | (1L << (RAND - 795)) | (1L << (RANDOM_BYTES - 795)) | (1L << (RELEASE_LOCK - 795)) | (1L << (REVERSE - 795)) | (1L << (ROUND - 795)) | (1L << (ROW_COUNT - 795)) | (1L << (RPAD - 795)) | (1L << (RTRIM - 795)) | (1L << (SEC_TO_TIME - 795)) | (1L << (SESSION_USER - 795)) | (1L << (SHA - 795)) | (1L << (SHA1 - 795)) | (1L << (SHA2 - 795)) | (1L << (SIGN - 795)) | (1L << (SIN - 795)) | (1L << (SLEEP - 795)) | (1L << (SOUNDEX - 795)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 795)) | (1L << (SQRT - 795)) | (1L << (SRID - 795)) | (1L << (STARTPOINT - 795)) | (1L << (STRCMP - 795)) | (1L << (STR_TO_DATE - 795)) | (1L << (ST_AREA - 795)) | (1L << (ST_ASBINARY - 795)) | (1L << (ST_ASTEXT - 795)) | (1L << (ST_ASWKB - 795)) | (1L << (ST_ASWKT - 795)) | (1L << (ST_BUFFER - 795)) | (1L << (ST_CENTROID - 795)) | (1L << (ST_CONTAINS - 795)) | (1L << (ST_CROSSES - 795)) | (1L << (ST_DIFFERENCE - 795)) | (1L << (ST_DIMENSION - 795)) | (1L << (ST_DISJOINT - 795)) | (1L << (ST_DISTANCE - 795)) | (1L << (ST_ENDPOINT - 795)) | (1L << (ST_ENVELOPE - 795)) | (1L << (ST_EQUALS - 795)) | (1L << (ST_EXTERIORRING - 795)) | (1L << (ST_GEOMCOLLFROMTEXT - 795)) | (1L << (ST_GEOMCOLLFROMTXT - 795)) | (1L << (ST_GEOMCOLLFROMWKB - 795)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 795)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 795)) | (1L << (ST_GEOMETRYFROMTEXT - 795)) | (1L << (ST_GEOMETRYFROMWKB - 795)) | (1L << (ST_GEOMETRYN - 795)) | (1L << (ST_GEOMETRYTYPE - 795)) | (1L << (ST_GEOMFROMTEXT - 795)) | (1L << (ST_GEOMFROMWKB - 795)) | (1L << (ST_INTERIORRINGN - 795)) | (1L << (ST_INTERSECTION - 795)) | (1L << (ST_INTERSECTS - 795)) | (1L << (ST_ISCLOSED - 795)))) != 0) || ((((_la - 859)) & ~0x3f) == 0 && ((1L << (_la - 859)) & ((1L << (ST_ISEMPTY - 859)) | (1L << (ST_ISSIMPLE - 859)) | (1L << (ST_LINEFROMTEXT - 859)) | (1L << (ST_LINEFROMWKB - 859)) | (1L << (ST_LINESTRINGFROMTEXT - 859)) | (1L << (ST_LINESTRINGFROMWKB - 859)) | (1L << (ST_NUMGEOMETRIES - 859)) | (1L << (ST_NUMINTERIORRING - 859)) | (1L << (ST_NUMINTERIORRINGS - 859)) | (1L << (ST_NUMPOINTS - 859)) | (1L << (ST_OVERLAPS - 859)) | (1L << (ST_POINTFROMTEXT - 859)) | (1L << (ST_POINTFROMWKB - 859)) | (1L << (ST_POINTN - 859)) | (1L << (ST_POLYFROMTEXT - 859)) | (1L << (ST_POLYFROMWKB - 859)) | (1L << (ST_POLYGONFROMTEXT - 859)) | (1L << (ST_POLYGONFROMWKB - 859)) | (1L << (ST_SRID - 859)) | (1L << (ST_STARTPOINT - 859)) | (1L << (ST_SYMDIFFERENCE - 859)) | (1L << (ST_TOUCHES - 859)) | (1L << (ST_UNION - 859)) | (1L << (ST_WITHIN - 859)) | (1L << (ST_X - 859)) | (1L << (ST_Y - 859)) | (1L << (SUBDATE - 859)) | (1L << (SUBSTRING_INDEX - 859)) | (1L << (SUBTIME - 859)) | (1L << (SYSTEM_USER - 859)) | (1L << (TAN - 859)) | (1L << (TIMEDIFF - 859)) | (1L << (TIMESTAMPADD - 859)) | (1L << (TIMESTAMPDIFF - 859)) | (1L << (TIME_FORMAT - 859)) | (1L << (TIME_TO_SEC - 859)) | (1L << (TOUCHES - 859)) | (1L << (TO_BASE64 - 859)) | (1L << (TO_DAYS - 859)) | (1L << (TO_SECONDS - 859)) | (1L << (UCASE - 859)) | (1L << (UNCOMPRESS - 859)) | (1L << (UNCOMPRESSED_LENGTH - 859)) | (1L << (UNHEX - 859)) | (1L << (UNIX_TIMESTAMP - 859)) | (1L << (UPDATEXML - 859)) | (1L << (UPPER - 859)) | (1L << (UUID - 859)) | (1L << (UUID_SHORT - 859)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 859)) | (1L << (VERSION - 859)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 859)) | (1L << (WEEKDAY - 859)) | (1L << (WEEKOFYEAR - 859)) | (1L << (WEIGHT_STRING - 859)) | (1L << (WITHIN - 859)) | (1L << (YEARWEEK - 859)) | (1L << (Y_FUNCTION - 859)) | (1L << (X_FUNCTION - 859)))) != 0) || ((((_la - 930)) & ~0x3f) == 0 && ((1L << (_la - 930)) & ((1L << (PLUS - 930)) | (1L << (MINUS - 930)) | (1L << (EXCLAMATION_SYMBOL - 930)) | (1L << (BIT_NOT_OP - 930)) | (1L << (LR_BRACKET - 930)) | (1L << (ZERO_DECIMAL - 930)) | (1L << (ONE_DECIMAL - 930)) | (1L << (TWO_DECIMAL - 930)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 930)) | (1L << (START_NATIONAL_STRING_LITERAL - 930)) | (1L << (STRING_LITERAL - 930)) | (1L << (DECIMAL_LITERAL - 930)) | (1L << (HEXADECIMAL_LITERAL - 930)) | (1L << (REAL_LITERAL - 930)) | (1L << (NULL_SPEC_LITERAL - 930)) | (1L << (BIT_STRING - 930)) | (1L << (STRING_CHARSET_NAME - 930)) | (1L << (ID - 930)) | (1L << (REVERSE_QUOTE_ID - 930)) | (1L << (LOCAL_ID - 930)) | (1L << (GLOBAL_ID - 930)))) != 0)) {
					{
					setState(5372);
					function_args();
					}
				}

				setState(5375);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Specific_function_callContext extends ParserRuleContext {
		public Specific_function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specific_function_call; }
	 
		public Specific_function_callContext() { }
		public void copyFrom(Specific_function_callContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ValuesFCallContext extends Specific_function_callContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public ValuesFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitValuesFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFCallContext extends Specific_function_callContext {
		public String_literalContext fstr;
		public ExpressionContext fexpr;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public Interval_typeContext interval_type() {
			return getRuleContext(Interval_typeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public String_literalContext string_literal() {
			return getRuleContext(String_literalContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExtractFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExtractFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExtractFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFCallContext extends Specific_function_callContext {
		public String_literalContext fstr;
		public ExpressionContext fexpr;
		public String_literalContext sstr;
		public ExpressionContext sexpr;
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public List<String_literalContext> string_literal() {
			return getRuleContexts(String_literalContext.class);
		}
		public String_literalContext string_literal(int i) {
			return getRuleContext(String_literalContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrimFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrimFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTrimFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFCallContext extends Specific_function_callContext {
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public String_literalContext string_literal() {
			return getRuleContext(String_literalContext.class,0);
		}
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public GetFormatFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGetFormatFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGetFormatFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGetFormatFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConvertDataTypeFCallContext extends Specific_function_callContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Data_type_to_convertContext data_type_to_convert() {
			return getRuleContext(Data_type_to_convertContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public ConvertDataTypeFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConvertDataTypeFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConvertDataTypeFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConvertDataTypeFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFCallContext extends Specific_function_callContext {
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public String_literalContext string_literal() {
			return getRuleContext(String_literalContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public Decimal_literalContext decimal_literal() {
			return getRuleContext(Decimal_literalContext.class,0);
		}
		public Levels_in_weight_stringContext levels_in_weight_string() {
			return getRuleContext(Levels_in_weight_stringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWeightFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWeightFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWeightFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSpecificFCallContext extends Specific_function_callContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public SimpleSpecificFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSpecificFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSpecificFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleSpecificFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFCallContext extends Specific_function_callContext {
		public Function_argContext function_arg;
		public List<Function_argContext> condarg = new ArrayList<Function_argContext>();
		public List<Function_argContext> resarg = new ArrayList<Function_argContext>();
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<TerminalNode> WHEN() { return getTokens(MySqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(MySqlParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(MySqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(MySqlParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<Function_argContext> function_arg() {
			return getRuleContexts(Function_argContext.class);
		}
		public Function_argContext function_arg(int i) {
			return getRuleContext(Function_argContext.class,i);
		}
		public CaseFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PositionFCallContext extends Specific_function_callContext {
		public String_literalContext fstr;
		public ExpressionContext fexpr;
		public String_literalContext sstr;
		public ExpressionContext sexpr;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<String_literalContext> string_literal() {
			return getRuleContexts(String_literalContext.class);
		}
		public String_literalContext string_literal(int i) {
			return getRuleContext(String_literalContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPositionFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPositionFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPositionFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFCallContext extends Specific_function_callContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public CharFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharFCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFCallContext extends Specific_function_callContext {
		public ExpressionContext fexpr;
		public Decimal_literalContext fdecimal;
		public ExpressionContext sexpr;
		public Decimal_literalContext sdecimal;
		public ExpressionContext texpr;
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public String_literalContext string_literal() {
			return getRuleContext(String_literalContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SubstrFCallContext(Specific_function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubstrFCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubstrFCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubstrFCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Specific_function_callContext specific_function_call() throws RecognitionException {
		Specific_function_callContext _localctx = new Specific_function_callContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_specific_function_call);
		int _la;
		try {
			setState(5544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
			case 1:
				_localctx = new SimpleSpecificFCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5379);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (CURRENT_DATE - 226)) | (1L << (CURRENT_TIME - 226)) | (1L << (CURRENT_TIMESTAMP - 226)) | (1L << (LOCALTIME - 226)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				_localctx = new ConvertDataTypeFCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5380);
				match(CONVERT);
				setState(5381);
				match(LR_BRACKET);
				setState(5382);
				expression(0);
				setState(5383);
				match(COMMA);
				setState(5384);
				data_type_to_convert();
				setState(5385);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new ConvertDataTypeFCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5387);
				match(CONVERT);
				setState(5388);
				match(LR_BRACKET);
				setState(5389);
				expression(0);
				setState(5390);
				match(USING);
				setState(5391);
				charset_name();
				setState(5392);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new ConvertDataTypeFCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5394);
				match(CAST);
				setState(5395);
				match(LR_BRACKET);
				setState(5396);
				expression(0);
				setState(5397);
				match(AS);
				setState(5398);
				data_type_to_convert();
				setState(5399);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5401);
				match(VALUES);
				setState(5402);
				match(LR_BRACKET);
				setState(5403);
				full_column_name();
				setState(5404);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseFCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5406);
				match(CASE);
				setState(5407);
				expression(0);
				setState(5413); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5408);
					match(WHEN);
					setState(5409);
					((CaseFCallContext)_localctx).function_arg = function_arg();
					((CaseFCallContext)_localctx).condarg.add(((CaseFCallContext)_localctx).function_arg);
					setState(5410);
					match(THEN);
					setState(5411);
					((CaseFCallContext)_localctx).function_arg = function_arg();
					((CaseFCallContext)_localctx).resarg.add(((CaseFCallContext)_localctx).function_arg);
					}
					}
					setState(5415); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5417);
					match(ELSE);
					setState(5418);
					function_arg();
					}
				}

				setState(5421);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5423);
				match(CASE);
				setState(5429); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5424);
					match(WHEN);
					setState(5425);
					((CaseFCallContext)_localctx).function_arg = function_arg();
					((CaseFCallContext)_localctx).condarg.add(((CaseFCallContext)_localctx).function_arg);
					setState(5426);
					match(THEN);
					setState(5427);
					((CaseFCallContext)_localctx).function_arg = function_arg();
					((CaseFCallContext)_localctx).resarg.add(((CaseFCallContext)_localctx).function_arg);
					}
					}
					setState(5431); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5433);
					match(ELSE);
					setState(5434);
					function_arg();
					}
				}

				setState(5437);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5439);
				match(CHAR);
				setState(5440);
				match(LR_BRACKET);
				setState(5441);
				function_args();
				setState(5444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5442);
					match(USING);
					setState(5443);
					charset_name();
					}
				}

				setState(5446);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5448);
				match(POSITION);
				setState(5449);
				match(LR_BRACKET);
				setState(5452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
				case 1:
					{
					setState(5450);
					((PositionFCallContext)_localctx).fstr = string_literal();
					}
					break;
				case 2:
					{
					setState(5451);
					((PositionFCallContext)_localctx).fexpr = expression(0);
					}
					break;
				}
				setState(5454);
				match(IN);
				setState(5457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
				case 1:
					{
					setState(5455);
					((PositionFCallContext)_localctx).sstr = string_literal();
					}
					break;
				case 2:
					{
					setState(5456);
					((PositionFCallContext)_localctx).sexpr = expression(0);
					}
					break;
				}
				setState(5459);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5461);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5462);
				match(LR_BRACKET);
				setState(5465);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
				case 1:
					{
					setState(5463);
					string_literal();
					}
					break;
				case 2:
					{
					setState(5464);
					((SubstrFCallContext)_localctx).fexpr = expression(0);
					}
					break;
				}
				setState(5467);
				match(FROM);
				setState(5470);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
				case 1:
					{
					setState(5468);
					((SubstrFCallContext)_localctx).fdecimal = decimal_literal();
					}
					break;
				case 2:
					{
					setState(5469);
					((SubstrFCallContext)_localctx).sexpr = expression(0);
					}
					break;
				}
				setState(5477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5472);
					match(FOR);
					setState(5475);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
					case 1:
						{
						setState(5473);
						((SubstrFCallContext)_localctx).sdecimal = decimal_literal();
						}
						break;
					case 2:
						{
						setState(5474);
						((SubstrFCallContext)_localctx).texpr = expression(0);
						}
						break;
					}
					}
				}

				setState(5479);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5481);
				match(TRIM);
				setState(5482);
				match(LR_BRACKET);
				setState(5483);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5486);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
				case 1:
					{
					setState(5484);
					((TrimFCallContext)_localctx).fstr = string_literal();
					}
					break;
				case 2:
					{
					setState(5485);
					((TrimFCallContext)_localctx).fexpr = expression(0);
					}
					break;
				}
				setState(5488);
				match(FROM);
				setState(5491);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(5489);
					((TrimFCallContext)_localctx).sstr = string_literal();
					}
					break;
				case 2:
					{
					setState(5490);
					((TrimFCallContext)_localctx).sexpr = expression(0);
					}
					break;
				}
				setState(5493);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5495);
				match(TRIM);
				setState(5496);
				match(LR_BRACKET);
				setState(5499);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
				case 1:
					{
					setState(5497);
					((TrimFCallContext)_localctx).fstr = string_literal();
					}
					break;
				case 2:
					{
					setState(5498);
					((TrimFCallContext)_localctx).fexpr = expression(0);
					}
					break;
				}
				setState(5501);
				match(FROM);
				setState(5504);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					setState(5502);
					((TrimFCallContext)_localctx).sstr = string_literal();
					}
					break;
				case 2:
					{
					setState(5503);
					((TrimFCallContext)_localctx).sexpr = expression(0);
					}
					break;
				}
				setState(5506);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5508);
				match(WEIGHT_STRING);
				setState(5509);
				match(LR_BRACKET);
				setState(5512);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(5510);
					string_literal();
					}
					break;
				case 2:
					{
					setState(5511);
					expression(0);
					}
					break;
				}
				setState(5520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5514);
					match(AS);
					setState(5515);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5516);
					match(LR_BRACKET);
					setState(5517);
					decimal_literal();
					setState(5518);
					match(RR_BRACKET);
					}
				}

				setState(5523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(5522);
					levels_in_weight_string();
					}
				}

				setState(5525);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5527);
				match(EXTRACT);
				setState(5528);
				match(LR_BRACKET);
				setState(5529);
				interval_type();
				setState(5530);
				match(FROM);
				setState(5533);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					setState(5531);
					((ExtractFCallContext)_localctx).fstr = string_literal();
					}
					break;
				case 2:
					{
					setState(5532);
					((ExtractFCallContext)_localctx).fexpr = expression(0);
					}
					break;
				}
				setState(5535);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5537);
				match(GET_FORMAT);
				setState(5538);
				match(LR_BRACKET);
				setState(5539);
				_la = _input.LA(1);
				if ( !(((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (DATETIME - 181)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5540);
				match(COMMA);
				setState(5541);
				string_literal();
				setState(5542);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Levels_in_weight_stringContext extends ParserRuleContext {
		public Levels_in_weight_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levels_in_weight_string; }
	 
		public Levels_in_weight_stringContext() { }
		public void copyFrom(Levels_in_weight_stringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightFRangeContext extends Levels_in_weight_stringContext {
		public Decimal_literalContext firstlevel;
		public Decimal_literalContext lastlevel;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public LevelWeightFRangeContext(Levels_in_weight_stringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightFRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightFRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightFRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightFListContext extends Levels_in_weight_stringContext {
		public Decimal_literalContext firstlevel;
		public Token firstord;
		public Decimal_literalContext decimal_literal;
		public List<Decimal_literalContext> nextlevel = new ArrayList<Decimal_literalContext>();
		public Token ASC;
		public List<Token> nextord = new ArrayList<Token>();
		public Token DESC;
		public Token REVERSE;
		public Token _tset12184;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<Decimal_literalContext> decimal_literal() {
			return getRuleContexts(Decimal_literalContext.class);
		}
		public Decimal_literalContext decimal_literal(int i) {
			return getRuleContext(Decimal_literalContext.class,i);
		}
		public List<TerminalNode> ASC() { return getTokens(MySqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(MySqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(MySqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(MySqlParser.DESC, i);
		}
		public List<TerminalNode> REVERSE() { return getTokens(MySqlParser.REVERSE); }
		public TerminalNode REVERSE(int i) {
			return getToken(MySqlParser.REVERSE, i);
		}
		public LevelWeightFListContext(Levels_in_weight_stringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightFList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightFList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightFList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Levels_in_weight_stringContext levels_in_weight_string() throws RecognitionException {
		Levels_in_weight_stringContext _localctx = new Levels_in_weight_stringContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_levels_in_weight_string);
		int _la;
		try {
			setState(5566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				_localctx = new LevelWeightFListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5546);
				match(LEVEL);
				setState(5547);
				((LevelWeightFListContext)_localctx).firstlevel = decimal_literal();
				setState(5549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC || _la==REVERSE) {
					{
					setState(5548);
					((LevelWeightFListContext)_localctx).firstord = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
						((LevelWeightFListContext)_localctx).firstord = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5551);
					match(COMMA);
					setState(5552);
					((LevelWeightFListContext)_localctx).decimal_literal = decimal_literal();
					((LevelWeightFListContext)_localctx).nextlevel.add(((LevelWeightFListContext)_localctx).decimal_literal);
					setState(5554);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC || _la==DESC || _la==REVERSE) {
						{
						setState(5553);
						((LevelWeightFListContext)_localctx)._tset12184 = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
							((LevelWeightFListContext)_localctx)._tset12184 = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						((LevelWeightFListContext)_localctx).nextord.add(((LevelWeightFListContext)_localctx)._tset12184);
						}
					}

					}
					}
					setState(5560);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightFRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5561);
				match(LEVEL);
				setState(5562);
				((LevelWeightFRangeContext)_localctx).firstlevel = decimal_literal();
				setState(5563);
				match(MINUS);
				setState(5564);
				((LevelWeightFRangeContext)_localctx).lastlevel = decimal_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public Function_argContext function_arg() {
			return getRuleContext(Function_argContext.class,0);
		}
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public Function_argsContext function_args() {
			return getRuleContext(Function_argsContext.class,0);
		}
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregate_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregate_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregate_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(5624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5568);
				_la = _input.LA(1);
				if ( !(((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (AVG - 210)) | (1L << (MAX - 210)) | (1L << (MIN - 210)) | (1L << (SUM - 210)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5569);
				match(LR_BRACKET);
				setState(5571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(5570);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5573);
				function_arg();
				setState(5574);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5576);
				match(COUNT);
				setState(5577);
				match(LR_BRACKET);
				setState(5583);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(5578);
					match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case CAST:
				case CONVERT:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FALSE:
				case IF:
				case INTERVAL:
				case LEFT:
				case NOTNULL:
				case NOT:
				case NULL_LITERAL:
				case REPLACE:
				case RIGHT:
				case TRUE:
				case VALUES:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case EXTRACT:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACTION:
				case AFTER:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTRIBUTORS:
				case COPY:
				case DATA:
				case DATAFILE:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FIELDS:
				case FIRST:
				case FIXED:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IMPORT:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INVOKER:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONLINE:
				case ONLY:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PLUGINS:
				case PORT:
				case PRESERVE:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATION:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STORAGE:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WORK:
				case WRAPPER:
				case X509:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case PLUS:
				case MINUS:
				case EXCLAMATION_SYMBOL:
				case BIT_NOT_OP:
				case LR_BRACKET:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case CHARSET_REVERSE_QOUTE_STRING:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
				case STRING_CHARSET_NAME:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(5580);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(5579);
						match(ALL);
						}
					}

					setState(5582);
					function_arg();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5585);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5586);
				match(COUNT);
				setState(5587);
				match(LR_BRACKET);
				setState(5588);
				match(DISTINCT);
				setState(5589);
				function_args();
				setState(5590);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5592);
				_la = _input.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (BIT_AND - 211)) | (1L << (BIT_OR - 211)) | (1L << (BIT_XOR - 211)) | (1L << (STD - 211)) | (1L << (STDDEV - 211)) | (1L << (STDDEV_POP - 211)) | (1L << (STDDEV_SAMP - 211)) | (1L << (VAR_POP - 211)) | (1L << (VAR_SAMP - 211)) | (1L << (VARIANCE - 211)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5593);
				match(LR_BRACKET);
				setState(5595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(5594);
					match(ALL);
					}
				}

				setState(5597);
				function_arg();
				setState(5598);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5600);
				match(GROUP_CONCAT);
				setState(5601);
				match(LR_BRACKET);
				setState(5603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(5602);
					match(DISTINCT);
					}
				}

				setState(5605);
				function_args();
				setState(5616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(5606);
					match(ORDER);
					setState(5607);
					match(BY);
					setState(5608);
					order_by_expression();
					setState(5613);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5609);
						match(COMMA);
						setState(5610);
						order_by_expression();
						}
						}
						setState(5615);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(5618);
					match(SEPARATOR);
					setState(5619);
					match(STRING_LITERAL);
					}
				}

				setState(5622);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Function_name_baseContext function_name_base() {
			return getRuleContext(Function_name_baseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalar_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalar_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalar_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_scalar_function_name);
		try {
			setState(5648);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case COUNT:
			case POSITION:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5626);
				function_name_base();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(5627);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5628);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5629);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(5630);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(5631);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(5632);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(5633);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(5634);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(5635);
				match(IF);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 11);
				{
				setState(5636);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 12);
				{
				setState(5637);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 13);
				{
				setState(5638);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 14);
				{
				setState(5639);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 15);
				{
				setState(5640);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 16);
				{
				setState(5641);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 17);
				{
				setState(5642);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 18);
				{
				setState(5643);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 19);
				{
				setState(5644);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 20);
				{
				setState(5645);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 21);
				{
				setState(5646);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 22);
				{
				setState(5647);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Function_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunction_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunction_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunction_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argsContext function_args() throws RecognitionException {
		Function_argsContext _localctx = new Function_argsContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_function_args);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
			case 1:
				{
				setState(5650);
				constant();
				}
				break;
			case 2:
				{
				setState(5651);
				full_column_name();
				}
				break;
			case 3:
				{
				setState(5652);
				function_call();
				}
				break;
			case 4:
				{
				setState(5653);
				expression(0);
				}
				break;
			}
			setState(5665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5656);
				match(COMMA);
				setState(5661);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
				case 1:
					{
					setState(5657);
					constant();
					}
					break;
				case 2:
					{
					setState(5658);
					full_column_name();
					}
					break;
				case 3:
					{
					setState(5659);
					function_call();
					}
					break;
				case 4:
					{
					setState(5660);
					expression(0);
					}
					break;
				}
				}
				}
				setState(5667);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Function_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunction_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunction_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunction_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argContext function_arg() throws RecognitionException {
		Function_argContext _localctx = new Function_argContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_function_arg);
		try {
			setState(5672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5668);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5669);
				full_column_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5670);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5671);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Boolean_primaryContext boolean_primary() {
			return getRuleContext(Boolean_primaryContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 544;
		enterRecursionRule(_localctx, 544, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,837,_ctx) ) {
			case 1:
				{
				setState(5675);
				match(NOT);
				setState(5676);
				expression(4);
				}
				break;
			case 2:
				{
				setState(5677);
				match(EXCLAMATION_SYMBOL);
				setState(5678);
				expression(3);
				}
				break;
			case 3:
				{
				setState(5679);
				boolean_primary(0);
				setState(5680);
				match(IS);
				setState(5682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5681);
					match(NOT);
					}
				}

				setState(5684);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				{
				setState(5686);
				boolean_primary(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5708);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5706);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(5689);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(5690);
						match(OR);
						setState(5691);
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(5692);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(5693);
						match(BIT_OR_OP);
						setState(5694);
						match(BIT_OR_OP);
						setState(5695);
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(5696);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5697);
						match(XOR);
						setState(5698);
						expression(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(5699);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5700);
						match(AND);
						setState(5701);
						expression(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(5702);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5703);
						match(BIT_AND_OP);
						setState(5704);
						match(BIT_AND_OP);
						setState(5705);
						expression(6);
						}
						break;
					}
					} 
				}
				setState(5710);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Boolean_primaryContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public Boolean_primaryContext boolean_primary() {
			return getRuleContext(Boolean_primaryContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public Boolean_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBoolean_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBoolean_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBoolean_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Boolean_primaryContext boolean_primary() throws RecognitionException {
		return boolean_primary(0);
	}

	private Boolean_primaryContext boolean_primary(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Boolean_primaryContext _localctx = new Boolean_primaryContext(_ctx, _parentState);
		Boolean_primaryContext _prevctx = _localctx;
		int _startState = 546;
		enterRecursionRule(_localctx, 546, RULE_boolean_primary, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5712);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(5735);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,841,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5733);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
					case 1:
						{
						_localctx = new Boolean_primaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_boolean_primary);
						setState(5714);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5715);
						match(IS);
						setState(5716);
						null_notnull();
						}
						break;
					case 2:
						{
						_localctx = new Boolean_primaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_boolean_primary);
						setState(5717);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5718);
						match(LESS_SYMBOL);
						setState(5719);
						match(EQUAL_SYMBOL);
						setState(5720);
						match(GREATER_SYMBOL);
						setState(5721);
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new Boolean_primaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_boolean_primary);
						setState(5722);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5723);
						comparison_operator();
						setState(5724);
						predicate();
						}
						break;
					case 4:
						{
						_localctx = new Boolean_primaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_boolean_primary);
						setState(5726);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5727);
						comparison_operator();
						setState(5728);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5729);
						match(LR_BRACKET);
						setState(5730);
						subquery();
						setState(5731);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(5737);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,841,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparison_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitComparison_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_comparison_operator);
		try {
			setState(5749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5738);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5739);
				match(GREATER_SYMBOL);
				setState(5740);
				match(EQUAL_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5741);
				match(GREATER_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5742);
				match(LESS_SYMBOL);
				setState(5743);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5744);
				match(LESS_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5745);
				match(LESS_SYMBOL);
				setState(5746);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5747);
				match(EXCLAMATION_SYMBOL);
				setState(5748);
				match(EQUAL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public List<Bit_exprContext> bit_expr() {
			return getRuleContexts(Bit_exprContext.class);
		}
		public Bit_exprContext bit_expr(int i) {
			return getRuleContext(Bit_exprContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public List<Simple_exprContext> simple_expr() {
			return getRuleContexts(Simple_exprContext.class);
		}
		public Simple_exprContext simple_expr(int i) {
			return getRuleContext(Simple_exprContext.class,i);
		}
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_predicate);
		int _la;
		try {
			setState(5801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5751);
				bit_expr(0);
				setState(5753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5752);
					match(NOT);
					}
				}

				setState(5755);
				match(IN);
				setState(5756);
				match(LR_BRACKET);
				setState(5757);
				subquery();
				setState(5758);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5760);
				bit_expr(0);
				setState(5762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5761);
					match(NOT);
					}
				}

				setState(5764);
				match(IN);
				setState(5765);
				match(LR_BRACKET);
				setState(5766);
				expression_list();
				setState(5767);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5769);
				bit_expr(0);
				setState(5771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5770);
					match(NOT);
					}
				}

				setState(5773);
				match(BETWEEN);
				setState(5774);
				bit_expr(0);
				setState(5775);
				match(AND);
				setState(5776);
				predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5778);
				bit_expr(0);
				setState(5779);
				match(SOUNDS);
				setState(5780);
				match(LIKE);
				setState(5781);
				bit_expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5783);
				bit_expr(0);
				setState(5785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5784);
					match(NOT);
					}
				}

				setState(5787);
				match(LIKE);
				setState(5788);
				simple_expr(0);
				setState(5791);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
				case 1:
					{
					setState(5789);
					match(ESCAPE);
					setState(5790);
					simple_expr(0);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5793);
				bit_expr(0);
				setState(5795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5794);
					match(NOT);
					}
				}

				setState(5797);
				match(REGEXP);
				setState(5798);
				bit_expr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5800);
				bit_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_exprContext extends ParserRuleContext {
		public Simple_exprContext simple_expr() {
			return getRuleContext(Simple_exprContext.class,0);
		}
		public List<Bit_exprContext> bit_expr() {
			return getRuleContexts(Bit_exprContext.class);
		}
		public Bit_exprContext bit_expr(int i) {
			return getRuleContext(Bit_exprContext.class,i);
		}
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public Bit_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBit_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBit_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBit_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_exprContext bit_expr() throws RecognitionException {
		return bit_expr(0);
	}

	private Bit_exprContext bit_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Bit_exprContext _localctx = new Bit_exprContext(_ctx, _parentState);
		Bit_exprContext _prevctx = _localctx;
		int _startState = 552;
		enterRecursionRule(_localctx, 552, RULE_bit_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5804);
			simple_expr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(5846);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,851,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5844);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
					case 1:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5806);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(5807);
						match(BIT_OR_OP);
						setState(5808);
						bit_expr(14);
						}
						break;
					case 2:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5809);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(5810);
						match(BIT_AND_OP);
						setState(5811);
						bit_expr(13);
						}
						break;
					case 3:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5812);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(5813);
						match(LESS_SYMBOL);
						setState(5814);
						match(LESS_SYMBOL);
						setState(5815);
						bit_expr(12);
						}
						break;
					case 4:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5816);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(5817);
						match(GREATER_SYMBOL);
						setState(5818);
						match(GREATER_SYMBOL);
						setState(5819);
						bit_expr(11);
						}
						break;
					case 5:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5820);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(5821);
						match(PLUS);
						setState(5822);
						bit_expr(10);
						}
						break;
					case 6:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5823);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(5824);
						match(MINUS);
						setState(5825);
						bit_expr(9);
						}
						break;
					case 7:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5826);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5827);
						match(STAR);
						setState(5828);
						bit_expr(8);
						}
						break;
					case 8:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5829);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5830);
						match(DIVIDE);
						setState(5831);
						bit_expr(7);
						}
						break;
					case 9:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5832);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5833);
						match(DIV);
						setState(5834);
						bit_expr(6);
						}
						break;
					case 10:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5835);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5836);
						match(MOD);
						setState(5837);
						bit_expr(5);
						}
						break;
					case 11:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5838);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5839);
						match(MODULE);
						setState(5840);
						bit_expr(4);
						}
						break;
					case 12:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(5841);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5842);
						match(BIT_XOR_OP);
						setState(5843);
						bit_expr(3);
						}
						break;
					}
					} 
				}
				setState(5848);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,851,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Simple_exprContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Mysql_variableContext mysql_variable() {
			return getRuleContext(Mysql_variableContext.class,0);
		}
		public List<Simple_exprContext> simple_expr() {
			return getRuleContexts(Simple_exprContext.class);
		}
		public Simple_exprContext simple_expr(int i) {
			return getRuleContext(Simple_exprContext.class,i);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public Interval_exprContext interval_expr() {
			return getRuleContext(Interval_exprContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Simple_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimple_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimple_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimple_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_exprContext simple_expr() throws RecognitionException {
		return simple_expr(0);
	}

	private Simple_exprContext simple_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Simple_exprContext _localctx = new Simple_exprContext(_ctx, _parentState);
		Simple_exprContext _prevctx = _localctx;
		int _startState = 554;
		enterRecursionRule(_localctx, 554, RULE_simple_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
			case 1:
				{
				setState(5850);
				match(DEFAULT);
				}
				break;
			case 2:
				{
				setState(5851);
				constant();
				}
				break;
			case 3:
				{
				setState(5852);
				full_column_name();
				}
				break;
			case 4:
				{
				setState(5853);
				function_call();
				}
				break;
			case 5:
				{
				setState(5854);
				mysql_variable();
				}
				break;
			case 6:
				{
				setState(5855);
				match(PLUS);
				setState(5856);
				simple_expr(10);
				}
				break;
			case 7:
				{
				setState(5857);
				match(MINUS);
				setState(5858);
				simple_expr(9);
				}
				break;
			case 8:
				{
				setState(5859);
				match(BIT_NOT_OP);
				setState(5860);
				simple_expr(8);
				}
				break;
			case 9:
				{
				setState(5861);
				match(EXCLAMATION_SYMBOL);
				setState(5862);
				simple_expr(7);
				}
				break;
			case 10:
				{
				setState(5863);
				match(BINARY);
				setState(5864);
				simple_expr(6);
				}
				break;
			case 11:
				{
				setState(5865);
				match(LR_BRACKET);
				setState(5866);
				expression_list();
				setState(5867);
				match(RR_BRACKET);
				}
				break;
			case 12:
				{
				setState(5869);
				match(ROW);
				setState(5870);
				match(LR_BRACKET);
				setState(5871);
				expression(0);
				setState(5872);
				match(COMMA);
				setState(5873);
				expression_list();
				setState(5874);
				match(RR_BRACKET);
				}
				break;
			case 13:
				{
				setState(5876);
				match(LR_BRACKET);
				setState(5877);
				subquery();
				setState(5878);
				match(RR_BRACKET);
				}
				break;
			case 14:
				{
				setState(5880);
				match(EXISTS);
				setState(5881);
				match(LR_BRACKET);
				setState(5882);
				subquery();
				setState(5883);
				match(RR_BRACKET);
				}
				break;
			case 15:
				{
				setState(5885);
				interval_expr();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5897);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,854,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5895);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
					case 1:
						{
						_localctx = new Simple_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_expr);
						setState(5888);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(5889);
						match(BIT_OR_OP);
						setState(5890);
						match(BIT_OR_OP);
						setState(5891);
						simple_expr(12);
						}
						break;
					case 2:
						{
						_localctx = new Simple_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_expr);
						setState(5892);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(5893);
						match(COLLATE);
						setState(5894);
						collation_name();
						}
						break;
					}
					} 
				}
				setState(5899);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,854,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Charset_name_baseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public Charset_name_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset_name_base; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharset_name_base(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharset_name_base(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharset_name_base(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Charset_name_baseContext charset_name_base() throws RecognitionException {
		Charset_name_baseContext _localctx = new Charset_name_baseContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_charset_name_base);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5900);
			_la = _input.LA(1);
			if ( !(((((_la - 566)) & ~0x3f) == 0 && ((1L << (_la - 566)) & ((1L << (ARMSCII8 - 566)) | (1L << (ASCII - 566)) | (1L << (BIG5 - 566)) | (1L << (CP1250 - 566)) | (1L << (CP1251 - 566)) | (1L << (CP1256 - 566)) | (1L << (CP1257 - 566)) | (1L << (CP850 - 566)) | (1L << (CP852 - 566)) | (1L << (CP866 - 566)) | (1L << (CP932 - 566)) | (1L << (DEC8 - 566)) | (1L << (EUCJPMS - 566)) | (1L << (EUCKR - 566)) | (1L << (GB2312 - 566)) | (1L << (GBK - 566)) | (1L << (GEOSTD8 - 566)) | (1L << (GREEK - 566)) | (1L << (HEBREW - 566)) | (1L << (HP8 - 566)) | (1L << (KEYBCS2 - 566)) | (1L << (KOI8R - 566)) | (1L << (KOI8U - 566)) | (1L << (LATIN1 - 566)) | (1L << (LATIN2 - 566)) | (1L << (LATIN5 - 566)) | (1L << (LATIN7 - 566)) | (1L << (MACCE - 566)) | (1L << (MACROMAN - 566)) | (1L << (SJIS - 566)) | (1L << (SWE7 - 566)) | (1L << (TIS620 - 566)) | (1L << (UCS2 - 566)) | (1L << (UJIS - 566)) | (1L << (UTF16 - 566)) | (1L << (UTF16LE - 566)) | (1L << (UTF32 - 566)) | (1L << (UTF8 - 566)) | (1L << (UTF8MB3 - 566)) | (1L << (UTF8MB4 - 566)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_level_baseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public Transaction_level_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_level_base; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransaction_level_base(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransaction_level_base(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransaction_level_base(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_level_baseContext transaction_level_base() throws RecognitionException {
		Transaction_level_baseContext _localctx = new Transaction_level_baseContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_transaction_level_base);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5902);
			_la = _input.LA(1);
			if ( !(((((_la - 617)) & ~0x3f) == 0 && ((1L << (_la - 617)) & ((1L << (REPEATABLE - 617)) | (1L << (COMMITTED - 617)) | (1L << (UNCOMMITTED - 617)) | (1L << (SERIALIZABLE - 617)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privileges_baseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public Privileges_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges_base; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivileges_base(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivileges_base(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivileges_base(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privileges_baseContext privileges_base() throws RecognitionException {
		Privileges_baseContext _localctx = new Privileges_baseContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_privileges_base);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5904);
			_la = _input.LA(1);
			if ( !(((((_la - 557)) & ~0x3f) == 0 && ((1L << (_la - 557)) & ((1L << (TABLES - 557)) | (1L << (ROUTINE - 557)) | (1L << (EXECUTE - 557)) | (1L << (FILE - 557)) | (1L << (PROCESS - 557)) | (1L << (RELOAD - 557)) | (1L << (SHUTDOWN - 557)) | (1L << (SUPER - 557)) | (1L << (PRIVILEGES - 557)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_type_baseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public Interval_type_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_type_base; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInterval_type_base(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInterval_type_base(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInterval_type_base(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_type_baseContext interval_type_base() throws RecognitionException {
		Interval_type_baseContext _localctx = new Interval_type_baseContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_interval_type_base);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5906);
			_la = _input.LA(1);
			if ( !(((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & ((1L << (QUARTER - 549)) | (1L << (MONTH - 549)) | (1L << (DAY - 549)) | (1L << (HOUR - 549)) | (1L << (MINUTE - 549)) | (1L << (WEEK - 549)) | (1L << (SECOND - 549)) | (1L << (MICROSECOND - 549)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_type_baseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public Data_type_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type_base; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterData_type_base(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitData_type_base(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitData_type_base(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_type_baseContext data_type_base() throws RecognitionException {
		Data_type_baseContext _localctx = new Data_type_baseContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_data_type_base);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5908);
			_la = _input.LA(1);
			if ( !(((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (TEXT - 181)) | (1L << (ENUM - 181)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keywords_can_be_idContext extends ParserRuleContext {
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public Keywords_can_be_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywords_can_be_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywords_can_be_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywords_can_be_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKeywords_can_be_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Keywords_can_be_idContext keywords_can_be_id() throws RecognitionException {
		Keywords_can_be_idContext _localctx = new Keywords_can_be_idContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_keywords_can_be_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5910);
			_la = _input.LA(1);
			if ( !(((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (ACTION - 246)) | (1L << (AFTER - 246)) | (1L << (ALGORITHM - 246)) | (1L << (ANY - 246)) | (1L << (AT - 246)) | (1L << (AUTHORS - 246)) | (1L << (AUTOCOMMIT - 246)) | (1L << (AUTOEXTEND_SIZE - 246)) | (1L << (AUTO_INCREMENT - 246)) | (1L << (AVG_ROW_LENGTH - 246)) | (1L << (BEGIN - 246)) | (1L << (BINLOG - 246)) | (1L << (BIT - 246)) | (1L << (BTREE - 246)) | (1L << (CASCADED - 246)) | (1L << (CHAIN - 246)) | (1L << (CHECKSUM - 246)) | (1L << (CIPHER - 246)) | (1L << (CLIENT - 246)) | (1L << (COALESCE - 246)) | (1L << (CODE - 246)) | (1L << (COLUMNS - 246)) | (1L << (COLUMN_FORMAT - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETION - 246)) | (1L << (COMPRESSED - 246)) | (1L << (CONCURRENT - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONTAINS - 246)) | (1L << (CONTRIBUTORS - 246)) | (1L << (COPY - 246)) | (1L << (DATA - 246)) | (1L << (DATAFILE - 246)) | (1L << (DEFINER - 246)) | (1L << (DELAY_KEY_WRITE - 246)) | (1L << (DIRECTORY - 246)) | (1L << (DISABLE - 246)) | (1L << (DISCARD - 246)) | (1L << (DISK - 246)) | (1L << (DO - 246)) | (1L << (DUMPFILE - 246)) | (1L << (DUPLICATE - 246)) | (1L << (DYNAMIC - 246)) | (1L << (ENABLE - 246)) | (1L << (ENDS - 246)) | (1L << (ENGINE - 246)) | (1L << (ENGINES - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (ERRORS - 311)) | (1L << (ESCAPE - 311)) | (1L << (EVEN - 311)) | (1L << (EVENT - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCHANGE - 311)) | (1L << (EXCLUSIVE - 311)) | (1L << (EXPIRE - 311)) | (1L << (EXTENT_SIZE - 311)) | (1L << (FIELDS - 311)) | (1L << (FIRST - 311)) | (1L << (FIXED - 311)) | (1L << (FULL - 311)) | (1L << (FUNCTION - 311)) | (1L << (GLOBAL - 311)) | (1L << (GRANTS - 311)) | (1L << (HASH - 311)) | (1L << (HOST - 311)) | (1L << (IDENTIFIED - 311)) | (1L << (IMPORT - 311)) | (1L << (INITIAL_SIZE - 311)) | (1L << (INPLACE - 311)) | (1L << (INSERT_METHOD - 311)) | (1L << (INVOKER - 311)) | (1L << (ISOLATION - 311)) | (1L << (ISSUER - 311)) | (1L << (KEY_BLOCK_SIZE - 311)) | (1L << (LANGUAGE - 311)) | (1L << (LAST - 311)) | (1L << (LESS - 311)) | (1L << (LEVEL - 311)) | (1L << (LIST - 311)) | (1L << (LOCAL - 311)) | (1L << (LOGFILE - 311)) | (1L << (LOGS - 311)) | (1L << (MASTER - 311)))) != 0) || ((((_la - 391)) & ~0x3f) == 0 && ((1L << (_la - 391)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 391)) | (1L << (MAX_QUERIES_PER_HOUR - 391)) | (1L << (MAX_ROWS - 391)) | (1L << (MAX_SIZE - 391)) | (1L << (MAX_UPDATES_PER_HOUR - 391)) | (1L << (MAX_USER_CONNECTIONS - 391)) | (1L << (MERGE - 391)) | (1L << (MID - 391)) | (1L << (MIN_ROWS - 391)) | (1L << (MODIFY - 391)) | (1L << (MUTEX - 391)) | (1L << (MYSQL - 391)) | (1L << (NAME - 391)) | (1L << (NAMES - 391)) | (1L << (NCHAR - 391)) | (1L << (NO - 391)) | (1L << (NODEGROUP - 391)) | (1L << (NONE - 391)) | (1L << (OFFLINE - 391)) | (1L << (OFFSET - 391)) | (1L << (OJ - 391)) | (1L << (OLD_PASSWORD - 391)) | (1L << (ONLINE - 391)) | (1L << (ONLY - 391)) | (1L << (OPTIONS - 391)) | (1L << (OWNER - 391)) | (1L << (PACK_KEYS - 391)) | (1L << (PARSER - 391)) | (1L << (PARTIAL - 391)) | (1L << (PARTITIONING - 391)) | (1L << (PARTITIONS - 391)) | (1L << (PASSWORD - 391)) | (1L << (PLUGINS - 391)) | (1L << (PORT - 391)) | (1L << (PRESERVE - 391)) | (1L << (PROCESSLIST - 391)) | (1L << (PROFILE - 391)) | (1L << (PROFILES - 391)) | (1L << (PROXY - 391)) | (1L << (QUERY - 391)) | (1L << (QUICK - 391)) | (1L << (REBUILD - 391)) | (1L << (REDO_BUFFER_SIZE - 391)) | (1L << (REDUNDANT - 391)) | (1L << (RELAYLOG - 391)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REMOVE - 455)) | (1L << (REORGANIZE - 455)) | (1L << (REPAIR - 455)) | (1L << (REPLICATION - 455)) | (1L << (RETURNS - 455)) | (1L << (ROLLBACK - 455)) | (1L << (ROLLUP - 455)) | (1L << (ROW - 455)) | (1L << (ROWS - 455)) | (1L << (ROW_FORMAT - 455)) | (1L << (SAVEPOINT - 455)) | (1L << (SCHEDULE - 455)) | (1L << (SECURITY - 455)) | (1L << (SERVER - 455)) | (1L << (SESSION - 455)) | (1L << (SHARE - 455)) | (1L << (SHARED - 455)) | (1L << (SIGNED - 455)) | (1L << (SIMPLE - 455)) | (1L << (SLAVE - 455)) | (1L << (SNAPSHOT - 455)) | (1L << (SOCKET - 455)) | (1L << (SOME - 455)) | (1L << (SOUNDS - 455)) | (1L << (SQL_BUFFER_RESULT - 455)) | (1L << (SQL_CACHE - 455)) | (1L << (SQL_NO_CACHE - 455)) | (1L << (START - 455)) | (1L << (STARTS - 455)) | (1L << (STATS_AUTO_RECALC - 455)) | (1L << (STATS_PERSISTENT - 455)) | (1L << (STATS_SAMPLE_PAGES - 455)) | (1L << (STATUS - 455)) | (1L << (STORAGE - 455)) | (1L << (SUBJECT - 455)) | (1L << (SUBPARTITION - 455)) | (1L << (SUBPARTITIONS - 455)) | (1L << (TABLESPACE - 455)) | (1L << (TEMPORARY - 455)) | (1L << (TEMPTABLE - 455)) | (1L << (THAN - 455)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (TRANSACTION - 519)) | (1L << (TRUNCATE - 519)) | (1L << (UNDEFINED - 519)) | (1L << (UNDOFILE - 519)) | (1L << (UNDO_BUFFER_SIZE - 519)) | (1L << (UNKNOWN - 519)) | (1L << (UPGRADE - 519)) | (1L << (USER - 519)) | (1L << (VALUE - 519)) | (1L << (VARIABLES - 519)) | (1L << (VIEW - 519)) | (1L << (WAIT - 519)) | (1L << (WARNINGS - 519)) | (1L << (WORK - 519)) | (1L << (WRAPPER - 519)) | (1L << (X509 - 519)) | (1L << (XML - 519)))) != 0) || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_name_baseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public Function_name_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name_base; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunction_name_base(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunction_name_base(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunction_name_base(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_name_baseContext function_name_base() throws RecognitionException {
		Function_name_baseContext _localctx = new Function_name_baseContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_function_name_base);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5912);
			_la = _input.LA(1);
			if ( !(_la==LEFT || _la==RIGHT || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (DATE - 181)) | (1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (YEAR - 181)) | (1L << (COUNT - 181)) | (1L << (POSITION - 181)))) != 0) || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & ((1L << (QUARTER - 549)) | (1L << (MONTH - 549)) | (1L << (DAY - 549)) | (1L << (HOUR - 549)) | (1L << (MINUTE - 549)) | (1L << (WEEK - 549)) | (1L << (SECOND - 549)) | (1L << (MICROSECOND - 549)))) != 0) || ((((_la - 621)) & ~0x3f) == 0 && ((1L << (_la - 621)) & ((1L << (GEOMETRYCOLLECTION - 621)) | (1L << (LINESTRING - 621)) | (1L << (MULTILINESTRING - 621)) | (1L << (MULTIPOINT - 621)) | (1L << (MULTIPOLYGON - 621)) | (1L << (POINT - 621)) | (1L << (POLYGON - 621)) | (1L << (ABS - 621)) | (1L << (ACOS - 621)) | (1L << (ADDDATE - 621)) | (1L << (ADDTIME - 621)) | (1L << (AES_DECRYPT - 621)) | (1L << (AES_ENCRYPT - 621)) | (1L << (AREA - 621)) | (1L << (ASBINARY - 621)) | (1L << (ASIN - 621)) | (1L << (ASTEXT - 621)) | (1L << (ASWKB - 621)) | (1L << (ASWKT - 621)) | (1L << (ASYMMETRIC_DECRYPT - 621)) | (1L << (ASYMMETRIC_DERIVE - 621)) | (1L << (ASYMMETRIC_ENCRYPT - 621)) | (1L << (ASYMMETRIC_SIGN - 621)) | (1L << (ASYMMETRIC_VERIFY - 621)) | (1L << (ATAN - 621)) | (1L << (ATAN2 - 621)) | (1L << (BENCHMARK - 621)) | (1L << (BIN - 621)) | (1L << (BIT_COUNT - 621)) | (1L << (BIT_LENGTH - 621)) | (1L << (BUFFER - 621)) | (1L << (CEIL - 621)) | (1L << (CEILING - 621)) | (1L << (CENTROID - 621)) | (1L << (CHARACTER_LENGTH - 621)) | (1L << (CHARSET - 621)) | (1L << (CHAR_LENGTH - 621)) | (1L << (COERCIBILITY - 621)) | (1L << (COLLATION - 621)) | (1L << (COMPRESS - 621)) | (1L << (CONCAT - 621)) | (1L << (CONCAT_WS - 621)) | (1L << (CONNECTION_ID - 621)) | (1L << (CONV - 621)) | (1L << (CONVERT_TZ - 621)) | (1L << (COS - 621)) | (1L << (COT - 621)) | (1L << (CRC32 - 621)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 621)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 621)) | (1L << (CREATE_DH_PARAMETERS - 621)) | (1L << (CREATE_DIGEST - 621)) | (1L << (CROSSES - 621)) | (1L << (DATEDIFF - 621)) | (1L << (DATE_FORMAT - 621)) | (1L << (DAYNAME - 621)) | (1L << (DAYOFMONTH - 621)) | (1L << (DAYOFWEEK - 621)) | (1L << (DAYOFYEAR - 621)) | (1L << (DECODE - 621)) | (1L << (DEGREES - 621)) | (1L << (DES_DECRYPT - 621)) | (1L << (DES_ENCRYPT - 621)) | (1L << (DIMENSION - 621)))) != 0) || ((((_la - 685)) & ~0x3f) == 0 && ((1L << (_la - 685)) & ((1L << (DISJOINT - 685)) | (1L << (ELT - 685)) | (1L << (ENCODE - 685)) | (1L << (ENCRYPT - 685)) | (1L << (ENDPOINT - 685)) | (1L << (ENVELOPE - 685)) | (1L << (EQUALS - 685)) | (1L << (EXP - 685)) | (1L << (EXPORT_SET - 685)) | (1L << (EXTERIORRING - 685)) | (1L << (EXTRACTVALUE - 685)) | (1L << (FIELD - 685)) | (1L << (FIND_IN_SET - 685)) | (1L << (FLOOR - 685)) | (1L << (FORMAT - 685)) | (1L << (FOUND_ROWS - 685)) | (1L << (FROM_BASE64 - 685)) | (1L << (FROM_DAYS - 685)) | (1L << (FROM_UNIXTIME - 685)) | (1L << (GEOMCOLLFROMTEXT - 685)) | (1L << (GEOMCOLLFROMWKB - 685)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 685)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 685)) | (1L << (GEOMETRYFROMTEXT - 685)) | (1L << (GEOMETRYFROMWKB - 685)) | (1L << (GEOMETRYN - 685)) | (1L << (GEOMETRYTYPE - 685)) | (1L << (GEOMFROMTEXT - 685)) | (1L << (GEOMFROMWKB - 685)) | (1L << (GET_FORMAT - 685)) | (1L << (GET_LOCK - 685)) | (1L << (GLENGTH - 685)) | (1L << (GREATEST - 685)) | (1L << (GTID_SUBSET - 685)) | (1L << (GTID_SUBTRACT - 685)) | (1L << (HEX - 685)) | (1L << (IFNULL - 685)) | (1L << (INET6_ATON - 685)) | (1L << (INET6_NTOA - 685)) | (1L << (INET_ATON - 685)) | (1L << (INET_NTOA - 685)) | (1L << (INSTR - 685)) | (1L << (INTERIORRINGN - 685)) | (1L << (INTERSECTS - 685)) | (1L << (ISCLOSED - 685)) | (1L << (ISEMPTY - 685)) | (1L << (ISNULL - 685)) | (1L << (ISSIMPLE - 685)) | (1L << (IS_FREE_LOCK - 685)) | (1L << (IS_IPV4 - 685)) | (1L << (IS_IPV4_COMPAT - 685)) | (1L << (IS_IPV4_MAPPED - 685)) | (1L << (IS_IPV6 - 685)) | (1L << (IS_USED_LOCK - 685)) | (1L << (LAST_INSERT_ID - 685)) | (1L << (LCASE - 685)) | (1L << (LEAST - 685)) | (1L << (LENGTH - 685)) | (1L << (LINEFROMTEXT - 685)) | (1L << (LINEFROMWKB - 685)) | (1L << (LINESTRINGFROMTEXT - 685)) | (1L << (LINESTRINGFROMWKB - 685)) | (1L << (LN - 685)) | (1L << (LOAD_FILE - 685)))) != 0) || ((((_la - 749)) & ~0x3f) == 0 && ((1L << (_la - 749)) & ((1L << (LOCATE - 749)) | (1L << (LOG - 749)) | (1L << (LOG10 - 749)) | (1L << (LOG2 - 749)) | (1L << (LOWER - 749)) | (1L << (LPAD - 749)) | (1L << (LTRIM - 749)) | (1L << (MAKEDATE - 749)) | (1L << (MAKETIME - 749)) | (1L << (MAKE_SET - 749)) | (1L << (MASTER_POS_WAIT - 749)) | (1L << (MBRCONTAINS - 749)) | (1L << (MBRDISJOINT - 749)) | (1L << (MBREQUAL - 749)) | (1L << (MBRINTERSECTS - 749)) | (1L << (MBROVERLAPS - 749)) | (1L << (MBRTOUCHES - 749)) | (1L << (MBRWITHIN - 749)) | (1L << (MD5 - 749)) | (1L << (MLINEFROMTEXT - 749)) | (1L << (MLINEFROMWKB - 749)) | (1L << (MONTHNAME - 749)) | (1L << (MPOINTFROMTEXT - 749)) | (1L << (MPOINTFROMWKB - 749)) | (1L << (MPOLYFROMTEXT - 749)) | (1L << (MPOLYFROMWKB - 749)) | (1L << (MULTILINESTRINGFROMTEXT - 749)) | (1L << (MULTILINESTRINGFROMWKB - 749)) | (1L << (MULTIPOINTFROMTEXT - 749)) | (1L << (MULTIPOINTFROMWKB - 749)) | (1L << (MULTIPOLYGONFROMTEXT - 749)) | (1L << (MULTIPOLYGONFROMWKB - 749)) | (1L << (NAME_CONST - 749)) | (1L << (NULLIF - 749)) | (1L << (NUMGEOMETRIES - 749)) | (1L << (NUMINTERIORRINGS - 749)) | (1L << (NUMPOINTS - 749)) | (1L << (OCT - 749)) | (1L << (OCTET_LENGTH - 749)) | (1L << (ORD - 749)) | (1L << (OVERLAPS - 749)) | (1L << (PERIOD_ADD - 749)) | (1L << (PERIOD_DIFF - 749)) | (1L << (PI - 749)) | (1L << (POINTFROMTEXT - 749)) | (1L << (POINTFROMWKB - 749)) | (1L << (POINTN - 749)) | (1L << (POLYFROMTEXT - 749)) | (1L << (POLYFROMWKB - 749)) | (1L << (POLYGONFROMTEXT - 749)) | (1L << (POLYGONFROMWKB - 749)) | (1L << (POW - 749)) | (1L << (POWER - 749)) | (1L << (QUOTE - 749)) | (1L << (RADIANS - 749)) | (1L << (RAND - 749)) | (1L << (RANDOM_BYTES - 749)) | (1L << (RELEASE_LOCK - 749)) | (1L << (REVERSE - 749)) | (1L << (ROUND - 749)) | (1L << (ROW_COUNT - 749)) | (1L << (RPAD - 749)) | (1L << (RTRIM - 749)) | (1L << (SEC_TO_TIME - 749)))) != 0) || ((((_la - 813)) & ~0x3f) == 0 && ((1L << (_la - 813)) & ((1L << (SESSION_USER - 813)) | (1L << (SHA - 813)) | (1L << (SHA1 - 813)) | (1L << (SHA2 - 813)) | (1L << (SIGN - 813)) | (1L << (SIN - 813)) | (1L << (SLEEP - 813)) | (1L << (SOUNDEX - 813)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 813)) | (1L << (SQRT - 813)) | (1L << (SRID - 813)) | (1L << (STARTPOINT - 813)) | (1L << (STRCMP - 813)) | (1L << (STR_TO_DATE - 813)) | (1L << (ST_AREA - 813)) | (1L << (ST_ASBINARY - 813)) | (1L << (ST_ASTEXT - 813)) | (1L << (ST_ASWKB - 813)) | (1L << (ST_ASWKT - 813)) | (1L << (ST_BUFFER - 813)) | (1L << (ST_CENTROID - 813)) | (1L << (ST_CONTAINS - 813)) | (1L << (ST_CROSSES - 813)) | (1L << (ST_DIFFERENCE - 813)) | (1L << (ST_DIMENSION - 813)) | (1L << (ST_DISJOINT - 813)) | (1L << (ST_DISTANCE - 813)) | (1L << (ST_ENDPOINT - 813)) | (1L << (ST_ENVELOPE - 813)) | (1L << (ST_EQUALS - 813)) | (1L << (ST_EXTERIORRING - 813)) | (1L << (ST_GEOMCOLLFROMTEXT - 813)) | (1L << (ST_GEOMCOLLFROMTXT - 813)) | (1L << (ST_GEOMCOLLFROMWKB - 813)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 813)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 813)) | (1L << (ST_GEOMETRYFROMTEXT - 813)) | (1L << (ST_GEOMETRYFROMWKB - 813)) | (1L << (ST_GEOMETRYN - 813)) | (1L << (ST_GEOMETRYTYPE - 813)) | (1L << (ST_GEOMFROMTEXT - 813)) | (1L << (ST_GEOMFROMWKB - 813)) | (1L << (ST_INTERIORRINGN - 813)) | (1L << (ST_INTERSECTION - 813)) | (1L << (ST_INTERSECTS - 813)) | (1L << (ST_ISCLOSED - 813)) | (1L << (ST_ISEMPTY - 813)) | (1L << (ST_ISSIMPLE - 813)) | (1L << (ST_LINEFROMTEXT - 813)) | (1L << (ST_LINEFROMWKB - 813)) | (1L << (ST_LINESTRINGFROMTEXT - 813)) | (1L << (ST_LINESTRINGFROMWKB - 813)) | (1L << (ST_NUMGEOMETRIES - 813)) | (1L << (ST_NUMINTERIORRING - 813)) | (1L << (ST_NUMINTERIORRINGS - 813)) | (1L << (ST_NUMPOINTS - 813)) | (1L << (ST_OVERLAPS - 813)) | (1L << (ST_POINTFROMTEXT - 813)) | (1L << (ST_POINTFROMWKB - 813)) | (1L << (ST_POINTN - 813)) | (1L << (ST_POLYFROMTEXT - 813)) | (1L << (ST_POLYFROMWKB - 813)) | (1L << (ST_POLYGONFROMTEXT - 813)) | (1L << (ST_POLYGONFROMWKB - 813)))) != 0) || ((((_la - 877)) & ~0x3f) == 0 && ((1L << (_la - 877)) & ((1L << (ST_SRID - 877)) | (1L << (ST_STARTPOINT - 877)) | (1L << (ST_SYMDIFFERENCE - 877)) | (1L << (ST_TOUCHES - 877)) | (1L << (ST_UNION - 877)) | (1L << (ST_WITHIN - 877)) | (1L << (ST_X - 877)) | (1L << (ST_Y - 877)) | (1L << (SUBDATE - 877)) | (1L << (SUBSTRING_INDEX - 877)) | (1L << (SUBTIME - 877)) | (1L << (SYSTEM_USER - 877)) | (1L << (TAN - 877)) | (1L << (TIMEDIFF - 877)) | (1L << (TIMESTAMPADD - 877)) | (1L << (TIMESTAMPDIFF - 877)) | (1L << (TIME_FORMAT - 877)) | (1L << (TIME_TO_SEC - 877)) | (1L << (TOUCHES - 877)) | (1L << (TO_BASE64 - 877)) | (1L << (TO_DAYS - 877)) | (1L << (TO_SECONDS - 877)) | (1L << (UCASE - 877)) | (1L << (UNCOMPRESS - 877)) | (1L << (UNCOMPRESSED_LENGTH - 877)) | (1L << (UNHEX - 877)) | (1L << (UNIX_TIMESTAMP - 877)) | (1L << (UPDATEXML - 877)) | (1L << (UPPER - 877)) | (1L << (UUID - 877)) | (1L << (UUID_SHORT - 877)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 877)) | (1L << (VERSION - 877)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 877)) | (1L << (WEEKDAY - 877)) | (1L << (WEEKOFYEAR - 877)) | (1L << (WEIGHT_STRING - 877)) | (1L << (WITHIN - 877)) | (1L << (YEARWEEK - 877)) | (1L << (Y_FUNCTION - 877)) | (1L << (X_FUNCTION - 877)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 272:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 273:
			return boolean_primary_sempred((Boolean_primaryContext)_localctx, predIndex);
		case 276:
			return bit_expr_sempred((Bit_exprContext)_localctx, predIndex);
		case 277:
			return simple_expr_sempred((Simple_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 9);
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 7);
		case 3:
			return precpred(_ctx, 6);
		case 4:
			return precpred(_ctx, 5);
		}
		return true;
	}
	private boolean boolean_primary_sempred(Boolean_primaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return precpred(_ctx, 5);
		case 6:
			return precpred(_ctx, 4);
		case 7:
			return precpred(_ctx, 3);
		case 8:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean bit_expr_sempred(Bit_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 13);
		case 10:
			return precpred(_ctx, 12);
		case 11:
			return precpred(_ctx, 11);
		case 12:
			return precpred(_ctx, 10);
		case 13:
			return precpred(_ctx, 9);
		case 14:
			return precpred(_ctx, 8);
		case 15:
			return precpred(_ctx, 7);
		case 16:
			return precpred(_ctx, 6);
		case 17:
			return precpred(_ctx, 5);
		case 18:
			return precpred(_ctx, 4);
		case 19:
			return precpred(_ctx, 3);
		case 20:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean simple_expr_sempred(Simple_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return precpred(_ctx, 11);
		case 22:
			return precpred(_ctx, 13);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u03cd\u171d\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\3\2\5\2\u023e\n\2\3\2\3\2\5\2\u0242\n\2\3\2\3\2\3\3\3\3\3\3\5"+
		"\3\u0249\n\3\3\3\3\3\3\3\7\3\u024e\n\3\f\3\16\3\u0251\13\3\3\3\3\3\3\3"+
		"\5\3\u0256\n\3\3\3\5\3\u0259\n\3\3\3\5\3\u025c\n\3\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\5\4\u0265\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u028c\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\5\7\u0298\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02a3"+
		"\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u02b4"+
		"\n\t\3\n\3\n\3\n\5\n\u02b9\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\5\13\u02c5\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u02e0\n\f"+
		"\3\r\3\r\3\r\3\r\5\r\u02e6\n\r\3\16\3\16\3\16\5\16\u02eb\n\16\3\16\3\16"+
		"\7\16\u02ef\n\16\f\16\16\16\u02f2\13\16\3\17\3\17\5\17\u02f6\n\17\3\17"+
		"\3\17\5\17\u02fa\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0303\n"+
		"\17\3\17\5\17\u0306\n\17\3\17\3\17\3\17\3\17\3\17\5\17\u030d\n\17\3\17"+
		"\3\17\5\17\u0311\n\17\3\17\3\17\3\17\3\20\3\20\5\20\u0318\n\20\3\20\5"+
		"\20\u031b\n\20\3\20\3\20\3\20\5\20\u0320\n\20\3\20\3\20\3\20\3\20\7\20"+
		"\u0326\n\20\f\20\16\20\u0329\13\20\3\20\3\20\5\20\u032d\n\20\3\20\3\20"+
		"\3\20\5\20\u0332\n\20\3\20\5\20\u0335\n\20\3\21\3\21\3\21\3\21\3\21\3"+
		"\21\3\21\3\21\3\21\5\21\u0340\n\21\3\21\5\21\u0343\n\21\3\21\3\21\5\21"+
		"\u0347\n\21\3\21\5\21\u034a\n\21\3\21\3\21\5\21\u034e\n\21\3\21\5\21\u0351"+
		"\n\21\3\21\3\21\5\21\u0355\n\21\3\21\5\21\u0358\n\21\3\21\5\21\u035b\n"+
		"\21\3\21\3\21\5\21\u035f\n\21\3\21\5\21\u0362\n\21\3\21\3\21\5\21\u0366"+
		"\n\21\3\21\3\21\3\22\3\22\5\22\u036c\n\22\3\22\3\22\3\22\3\22\5\22\u0372"+
		"\n\22\3\22\3\22\7\22\u0376\n\22\f\22\16\22\u0379\13\22\3\22\3\22\7\22"+
		"\u037d\n\22\f\22\16\22\u0380\13\22\3\22\3\22\3\23\3\23\5\23\u0386\n\23"+
		"\3\23\3\23\3\23\3\23\5\23\u038c\n\23\3\23\3\23\7\23\u0390\n\23\f\23\16"+
		"\23\u0393\13\23\3\23\3\23\3\23\3\23\7\23\u0399\n\23\f\23\16\23\u039c\13"+
		"\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3"+
		"\24\7\24\u03ac\n\24\f\24\16\24\u03af\13\24\3\24\3\24\3\25\3\25\5\25\u03b5"+
		"\n\25\3\25\3\25\5\25\u03b9\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\5\25\u03c3\n\25\3\25\3\25\5\25\u03c7\n\25\3\25\3\25\5\25\u03cb\n\25\3"+
		"\25\3\25\5\25\u03cf\n\25\3\25\3\25\5\25\u03d3\n\25\3\25\7\25\u03d6\n\25"+
		"\f\25\16\25\u03d9\13\25\5\25\u03db\n\25\3\25\5\25\u03de\n\25\3\25\5\25"+
		"\u03e1\n\25\3\25\5\25\u03e4\n\25\3\25\3\25\3\25\3\25\5\25\u03ea\n\25\3"+
		"\25\3\25\5\25\u03ee\n\25\3\25\3\25\3\25\3\25\5\25\u03f4\n\25\3\25\7\25"+
		"\u03f7\n\25\f\25\16\25\u03fa\13\25\5\25\u03fc\n\25\3\25\5\25\u03ff\n\25"+
		"\5\25\u0401\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u040c"+
		"\n\26\3\26\3\26\5\26\u0410\n\26\3\26\5\26\u0413\n\26\3\27\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0421\n\27\3\27\5\27"+
		"\u0424\n\27\3\27\3\27\5\27\u0428\n\27\3\27\5\27\u042b\n\27\3\27\3\27\5"+
		"\27\u042f\n\27\3\27\5\27\u0432\n\27\3\27\3\27\5\27\u0436\n\27\3\27\5\27"+
		"\u0439\n\27\3\27\3\27\5\27\u043d\n\27\3\27\5\27\u0440\n\27\3\27\5\27\u0443"+
		"\n\27\3\27\3\27\5\27\u0447\n\27\3\27\5\27\u044a\n\27\3\27\3\27\5\27\u044e"+
		"\n\27\3\27\3\27\3\30\3\30\5\30\u0454\n\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\3\30\5\30\u0461\n\30\3\30\3\30\3\31\3\31\3\31\5\31"+
		"\u0468\n\31\3\31\3\31\3\31\5\31\u046d\n\31\3\31\5\31\u0470\n\31\3\31\3"+
		"\31\3\31\5\31\u0475\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u047d\n\31"+
		"\3\31\3\31\3\31\3\31\5\31\u0483\n\31\3\31\3\31\5\31\u0487\n\31\3\32\5"+
		"\32\u048a\n\32\3\32\3\32\3\32\5\32\u048f\n\32\3\32\3\32\5\32\u0493\n\32"+
		"\3\32\3\32\5\32\u0497\n\32\3\32\5\32\u049a\n\32\3\33\3\33\3\33\3\33\3"+
		"\33\3\33\5\33\u04a2\n\33\5\33\u04a4\n\33\3\34\3\34\3\34\7\34\u04a9\n\34"+
		"\f\34\16\34\u04ac\13\34\3\34\3\34\3\34\5\34\u04b1\n\34\3\34\3\34\3\34"+
		"\3\34\7\34\u04b7\n\34\f\34\16\34\u04ba\13\34\5\34\u04bc\n\34\3\34\3\34"+
		"\3\34\7\34\u04c1\n\34\f\34\16\34\u04c4\13\34\5\34\u04c6\n\34\5\34\u04c8"+
		"\n\34\3\35\3\35\3\35\3\35\5\35\u04ce\n\35\3\36\3\36\3\36\5\36\u04d3\n"+
		"\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\5\37\u04e4\n\37\3 \3 \3 \3!\3!\5!\u04eb\n!\3!\3!\3!\3!\3!\3!"+
		"\3!\5!\u04f4\n!\3\"\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3$\3$\5$\u0502\n$\3"+
		"$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u050f\n$\3$\3$\3$\5$\u0514\n$\3%\3"+
		"%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0524\n%\3&\3&\3&\3&\7&\u052a"+
		"\n&\f&\16&\u052d\13&\3&\3&\3\'\3\'\3\'\3\'\3\'\5\'\u0536\n\'\3(\3(\7("+
		"\u053a\n(\f(\16(\u053d\13(\3)\3)\3)\3)\3)\5)\u0544\n)\3)\3)\3)\5)\u0549"+
		"\n)\3)\3)\3)\3)\3)\3)\3)\5)\u0552\n)\3*\3*\5*\u0556\n*\5*\u0558\n*\3*"+
		"\3*\3*\5*\u055d\n*\3*\3*\7*\u0561\n*\f*\16*\u0564\13*\3*\3*\5*\u0568\n"+
		"*\5*\u056a\n*\3*\3*\5*\u056e\n*\3*\5*\u0571\n*\3*\5*\u0574\n*\3*\3*\7"+
		"*\u0578\n*\f*\16*\u057b\13*\3*\3*\5*\u057f\n*\5*\u0581\n*\3*\3*\3*\5*"+
		"\u0586\n*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0590\n*\3+\3+\3+\3+\3+\5+\u0597"+
		"\n+\3+\3+\5+\u059b\n+\3,\3,\3,\3,\3,\3,\5,\u05a3\n,\3-\3-\3-\3-\3-\3-"+
		"\5-\u05ab\n-\3.\3.\3.\3.\3.\3.\5.\u05b3\n.\3/\3/\5/\u05b7\n/\3/\5/\u05ba"+
		"\n/\3/\3/\7/\u05be\n/\f/\16/\u05c1\13/\3/\3/\5/\u05c5\n/\3/\5/\u05c8\n"+
		"/\3/\3/\7/\u05cc\n/\f/\16/\u05cf\13/\5/\u05d1\n/\3\60\3\60\5\60\u05d5"+
		"\n\60\3\60\3\60\3\60\5\60\u05da\n\60\3\60\3\60\3\60\5\60\u05df\n\60\3"+
		"\60\3\60\5\60\u05e3\n\60\3\60\3\60\3\60\5\60\u05e8\n\60\3\60\5\60\u05eb"+
		"\n\60\3\60\3\60\3\60\5\60\u05f0\n\60\3\60\3\60\5\60\u05f4\n\60\3\60\3"+
		"\60\5\60\u05f8\n\60\3\60\3\60\3\60\5\60\u05fd\n\60\3\60\3\60\3\60\5\60"+
		"\u0602\n\60\3\60\3\60\3\60\5\60\u0607\n\60\3\60\3\60\3\60\3\60\5\60\u060d"+
		"\n\60\3\60\3\60\3\60\5\60\u0612\n\60\3\60\3\60\3\60\5\60\u0617\n\60\3"+
		"\60\3\60\3\60\3\60\5\60\u061d\n\60\3\60\3\60\3\60\5\60\u0622\n\60\3\60"+
		"\3\60\3\60\5\60\u0627\n\60\3\60\3\60\3\60\5\60\u062c\n\60\3\60\3\60\3"+
		"\60\5\60\u0631\n\60\3\60\3\60\3\60\5\60\u0636\n\60\3\60\3\60\3\60\5\60"+
		"\u063b\n\60\3\60\3\60\3\60\5\60\u0640\n\60\3\60\3\60\3\60\5\60\u0645\n"+
		"\60\3\60\3\60\3\60\5\60\u064a\n\60\3\60\3\60\3\60\5\60\u064f\n\60\3\60"+
		"\3\60\3\60\3\60\3\60\5\60\u0656\n\60\3\60\3\60\5\60\u065a\n\60\3\60\3"+
		"\60\3\60\3\60\7\60\u0660\n\60\f\60\16\60\u0663\13\60\3\60\3\60\5\60\u0667"+
		"\n\60\3\61\3\61\3\61\3\61\3\61\5\61\u066e\n\61\3\61\3\61\3\61\3\61\3\61"+
		"\5\61\u0675\n\61\5\61\u0677\n\61\3\61\3\61\3\61\3\61\7\61\u067d\n\61\f"+
		"\61\16\61\u0680\13\61\3\61\3\61\5\61\u0684\n\61\3\62\3\62\3\62\3\62\3"+
		"\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0691\n\62\5\62\u0693\n\62\3\63"+
		"\5\63\u0696\n\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u069e\n\63\3\63\3"+
		"\63\3\63\3\63\5\63\u06a4\n\63\3\63\3\63\3\63\3\63\5\63\u06aa\n\63\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u06b4\n\64\3\64\3\64\3\64\5\64"+
		"\u06b9\n\64\3\64\3\64\3\64\3\64\3\64\5\64\u06c0\n\64\5\64\u06c2\n\64\3"+
		"\64\5\64\u06c5\n\64\3\64\3\64\5\64\u06c9\n\64\3\64\5\64\u06cc\n\64\3\64"+
		"\3\64\5\64\u06d0\n\64\3\64\5\64\u06d3\n\64\3\64\3\64\3\64\5\64\u06d8\n"+
		"\64\3\64\5\64\u06db\n\64\3\64\3\64\3\64\5\64\u06e0\n\64\3\64\5\64\u06e3"+
		"\n\64\3\64\3\64\5\64\u06e7\n\64\3\64\5\64\u06ea\n\64\3\64\3\64\5\64\u06ee"+
		"\n\64\3\64\5\64\u06f1\n\64\3\64\3\64\5\64\u06f5\n\64\3\64\5\64\u06f8\n"+
		"\64\3\64\3\64\5\64\u06fc\n\64\3\64\5\64\u06ff\n\64\3\64\3\64\3\64\7\64"+
		"\u0704\n\64\f\64\16\64\u0707\13\64\5\64\u0709\n\64\3\65\3\65\3\65\5\65"+
		"\u070e\n\65\3\65\3\65\5\65\u0712\n\65\3\65\5\65\u0715\n\65\3\65\3\65\5"+
		"\65\u0719\n\65\3\65\5\65\u071c\n\65\3\65\3\65\3\65\5\65\u0721\n\65\3\65"+
		"\5\65\u0724\n\65\3\65\3\65\3\65\5\65\u0729\n\65\3\65\5\65\u072c\n\65\3"+
		"\65\3\65\5\65\u0730\n\65\3\65\5\65\u0733\n\65\3\65\3\65\5\65\u0737\n\65"+
		"\3\65\5\65\u073a\n\65\3\65\3\65\5\65\u073e\n\65\3\65\5\65\u0741\n\65\3"+
		"\65\3\65\5\65\u0745\n\65\3\65\5\65\u0748\n\65\3\66\3\66\3\66\5\66\u074d"+
		"\n\66\3\66\6\66\u0750\n\66\r\66\16\66\u0751\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\5\66\u075c\n\66\3\67\3\67\5\67\u0760\n\67\3\67\3\67\3\67"+
		"\3\67\3\67\5\67\u0767\n\67\3\67\3\67\3\67\5\67\u076c\n\67\3\67\5\67\u076f"+
		"\n\67\3\67\3\67\3\67\5\67\u0774\n\67\3\67\3\67\3\67\3\67\3\67\5\67\u077b"+
		"\n\67\3\67\3\67\5\67\u077f\n\67\3\67\3\67\5\67\u0783\n\67\38\38\38\38"+
		"\78\u0789\n8\f8\168\u078c\138\39\39\39\39\39\39\39\3:\3:\3:\3:\3:\3:\3"+
		":\3:\3:\5:\u079e\n:\3:\5:\u07a1\n:\3:\5:\u07a4\n:\3:\3:\5:\u07a8\n:\3"+
		":\3:\3;\3;\3;\3;\7;\u07b0\n;\f;\16;\u07b3\13;\3<\3<\3<\3<\3<\3<\3<\3<"+
		"\7<\u07bd\n<\f<\16<\u07c0\13<\3<\3<\3=\3=\5=\u07c6\n=\3=\5=\u07c9\n=\3"+
		"=\3=\3=\3=\3=\7=\u07d0\n=\f=\16=\u07d3\13=\3=\7=\u07d6\n=\f=\16=\u07d9"+
		"\13=\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u07e4\n>\3>\5>\u07e7\n>\3>\3>\5>\u07eb"+
		"\n>\3>\3>\3?\3?\3?\3?\5?\u07f3\n?\3?\5?\u07f6\n?\3?\3?\3?\5?\u07fb\n?"+
		"\3?\3?\3?\3?\3?\3?\5?\u0803\n?\3?\3?\3?\3?\5?\u0809\n?\3?\3?\5?\u080d"+
		"\n?\3@\3@\3@\5@\u0812\n@\3@\3@\3@\3@\3@\5@\u0819\n@\3@\3@\5@\u081d\n@"+
		"\3@\3@\3@\3@\3@\3@\3@\7@\u0826\n@\f@\16@\u0829\13@\3@\3@\3@\3@\3@\5@\u0830"+
		"\n@\3@\5@\u0833\n@\3@\3@\7@\u0837\n@\f@\16@\u083a\13@\3@\3@\3@\5@\u083f"+
		"\n@\5@\u0841\n@\3@\3@\3@\5@\u0846\n@\3@\3@\7@\u084a\n@\f@\16@\u084d\13"+
		"@\3@\3@\3@\5@\u0852\n@\5@\u0854\n@\3@\3@\5@\u0858\n@\3@\5@\u085b\n@\3"+
		"@\5@\u085e\n@\3@\3@\7@\u0862\n@\f@\16@\u0865\13@\3@\3@\3@\5@\u086a\n@"+
		"\3@\5@\u086d\n@\3@\3@\7@\u0871\n@\f@\16@\u0874\13@\3@\3@\3@\5@\u0879\n"+
		"@\5@\u087b\n@\3@\3@\3@\5@\u0880\n@\3@\3@\3@\3@\3@\5@\u0887\n@\3@\3@\3"+
		"@\5@\u088c\n@\3@\3@\3@\3@\3@\3@\5@\u0894\n@\3@\3@\5@\u0898\n@\3@\3@\3"+
		"@\3@\3@\3@\5@\u08a0\n@\3@\3@\5@\u08a4\n@\3@\3@\3@\5@\u08a9\n@\3@\3@\3"+
		"@\3@\3@\5@\u08b0\n@\3@\3@\5@\u08b4\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3"+
		"@\3@\3@\3@\3@\3@\3@\5@\u08c7\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u08d4"+
		"\n@\3@\5@\u08d7\n@\3@\3@\3@\3@\3@\3@\3@\5@\u08e0\n@\3@\3@\3@\3@\3@\3@"+
		"\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u08f3\n@\3@\3@\3@\3@\3@\5@\u08fa"+
		"\n@\3@\3@\3@\3@\3@\5@\u0901\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\7@\u090e"+
		"\n@\f@\16@\u0911\13@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u091d\n@\3@\3@\3"+
		"@\3@\5@\u0923\n@\3@\3@\3@\3@\5@\u0929\n@\3@\3@\3@\3@\5@\u092f\n@\3@\3"+
		"@\3@\3@\5@\u0935\n@\3@\3@\3@\3@\5@\u093b\n@\3@\3@\3@\3@\5@\u0941\n@\3"+
		"A\3A\3A\5A\u0946\nA\3A\3A\3B\3B\3B\5B\u094d\nB\3B\3B\3C\3C\3C\5C\u0954"+
		"\nC\3C\3C\3C\3C\3C\5C\u095b\nC\3C\5C\u095e\nC\3C\3C\5C\u0962\nC\3C\5C"+
		"\u0965\nC\3D\3D\3D\3D\3D\3D\3D\3D\3E\3E\3E\5E\u0972\nE\3E\3E\3F\3F\3F"+
		"\5F\u0979\nF\3F\3F\3G\3G\3G\5G\u0980\nG\3G\3G\3H\3H\5H\u0986\nH\3H\3H"+
		"\5H\u098a\nH\3H\3H\5H\u098e\nH\3I\3I\3I\3I\3I\5I\u0995\nI\3I\5I\u0998"+
		"\nI\3J\3J\3J\5J\u099d\nJ\3J\3J\3K\3K\3K\5K\u09a4\nK\3K\3K\3K\7K\u09a9"+
		"\nK\fK\16K\u09ac\13K\3K\5K\u09af\nK\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\7L\u09bb"+
		"\nL\fL\16L\u09be\13L\3M\3M\5M\u09c2\nM\3M\3M\3N\3N\3N\3N\3N\5N\u09cb\n"+
		"N\3N\5N\u09ce\nN\3O\3O\5O\u09d2\nO\3P\3P\3P\3Q\3Q\3Q\3Q\5Q\u09db\nQ\3"+
		"R\3R\5R\u09df\nR\3R\5R\u09e2\nR\3R\5R\u09e5\nR\3R\3R\3R\3R\3R\3R\5R\u09ed"+
		"\nR\3R\3R\3R\3R\5R\u09f3\nR\3R\3R\3R\3R\3R\7R\u09fa\nR\fR\16R\u09fd\13"+
		"R\5R\u09ff\nR\3R\3R\3R\3R\3R\3R\3R\7R\u0a08\nR\fR\16R\u0a0b\13R\5R\u0a0d"+
		"\nR\3S\3S\3S\5S\u0a12\nS\3S\5S\u0a15\nS\3S\3S\3S\5S\u0a1a\nS\3S\3S\3S"+
		"\3S\3S\3S\3S\3S\5S\u0a24\nS\3S\3S\3S\5S\u0a29\nS\3S\3S\3S\3S\5S\u0a2f"+
		"\nS\3S\5S\u0a32\nS\3S\3S\3S\5S\u0a37\nS\3S\3S\3S\5S\u0a3c\nS\5S\u0a3e"+
		"\nS\3S\3S\3S\3S\5S\u0a44\nS\3S\3S\3S\5S\u0a49\nS\5S\u0a4b\nS\3S\3S\3S"+
		"\3S\5S\u0a51\nS\3S\3S\3S\3S\7S\u0a57\nS\fS\16S\u0a5a\13S\3S\3S\5S\u0a5e"+
		"\nS\3S\3S\3S\3S\7S\u0a64\nS\fS\16S\u0a67\13S\5S\u0a69\nS\3T\3T\3T\5T\u0a6e"+
		"\nT\3T\5T\u0a71\nT\3T\3T\3T\5T\u0a76\nT\3T\3T\3T\3T\3T\3T\5T\u0a7e\nT"+
		"\3T\3T\3T\3T\3T\3T\5T\u0a86\nT\3T\3T\3T\3T\5T\u0a8c\nT\3T\3T\3T\3T\7T"+
		"\u0a92\nT\fT\16T\u0a95\13T\3T\3T\5T\u0a99\nT\3T\3T\3T\3T\7T\u0a9f\nT\f"+
		"T\16T\u0aa2\13T\5T\u0aa4\nT\3U\3U\5U\u0aa8\nU\3U\5U\u0aab\nU\3U\3U\3U"+
		"\3U\3U\3U\5U\u0ab3\nU\3U\3U\3U\3U\5U\u0ab9\nU\3U\3U\3U\3U\3U\7U\u0ac0"+
		"\nU\fU\16U\u0ac3\13U\5U\u0ac5\nU\3V\3V\3V\3V\3V\3V\3V\5V\u0ace\nV\3V\3"+
		"V\3V\3V\3V\3V\3V\5V\u0ad7\nV\3V\3V\6V\u0adb\nV\rV\16V\u0adc\3V\3V\5V\u0ae1"+
		"\nV\3V\3V\5V\u0ae5\nV\5V\u0ae7\nV\3V\5V\u0aea\nV\3V\5V\u0aed\nV\3V\3V"+
		"\3V\3V\3V\3V\5V\u0af5\nV\3V\3V\6V\u0af9\nV\rV\16V\u0afa\3V\3V\5V\u0aff"+
		"\nV\3V\5V\u0b02\nV\3V\5V\u0b05\nV\3V\5V\u0b08\nV\3V\3V\3V\3V\3V\3V\5V"+
		"\u0b10\nV\5V\u0b12\nV\3W\3W\5W\u0b16\nW\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X"+
		"\7X\u0b22\nX\fX\16X\u0b25\13X\5X\u0b27\nX\3Y\3Y\3Y\3Y\3Z\3Z\5Z\u0b2f\n"+
		"Z\3[\3[\5[\u0b33\n[\3[\5[\u0b36\n[\3[\5[\u0b39\n[\3[\3[\3[\3[\3[\3[\3"+
		"[\5[\u0b42\n[\3[\3[\5[\u0b46\n[\3[\5[\u0b49\n[\3[\3[\5[\u0b4d\n[\3\\\3"+
		"\\\5\\\u0b51\n\\\3\\\5\\\u0b54\n\\\3\\\5\\\u0b57\n\\\3\\\3\\\3\\\5\\\u0b5c"+
		"\n\\\3\\\3\\\3\\\3\\\5\\\u0b62\n\\\7\\\u0b64\n\\\f\\\16\\\u0b67\13\\\3"+
		"\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u0b70\n\\\3\\\3\\\3\\\3\\\5\\\u0b76\n\\"+
		"\7\\\u0b78\n\\\f\\\16\\\u0b7b\13\\\3\\\3\\\3\\\5\\\u0b80\n\\\3\\\3\\\5"+
		"\\\u0b84\n\\\3]\3]\3]\3]\5]\u0b8a\n]\3]\5]\u0b8d\n]\3^\3^\3^\3^\3^\3^"+
		"\3^\3^\3^\3^\5^\u0b99\n^\3^\3^\5^\u0b9d\n^\3^\3^\5^\u0ba1\n^\3_\3_\3_"+
		"\3_\3_\3_\5_\u0ba9\n_\3_\3_\5_\u0bad\n_\3`\3`\3`\3`\3a\3a\5a\u0bb5\na"+
		"\3a\5a\u0bb8\na\3a\3a\5a\u0bbc\na\3a\5a\u0bbf\na\3a\3a\3a\3a\7a\u0bc5"+
		"\na\fa\16a\u0bc8\13a\3a\3a\5a\u0bcc\na\3a\5a\u0bcf\na\3a\5a\u0bd2\na\3"+
		"b\3b\5b\u0bd6\nb\3b\5b\u0bd9\nb\3b\3b\3b\3b\3b\7b\u0be0\nb\fb\16b\u0be3"+
		"\13b\3b\3b\5b\u0be7\nb\3c\3c\3c\3c\3c\7c\u0bee\nc\fc\16c\u0bf1\13c\3d"+
		"\3d\5d\u0bf5\nd\3e\3e\3e\7e\u0bfa\ne\fe\16e\u0bfd\13e\3f\3f\7f\u0c01\n"+
		"f\ff\16f\u0c04\13f\3f\3f\3f\7f\u0c09\nf\ff\16f\u0c0c\13f\3f\3f\5f\u0c10"+
		"\nf\3g\3g\3g\3g\3g\3g\5g\u0c18\ng\3g\5g\u0c1b\ng\3g\5g\u0c1e\ng\3g\3g"+
		"\3g\7g\u0c23\ng\fg\16g\u0c26\13g\5g\u0c28\ng\3g\3g\3g\3g\3g\5g\u0c2f\n"+
		"g\3g\5g\u0c32\ng\3g\3g\3g\3g\3g\3g\5g\u0c3a\ng\3h\3h\3h\3h\3h\3h\3h\3"+
		"h\5h\u0c44\nh\5h\u0c46\nh\3h\3h\3h\3h\3i\5i\u0c4d\ni\3i\3i\3i\3i\3i\3"+
		"i\3i\3i\3i\5i\u0c58\ni\3i\3i\3i\3i\5i\u0c5e\ni\3i\3i\5i\u0c62\ni\3i\3"+
		"i\3i\3i\3i\3i\3i\3i\3i\5i\u0c6d\ni\3i\3i\3i\5i\u0c72\ni\5i\u0c74\ni\3"+
		"i\3i\5i\u0c78\ni\3j\3j\3k\3k\3k\3k\3k\3k\3k\3k\5k\u0c84\nk\3l\3l\3l\3"+
		"l\3l\3l\3l\3l\5l\u0c8e\nl\3m\3m\7m\u0c92\nm\fm\16m\u0c95\13m\3m\3m\5m"+
		"\u0c99\nm\3m\5m\u0c9c\nm\3m\5m\u0c9f\nm\3m\5m\u0ca2\nm\3n\3n\7n\u0ca6"+
		"\nn\fn\16n\u0ca9\13n\3n\3n\5n\u0cad\nn\3n\5n\u0cb0\nn\3n\5n\u0cb3\nn\3"+
		"o\3o\5o\u0cb7\no\3o\3o\3p\3p\5p\u0cbd\np\3p\3p\5p\u0cc1\np\3q\3q\3q\3"+
		"q\3q\3q\3q\3q\5q\u0ccb\nq\3r\3r\5r\u0ccf\nr\3r\3r\7r\u0cd3\nr\fr\16r\u0cd6"+
		"\13r\3s\3s\3s\3s\3s\3s\5s\u0cde\ns\3s\5s\u0ce1\ns\3s\3s\5s\u0ce5\ns\3"+
		"s\5s\u0ce8\ns\3s\3s\5s\u0cec\ns\3s\3s\5s\u0cf0\ns\3s\5s\u0cf3\ns\5s\u0cf5"+
		"\ns\3t\3t\3t\5t\u0cfa\nt\3t\3t\3t\5t\u0cff\nt\7t\u0d01\nt\ft\16t\u0d04"+
		"\13t\3t\3t\3t\3t\3t\3t\3t\3t\3t\5t\u0d0f\nt\3t\3t\3t\3t\5t\u0d15\nt\3"+
		"t\5t\u0d18\nt\3t\3t\3t\5t\u0d1d\nt\3t\3t\3t\5t\u0d22\nt\5t\u0d24\nt\3"+
		"t\3t\3t\3t\5t\u0d2a\nt\3t\3t\3t\5t\u0d2f\nt\5t\u0d31\nt\5t\u0d33\nt\3"+
		"u\3u\3u\3u\5u\u0d39\nu\3u\3u\3u\3u\3u\7u\u0d40\nu\fu\16u\u0d43\13u\3u"+
		"\3u\5u\u0d47\nu\5u\u0d49\nu\3u\3u\5u\u0d4d\nu\3v\3v\5v\u0d51\nv\3w\3w"+
		"\3w\3w\5w\u0d57\nw\3w\3w\3w\3w\3w\5w\u0d5e\nw\3x\3x\3x\3x\3x\7x\u0d65"+
		"\nx\fx\16x\u0d68\13x\5x\u0d6a\nx\3y\3y\5y\u0d6e\ny\3z\3z\5z\u0d72\nz\3"+
		"z\3z\5z\u0d76\nz\3z\5z\u0d79\nz\3z\5z\u0d7c\nz\3z\5z\u0d7f\nz\3{\3{\5"+
		"{\u0d83\n{\3{\3{\5{\u0d87\n{\3{\5{\u0d8a\n{\3{\5{\u0d8d\n{\3{\5{\u0d90"+
		"\n{\3|\3|\3|\3}\3}\5}\u0d97\n}\3}\3}\5}\u0d9b\n}\3}\3}\3~\3~\3~\3~\3\177"+
		"\3\177\3\177\3\177\3\177\7\177\u0da8\n\177\f\177\16\177\u0dab\13\177\3"+
		"\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082"+
		"\3\u0082\5\u0082\u0db7\n\u0082\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082"+
		"\u0dbd\n\u0082\f\u0082\16\u0082\u0dc0\13\u0082\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0dc9\n\u0083\3\u0084\3\u0084"+
		"\5\u0084\u0dcd\n\u0084\3\u0084\5\u0084\u0dd0\n\u0084\3\u0084\3\u0084\5"+
		"\u0084\u0dd4\n\u0084\3\u0084\5\u0084\u0dd7\n\u0084\3\u0084\5\u0084\u0dda"+
		"\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085"+
		"\u0de3\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\5\u0086\u0dec\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\7\u0087\u0df4\n\u0087\f\u0087\16\u0087\u0df7\13\u0087\3\u0087\5\u0087"+
		"\u0dfa\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088"+
		"\u0e02\n\u0088\f\u0088\16\u0088\u0e05\13\u0088\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b"+
		"\5\u008b\u0e13\n\u008b\3\u008b\5\u008b\u0e16\n\u008b\3\u008c\3\u008c\3"+
		"\u008c\3\u008c\3\u008c\7\u008c\u0e1d\n\u008c\f\u008c\16\u008c\u0e20\13"+
		"\u008c\5\u008c\u0e22\n\u008c\3\u008c\3\u008c\5\u008c\u0e26\n\u008c\3\u008c"+
		"\7\u008c\u0e29\n\u008c\f\u008c\16\u008c\u0e2c\13\u008c\3\u008c\5\u008c"+
		"\u0e2f\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d\u0e36\n"+
		"\u008d\f\u008d\16\u008d\u0e39\13\u008d\5\u008d\u0e3b\n\u008d\3\u008e\3"+
		"\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\7\u0090"+
		"\u0e58\n\u0090\f\u0090\16\u0090\u0e5b\13\u0090\5\u0090\u0e5d\n\u0090\3"+
		"\u0090\5\u0090\u0e60\n\u0090\3\u0091\3\u0091\3\u0092\3\u0092\3\u0093\3"+
		"\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\5\u0095\u0e96\n\u0095\3\u0096\3\u0096\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0eac"+
		"\n\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0eba\n\u0098\3\u0099\3\u0099"+
		"\3\u0099\7\u0099\u0ebf\n\u0099\f\u0099\16\u0099\u0ec2\13\u0099\3\u0099"+
		"\5\u0099\u0ec5\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0ecb\n"+
		"\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0ed3\n"+
		"\u009b\5\u009b\u0ed5\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d\3"+
		"\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0ee0\n\u009d\3\u009e\3\u009e\3"+
		"\u009e\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0eea\n\u009f\3"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\5\u00a1\u0ef5\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3"+
		"\5\u00a3\u0efd\n\u00a3\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f02\n\u00a4\3"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0f08\n\u00a4\f\u00a4\16\u00a4"+
		"\u0f0b\13\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0f10\n\u00a4\f\u00a4"+
		"\16\u00a4\u0f13\13\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0f18\n\u00a4"+
		"\f\u00a4\16\u00a4\u0f1b\13\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0f20"+
		"\n\u00a4\f\u00a4\16\u00a4\u0f23\13\u00a4\3\u00a4\6\u00a4\u0f26\n\u00a4"+
		"\r\u00a4\16\u00a4\u0f27\5\u00a4\u0f2a\n\u00a4\3\u00a4\3\u00a4\5\u00a4"+
		"\u0f2e\n\u00a4\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0f33\n\u00a5\3\u00a5\3"+
		"\u00a5\3\u00a5\5\u00a5\u0f38\n\u00a5\3\u00a5\3\u00a5\6\u00a5\u0f3c\n\u00a5"+
		"\r\u00a5\16\u00a5\u0f3d\6\u00a5\u0f40\n\u00a5\r\u00a5\16\u00a5\u0f41\3"+
		"\u00a5\3\u00a5\6\u00a5\u0f46\n\u00a5\r\u00a5\16\u00a5\u0f47\5\u00a5\u0f4a"+
		"\n\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\6\u00a6"+
		"\u0f53\n\u00a6\r\u00a6\16\u00a6\u0f54\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\6\u00a6\u0f5b\n\u00a6\r\u00a6\16\u00a6\u0f5c\7\u00a6\u0f5f\n\u00a6\f"+
		"\u00a6\16\u00a6\u0f62\13\u00a6\3\u00a6\3\u00a6\6\u00a6\u0f66\n\u00a6\r"+
		"\u00a6\16\u00a6\u0f67\5\u00a6\u0f6a\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3"+
		"\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9"+
		"\5\u00a9\u0f78\n\u00a9\3\u00a9\3\u00a9\6\u00a9\u0f7c\n\u00a9\r\u00a9\16"+
		"\u00a9\u0f7d\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f83\n\u00a9\3\u00aa\3\u00aa"+
		"\3\u00aa\5\u00aa\u0f88\n\u00aa\3\u00aa\3\u00aa\6\u00aa\u0f8c\n\u00aa\r"+
		"\u00aa\16\u00aa\u0f8d\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0f95\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0f9d\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\6\u00ac\u0fa3\n\u00ac\r"+
		"\u00ac\16\u00ac\u0fa4\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0faa\n\u00ac\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fb0\n\u00ad\3\u00ad\5\u00ad\u0fb3"+
		"\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fbb"+
		"\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0fc2\n\u00ae"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0fcb"+
		"\n\u00af\3\u00af\5\u00af\u0fce\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\7\u00b1\u0fdd\n\u00b1\f\u00b1\16\u00b1\u0fe0\13\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0fe7\n\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0fef\n\u00b2\3\u00b3\3\u00b3\5\u00b3"+
		"\u0ff3\n\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u0fff\n\u00b4\f\u00b4\16\u00b4\u1002"+
		"\13\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1007\n\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\7\u00b4\u100c\n\u00b4\f\u00b4\16\u00b4\u100f\13\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1015\n\u00b4\3\u00b4\7\u00b4\u1018\n"+
		"\u00b4\f\u00b4\16\u00b4\u101b\13\u00b4\5\u00b4\u101d\n\u00b4\5\u00b4\u101f"+
		"\n\u00b4\3\u00b4\3\u00b4\6\u00b4\u1023\n\u00b4\r\u00b4\16\u00b4\u1024"+
		"\5\u00b4\u1027\n\u00b4\3\u00b4\3\u00b4\7\u00b4\u102b\n\u00b4\f\u00b4\16"+
		"\u00b4\u102e\13\u00b4\5\u00b4\u1030\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\7\u00b5\u1037\n\u00b5\f\u00b5\16\u00b5\u103a\13\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\5\u00b5\u103f\n\u00b5\3\u00b5\3\u00b5\3\u00b5\7"+
		"\u00b5\u1044\n\u00b5\f\u00b5\16\u00b5\u1047\13\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\5\u00b5\u104d\n\u00b5\3\u00b5\7\u00b5\u1050\n\u00b5\f\u00b5"+
		"\16\u00b5\u1053\13\u00b5\5\u00b5\u1055\n\u00b5\5\u00b5\u1057\n\u00b5\3"+
		"\u00b5\3\u00b5\6\u00b5\u105b\n\u00b5\r\u00b5\16\u00b5\u105c\5\u00b5\u105f"+
		"\n\u00b5\3\u00b5\3\u00b5\7\u00b5\u1063\n\u00b5\f\u00b5\16\u00b5\u1066"+
		"\13\u00b5\5\u00b5\u1068\n\u00b5\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u106d"+
		"\n\u00b6\3\u00b6\3\u00b6\3\u00b6\7\u00b6\u1072\n\u00b6\f\u00b6\16\u00b6"+
		"\u1075\13\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u107b\n\u00b7"+
		"\f\u00b7\16\u00b7\u107e\13\u00b7\3\u00b7\3\u00b7\5\u00b7\u1082\n\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u1089\n\u00b7\f\u00b7"+
		"\16\u00b7\u108c\13\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1092"+
		"\n\u00b7\3\u00b7\7\u00b7\u1095\n\u00b7\f\u00b7\16\u00b7\u1098\13\u00b7"+
		"\5\u00b7\u109a\n\u00b7\5\u00b7\u109c\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3"+
		"\u00b7\7\u00b7\u10a2\n\u00b7\f\u00b7\16\u00b7\u10a5\13\u00b7\5\u00b7\u10a7"+
		"\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\7\u00b8\u10b1\n\u00b8\f\u00b8\16\u00b8\u10b4\13\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\5\u00b8\u10b9\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\7\u00ba\u10c9\n\u00ba\f\u00ba\16\u00ba\u10cc\13\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u10d0\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba"+
		"\u10d7\n\u00ba\f\u00ba\16\u00ba\u10da\13\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u10df\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\7\u00ba\u10e8\n\u00ba\f\u00ba\16\u00ba\u10eb\13\u00ba\5\u00ba"+
		"\u10ed\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\7\u00bb\u10f7\n\u00bb\f\u00bb\16\u00bb\u10fa\13\u00bb\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1100\n\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd"+
		"\u110d\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u1119\n\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1124\n\u00be"+
		"\5\u00be\u1126\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\5\u00bf\u1130\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u113a\n\u00c0\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1144\n\u00c2"+
		"\3\u00c3\3\u00c3\5\u00c3\u1148\n\u00c3\3\u00c3\3\u00c3\5\u00c3\u114c\n"+
		"\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3"+
		"\u1155\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\5\u00c3\u1170\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u117f"+
		"\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u1186\n\u00c5"+
		"\3\u00c6\3\u00c6\5\u00c6\u118a\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u1193\n\u00c7\f\u00c7\16\u00c7\u1196"+
		"\13\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u119c\n\u00c8\3\u00c9"+
		"\3\u00c9\5\u00c9\u11a0\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca"+
		"\5\u00ca\u11a7\n\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u11ac\n\u00ca\3"+
		"\u00ca\5\u00ca\u11af\n\u00ca\3\u00ca\5\u00ca\u11b2\n\u00ca\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u11bb\n\u00cb\3\u00cc"+
		"\3\u00cc\5\u00cc\u11bf\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u11db\n\u00cf\f\u00cf\16\u00cf\u11de"+
		"\13\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u11e4\n\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u11e8\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\5\u00cf\u11ef\n\u00cf\3\u00cf\5\u00cf\u11f2\n\u00cf\3\u00cf\3\u00cf\3"+
		"\u00cf\5\u00cf\u11f7\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\5\u00d0\u1201\n\u00d0\3\u00d0\3\u00d0\5\u00d0\u1205"+
		"\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u120b\n\u00d0\3\u00d0"+
		"\5\u00d0\u120e\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u121b\n\u00d0\3\u00d0"+
		"\5\u00d0\u121e\n\u00d0\3\u00d0\5\u00d0\u1221\n\u00d0\3\u00d0\3\u00d0\5"+
		"\u00d0\u1225\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u122c"+
		"\n\u00d0\3\u00d0\5\u00d0\u122f\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u1235\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\5\u00d0\u1247\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\5\u00d0\u124f\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\5\u00d0\u1257\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\5\u00d0\u125f\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u126d"+
		"\n\u00d0\3\u00d0\3\u00d0\5\u00d0\u1271\n\u00d0\3\u00d0\3\u00d0\5\u00d0"+
		"\u1275\n\u00d0\3\u00d0\5\u00d0\u1278\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1282\n\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u128a\n\u00d0\3\u00d0\3"+
		"\u00d0\5\u00d0\u128e\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5"+
		"\u00d0\u1295\n\u00d0\3\u00d0\5\u00d0\u1298\n\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\7\u00d0\u129f\n\u00d0\f\u00d0\16\u00d0\u12a2\13\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u12a7\n\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\5\u00d0\u12ad\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u12b7\n\u00d0\5\u00d0\u12b9\n\u00d0\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u12bf\n\u00d1\3\u00d1\5\u00d1\u12c2"+
		"\n\u00d1\3\u00d1\5\u00d1\u12c5\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\5\u00d2\u12cb\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u12d9\n\u00d3"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5"+
		"\u12e3\n\u00d5\f\u00d5\16\u00d5\u12e6\13\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\5\u00d5\u12ec\n\u00d5\3\u00d5\5\u00d5\u12ef\n\u00d5\3\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d6\3\u00d6\5\u00d6\u12f6\n\u00d6\3\u00d6\3\u00d6\3"+
		"\u00d6\7\u00d6\u12fb\n\u00d6\f\u00d6\16\u00d6\u12fe\13\u00d6\3\u00d7\3"+
		"\u00d7\5\u00d7\u1302\n\u00d7\3\u00d7\6\u00d7\u1305\n\u00d7\r\u00d7\16"+
		"\u00d7\u1306\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7"+
		"\u00d8\u1310\n\u00d8\f\u00d8\16\u00d8\u1313\13\u00d8\3\u00d9\3\u00d9\3"+
		"\u00d9\3\u00d9\3\u00da\3\u00da\3\u00db\3\u00db\5\u00db\u131d\n\u00db\3"+
		"\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u1323\n\u00db\3\u00dc\3\u00dc\3"+
		"\u00dc\5\u00dc\u1328\n\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u132e"+
		"\n\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\5\u00dc\u133a\n\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u1343\n\u00dc\5\u00dc\u1345\n\u00dc\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u134c\n\u00dd\3\u00dd\5"+
		"\u00dd\u134f\n\u00dd\3\u00dd\5\u00dd\u1352\n\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\5\u00dd\u1358\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u135c\n\u00dd\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1362\n\u00de\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u136a\n\u00df\3\u00df\3\u00df\3"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u1379\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u137e\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1384\n\u00e3\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u138a\n\u00e4\3\u00e5\3\u00e5\3"+
		"\u00e5\5\u00e5\u138f\n\u00e5\5\u00e5\u1391\n\u00e5\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\5\u00e6\u1398\n\u00e6\3\u00e6\5\u00e6\u139b\n\u00e6\3"+
		"\u00e7\3\u00e7\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9"+
		"\u13a5\n\u00e9\3\u00ea\3\u00ea\5\u00ea\u13a9\n\u00ea\3\u00eb\3\u00eb\3"+
		"\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\6\u00ec\u13bb\n\u00ec\r\u00ec"+
		"\16\u00ec\u13bc\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u13c4"+
		"\n\u00ed\5\u00ed\u13c6\n\u00ed\3\u00ee\3\u00ee\3\u00ee\6\u00ee\u13cb\n"+
		"\u00ee\r\u00ee\16\u00ee\u13cc\5\u00ee\u13cf\n\u00ee\3\u00ef\3\u00ef\5"+
		"\u00ef\u13d3\n\u00ef\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u13d8\n\u00f0\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\5\u00f1\u13e4\n\u00f1\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u13e9\n\u00f2\3"+
		"\u00f3\3\u00f3\3\u00f4\3\u00f4\5\u00f4\u13ef\n\u00f4\3\u00f5\5\u00f5\u13f2"+
		"\n\u00f5\3\u00f5\3\u00f5\5\u00f5\u13f6\n\u00f5\3\u00f5\6\u00f5\u13f9\n"+
		"\u00f5\r\u00f5\16\u00f5\u13fa\3\u00f5\5\u00f5\u13fe\n\u00f5\3\u00f5\3"+
		"\u00f5\5\u00f5\u1402\n\u00f5\3\u00f5\3\u00f5\5\u00f5\u1406\n\u00f5\5\u00f5"+
		"\u1408\n\u00f5\3\u00f6\3\u00f6\3\u00f7\5\u00f7\u140d\n\u00f7\3\u00f7\3"+
		"\u00f7\3\u00f8\3\u00f8\5\u00f8\u1413\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3"+
		"\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u141d\n\u00f9\3\u00fa\3"+
		"\u00fa\5\u00fa\u1421\n\u00fa\3\u00fa\5\u00fa\u1424\n\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\5\u00fa\u1429\n\u00fa\3\u00fa\3\u00fa\5\u00fa\u142d\n\u00fa\3"+
		"\u00fa\3\u00fa\5\u00fa\u1431\n\u00fa\3\u00fa\5\u00fa\u1434\n\u00fa\3\u00fa"+
		"\5\u00fa\u1437\n\u00fa\3\u00fa\3\u00fa\5\u00fa\u143b\n\u00fa\3\u00fa\5"+
		"\u00fa\u143e\n\u00fa\3\u00fa\5\u00fa\u1441\n\u00fa\3\u00fa\3\u00fa\5\u00fa"+
		"\u1445\n\u00fa\3\u00fa\5\u00fa\u1448\n\u00fa\3\u00fa\5\u00fa\u144b\n\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u1450\n\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\7\u00fa\u1457\n\u00fa\f\u00fa\16\u00fa\u145a\13\u00fa"+
		"\3\u00fa\3\u00fa\5\u00fa\u145e\n\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa"+
		"\u1463\n\u00fa\3\u00fa\3\u00fa\5\u00fa\u1467\n\u00fa\3\u00fa\5\u00fa\u146a"+
		"\n\u00fa\3\u00fb\3\u00fb\5\u00fb\u146e\n\u00fb\3\u00fb\3\u00fb\5\u00fb"+
		"\u1472\n\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u1477\n\u00fb\3\u00fb\3"+
		"\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u147e\n\u00fb\3\u00fb\3\u00fb\5"+
		"\u00fb\u1482\n\u00fb\5\u00fb\u1484\n\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1496\n\u00ff\3\u00ff\3\u00ff\3\u0100"+
		"\3\u0100\3\u0100\7\u0100\u149d\n\u0100\f\u0100\16\u0100\u14a0\13\u0100"+
		"\3\u0101\3\u0101\3\u0101\7\u0101\u14a5\n\u0101\f\u0101\16\u0101\u14a8"+
		"\13\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\7\u0102\u14b6\n\u0102\f\u0102\16\u0102"+
		"\u14b9\13\u0102\3\u0103\3\u0103\3\u0103\3\u0103\7\u0103\u14bf\n\u0103"+
		"\f\u0103\16\u0103\u14c2\13\u0103\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104"+
		"\7\u0104\u14c9\n\u0104\f\u0104\16\u0104\u14cc\13\u0104\3\u0105\3\u0105"+
		"\3\u0105\7\u0105\u14d1\n\u0105\f\u0105\16\u0105\u14d4\13\u0105\3\u0106"+
		"\3\u0106\3\u0106\7\u0106\u14d9\n\u0106\f\u0106\16\u0106\u14dc\13\u0106"+
		"\3\u0107\3\u0107\3\u0107\7\u0107\u14e1\n\u0107\f\u0107\16\u0107\u14e4"+
		"\13\u0107\3\u0108\3\u0108\5\u0108\u14e8\n\u0108\3\u0109\3\u0109\3\u0109"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\5\u010b\u14f6\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u14fc\n"+
		"\u010b\3\u010b\3\u010b\5\u010b\u1500\n\u010b\3\u010b\3\u010b\5\u010b\u1504"+
		"\n\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\6\u010c"+
		"\u1528\n\u010c\r\u010c\16\u010c\u1529\3\u010c\3\u010c\5\u010c\u152e\n"+
		"\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\6\u010c\u1538\n\u010c\r\u010c\16\u010c\u1539\3\u010c\3\u010c\5\u010c"+
		"\u153e\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\5\u010c\u1547\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\5\u010c\u154f\n\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u1554\n\u010c\3"+
		"\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u155c\n\u010c\3"+
		"\u010c\3\u010c\3\u010c\5\u010c\u1561\n\u010c\3\u010c\3\u010c\3\u010c\5"+
		"\u010c\u1566\n\u010c\5\u010c\u1568\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\5\u010c\u1571\n\u010c\3\u010c\3\u010c\3\u010c"+
		"\5\u010c\u1576\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\5\u010c\u157e\n\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u1583\n\u010c\3"+
		"\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u158b\n\u010c\3"+
		"\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u1593\n\u010c\3"+
		"\u010c\5\u010c\u1596\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3"+
		"\u010c\3\u010c\3\u010c\5\u010c\u15a0\n\u010c\3\u010c\3\u010c\3\u010c\3"+
		"\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u15ab\n\u010c\3"+
		"\u010d\3\u010d\3\u010d\5\u010d\u15b0\n\u010d\3\u010d\3\u010d\3\u010d\5"+
		"\u010d\u15b5\n\u010d\7\u010d\u15b7\n\u010d\f\u010d\16\u010d\u15ba\13\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u15c1\n\u010d\3\u010e"+
		"\3\u010e\3\u010e\5\u010e\u15c6\n\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\5\u010e\u15cf\n\u010e\3\u010e\5\u010e\u15d2\n"+
		"\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\5\u010e\u15de\n\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\5\u010e\u15e6\n\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\7\u010e\u15ee\n\u010e\f\u010e\16\u010e\u15f1\13\u010e"+
		"\5\u010e\u15f3\n\u010e\3\u010e\3\u010e\5\u010e\u15f7\n\u010e\3\u010e\3"+
		"\u010e\5\u010e\u15fb\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3"+
		"\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f"+
		"\u1613\n\u010f\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u1619\n\u0110\3"+
		"\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u1620\n\u0110\7\u0110\u1622"+
		"\n\u0110\f\u0110\16\u0110\u1625\13\u0110\3\u0111\3\u0111\3\u0111\3\u0111"+
		"\5\u0111\u162b\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\5\u0112\u1635\n\u0112\3\u0112\3\u0112\3\u0112\5\u0112"+
		"\u163a\n\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\7\u0112\u164d\n\u0112\f\u0112\16\u0112\u1650\13\u0112\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\7\u0113\u1668\n\u0113\f\u0113\16\u0113\u166b"+
		"\13\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\5\u0114\u1678\n\u0114\3\u0115\3\u0115\5\u0115"+
		"\u167c\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\5\u0115\u1685\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\5\u0115\u168e\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u169c"+
		"\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u16a2\n\u0115\3\u0115"+
		"\3\u0115\5\u0115\u16a6\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115"+
		"\u16ac\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\7\u0116\u16d7"+
		"\n\u0116\f\u0116\16\u0116\u16da\13\u0116\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1701\n\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\7\u0117\u170a"+
		"\n\u0117\f\u0117\16\u0117\u170d\13\u0117\3\u0118\3\u0118\3\u0119\3\u0119"+
		"\3\u011a\3\u011a\3\u011b\3\u011b\3\u011c\3\u011c\3\u011d\3\u011d\3\u011e"+
		"\3\u011e\3\u011e\2\6\u0222\u0224\u022a\u022c\u011f\2\4\6\b\n\f\16\20\22"+
		"\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp"+
		"rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124"+
		"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c"+
		"\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154"+
		"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c"+
		"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184"+
		"\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c"+
		"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4"+
		"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc"+
		"\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4"+
		"\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc"+
		"\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214"+
		"\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c"+
		"\u022e\u0230\u0232\u0234\u0236\u0238\u023a\2p\4\2##\u0083\u0083\4\2\u01a0"+
		"\u01a0\u01a5\u01a5\5\2==\u0089\u0089\u009d\u009d\5\2&&\u0121\u0121\u015f"+
		"\u015f\6\2&&\u0140\u0140\u019f\u019f\u01e3\u01e3\4\2\u0197\u0197\u03c0"+
		"\u03c0\4\2CC||\4\2\16\16\u00f9\u00f9\5\2((II\u00a0\u00a0\4\2\u014d\u014d"+
		"\u01b7\u01b7\5\2\u0190\u0190\u0206\u0206\u020c\u020c\4\2\u0127\u0127\u0163"+
		"\u0163\4\2\u0109\u0109\u0171\u0171\4\2\u0107\u0107\u0156\u0156\5\2DDH"+
		"Hmm\5\2&&\u0131\u0131\u014b\u014b\5\2&&\u012d\u012d\u0265\u0265\4\2EE"+
		"OO\5\2\u014f\u014f\u01ae\u01ae\u01e5\u01e5\4\2==\u0089\u0089\3\2\u03b6"+
		"\u03b7\5\2\u014a\u014a\u016c\u016c\u019d\u019d\4\2&&\u03b6\u03b7\b\2&"+
		"&\u0117\u0117\u0119\u0119\u0131\u0131\u014b\u014b\u01c4\u01c4\4\2tt\u0170"+
		"\u0170\3\2\u03b7\u03b8\4\2\7\7..\4\2\f\f\u0097\u0097\4\2\u00a8\u00a8\u021c"+
		"\u021c\4\2\23\23~~\5\2\'\'AA\\\\\4\2\\\\\u011b\u011b\4\2\u0113\u0113\u0147"+
		"\u0147\4\2XX\u01db\u01db\4\2\'\'\\\\\4\2\b\b,,\4\2\u00a4\u00a4\u0217\u0217"+
		"\6\2\u014a\u014a\u016c\u016c\u019c\u019c\u01ba\u01ba\4\2\u014a\u014a\u019c"+
		"\u019c\4\2\r\r))\5\2::CC\u00a2\u00a2\4\2  GG\4\2TT\u0081\u0081\4\2\b\b"+
		",-\3\2\u01f2\u01f3\4\2\u0152\u0152\u01e1\u01e1\4\2\u00be\u00be\u0174\u0174"+
		"\4\2\16\16\u0097\u0097\7\2]]\u0179\u017a\u017c\u017c\u0180\u0188\u01c6"+
		"\u01c6\6\2\u0176\u0177\u017b\u017b\u017d\u017e\u01c7\u01c7\5\2^^\u0175"+
		"\u0175\u017f\u017f\4\2\u0165\u0165\u01f4\u01f4\4\2\u01ee\u01ee\u01f0\u01f0"+
		"\4\2\u0103\u0103\u01f5\u01f5\4\2NN\u01d5\u01d5\4\2\u03c0\u03c0\u03cb\u03cb"+
		"\4\2..\u0125\u0125\5\2\35\35\65\65\u009b\u009b\5\2rr\u0094\u0094\u0150"+
		"\u0150\4\2ZZ\u009e\u009e\4\2\u010f\u010f\u01e6\u01e6\4\2$$\u0219\u0219"+
		"\4\2\u01a3\u01a3\u01b1\u01b1\4\2ee\u0171\u0171\4\2\u0143\u0143\u01c0\u01c0"+
		"\6\2\u00b0\u00b0\u00b2\u00b2\u00b5\u00b5\u01fd\u01fd\4\2\u0104\u0104\u01c8"+
		"\u01c8\4\2\u01fa\u01fa\u0218\u0218\4\2<<DD\b\2rr\u0094\u0094\u0099\u0099"+
		"\u013c\u013c\u0150\u0150\u0219\u0219\4\2\u0196\u0196\u01fa\u01fa\4\2\u0139"+
		"\u0139\u021b\u021b\4\2rr\u0150\u0150\5\2EEPP\u015d\u015d\4\2\u011c\u011c"+
		"\u01bf\u01bf\b\2\u00be\u00be\u0136\u0136\u0138\u0138\u0151\u0151\u01c5"+
		"\u01c5\u01e7\u01e7\4\2)*\66\66\4\2\u0169\u0169\u0208\u0208\3\2\u03cb\u03cc"+
		"\3\2\u0260\u026a\4\2\u03b6\u03b8\u03c1\u03c1\4\2\67\67\u009a\u009a\4\2"+
		"ff\u03c4\u03c4\4\2\u00bc\u00bd\u00c4\u00c7\3\2\u00ac\u00b1\3\2\u00b2\u00b4"+
		"\3\2\u00b5\u00b6\5\2\u00b7\u00b7\u00bb\u00bb\u00c0\u00c3\5\2\u00b8\u00ba"+
		"\u00be\u00bf\u0105\u0105\4\2\u0086\u0086\u00c8\u00c8\4\2\u00be\u00be\u019a"+
		"\u019a\4\2\u009f\u009f\u01e4\u01e4\3\2\u026f\u0275\4\2!!\u00e4\u00e7\3"+
		"\2\u00f0\u00f1\5\2\20\20RR\u0098\u0098\4\2\u00bc\u00bc\u00be\u00be\4\2"+
		"\u00b7\u00b8\u00ba\u00ba\5\2\r\r))\u0329\u0329\5\2\u00d4\u00d4\u00da\u00db"+
		"\u00e0\u00e0\5\2\u00d5\u00d7\u00dc\u00df\u00e1\u00e3\5\2\67\67\u009a\u009a"+
		"\u0210\u0210\4\2\b\b\u00fc\u00fc\3\2\u0238\u025f\3\2\u026b\u026e\3\2\u022f"+
		"\u0237\3\2\u0227\u022e\5\2\u00b7\u00bb\u00c5\u00c5\u00c8\u00c8<\2\u00f8"+
		"\u00f9\u00fb\u0105\u0107\u0107\u0109\u010a\u010d\u010f\u0111\u0119\u011b"+
		"\u011e\u0120\u0121\u0123\u0124\u0127\u0128\u012a\u0132\u0135\u0137\u0139"+
		"\u0141\u0144\u0144\u0147\u0147\u014a\u014b\u014f\u0150\u0152\u0153\u0156"+
		"\u0156\u0158\u0158\u015a\u015a\u015c\u015c\u015e\u0160\u0163\u0163\u0167"+
		"\u0168\u016a\u016c\u016e\u0174\u0189\u018e\u0190\u0191\u0193\u0193\u0195"+
		"\u019a\u019d\u01a3\u01a5\u01a6\u01a9\u01ab\u01ad\u01b1\u01b5\u01b6\u01b9"+
		"\u01b9\u01bb\u01c1\u01c3\u01c4\u01c8\u01cb\u01d3\u01d3\u01d6\u01d8\u01da"+
		"\u01e6\u01e8\u01ea\u01ec\u01ec\u01f1\u01f3\u01f5\u01fa\u01fc\u01fc\u01fe"+
		"\u0200\u0204\u0207\u0209\u0209\u020b\u020e\u0210\u0210\u0212\u0213\u0217"+
		"\u021b\u021d\u021f\u0221\u0221\u0265\u0265\n\2TT\u0081\u0081\u00b7\u00b9"+
		"\u00bb\u00bb\u00d8\u00d8\u00ef\u00ef\u0227\u022e\u026f\u0397\2\u1b2c\2"+
		"\u023d\3\2\2\2\4\u024f\3\2\2\2\6\u0264\3\2\2\2\b\u0266\3\2\2\2\n\u028b"+
		"\3\2\2\2\f\u0297\3\2\2\2\16\u02a2\3\2\2\2\20\u02b3\3\2\2\2\22\u02b8\3"+
		"\2\2\2\24\u02c4\3\2\2\2\26\u02df\3\2\2\2\30\u02e5\3\2\2\2\32\u02e7\3\2"+
		"\2\2\34\u02f3\3\2\2\2\36\u0315\3\2\2\2 \u0336\3\2\2\2\"\u0369\3\2\2\2"+
		"$\u0383\3\2\2\2&\u039f\3\2\2\2(\u0400\3\2\2\2*\u0402\3\2\2\2,\u0414\3"+
		"\2\2\2.\u0451\3\2\2\2\60\u0464\3\2\2\2\62\u0499\3\2\2\2\64\u049b\3\2\2"+
		"\2\66\u04c7\3\2\2\28\u04cd\3\2\2\2:\u04cf\3\2\2\2<\u04e3\3\2\2\2>\u04e5"+
		"\3\2\2\2@\u04f3\3\2\2\2B\u04f5\3\2\2\2D\u04f9\3\2\2\2F\u0513\3\2\2\2H"+
		"\u0523\3\2\2\2J\u0525\3\2\2\2L\u0535\3\2\2\2N\u0537\3\2\2\2P\u0551\3\2"+
		"\2\2R\u058f\3\2\2\2T\u0591\3\2\2\2V\u059c\3\2\2\2X\u05a4\3\2\2\2Z\u05b2"+
		"\3\2\2\2\\\u05d0\3\2\2\2^\u0666\3\2\2\2`\u0668\3\2\2\2b\u0692\3\2\2\2"+
		"d\u06a9\3\2\2\2f\u06ab\3\2\2\2h\u070a\3\2\2\2j\u075b\3\2\2\2l\u075d\3"+
		"\2\2\2n\u0784\3\2\2\2p\u078d\3\2\2\2r\u0794\3\2\2\2t\u07ab\3\2\2\2v\u07b4"+
		"\3\2\2\2x\u07c3\3\2\2\2z\u07da\3\2\2\2|\u07ee\3\2\2\2~\u0940\3\2\2\2\u0080"+
		"\u0942\3\2\2\2\u0082\u0949\3\2\2\2\u0084\u0950\3\2\2\2\u0086\u0966\3\2"+
		"\2\2\u0088\u096e\3\2\2\2\u008a\u0975\3\2\2\2\u008c\u097c\3\2\2\2\u008e"+
		"\u0983\3\2\2\2\u0090\u098f\3\2\2\2\u0092\u0999\3\2\2\2\u0094\u09a0\3\2"+
		"\2\2\u0096\u09b0\3\2\2\2\u0098\u09bf\3\2\2\2\u009a\u09c5\3\2\2\2\u009c"+
		"\u09d1\3\2\2\2\u009e\u09d3\3\2\2\2\u00a0\u09da\3\2\2\2\u00a2\u09dc\3\2"+
		"\2\2\u00a4\u0a0e\3\2\2\2\u00a6\u0a6a\3\2\2\2\u00a8\u0aa5\3\2\2\2\u00aa"+
		"\u0b11\3\2\2\2\u00ac\u0b15\3\2\2\2\u00ae\u0b26\3\2\2\2\u00b0\u0b28\3\2"+
		"\2\2\u00b2\u0b2e\3\2\2\2\u00b4\u0b30\3\2\2\2\u00b6\u0b4e\3\2\2\2\u00b8"+
		"\u0b85\3\2\2\2\u00ba\u0b8e\3\2\2\2\u00bc\u0ba2\3\2\2\2\u00be\u0bae\3\2"+
		"\2\2\u00c0\u0bb2\3\2\2\2\u00c2\u0bd3\3\2\2\2\u00c4\u0be8\3\2\2\2\u00c6"+
		"\u0bf2\3\2\2\2\u00c8\u0bf6\3\2\2\2\u00ca\u0c0f\3\2\2\2\u00cc\u0c39\3\2"+
		"\2\2\u00ce\u0c3b\3\2\2\2\u00d0\u0c77\3\2\2\2\u00d2\u0c79\3\2\2\2\u00d4"+
		"\u0c83\3\2\2\2\u00d6\u0c8d\3\2\2\2\u00d8\u0c8f\3\2\2\2\u00da\u0ca3\3\2"+
		"\2\2\u00dc\u0cb4\3\2\2\2\u00de\u0cba\3\2\2\2\u00e0\u0cca\3\2\2\2\u00e2"+
		"\u0cce\3\2\2\2\u00e4\u0cf4\3\2\2\2\u00e6\u0d32\3\2\2\2\u00e8\u0d34\3\2"+
		"\2\2\u00ea\u0d4e\3\2\2\2\u00ec\u0d52\3\2\2\2\u00ee\u0d5f\3\2\2\2\u00f0"+
		"\u0d6b\3\2\2\2\u00f2\u0d6f\3\2\2\2\u00f4\u0d80\3\2\2\2\u00f6\u0d91\3\2"+
		"\2\2\u00f8\u0d94\3\2\2\2\u00fa\u0d9e\3\2\2\2\u00fc\u0da2\3\2\2\2\u00fe"+
		"\u0dac\3\2\2\2\u0100\u0daf\3\2\2\2\u0102\u0db4\3\2\2\2\u0104\u0dc8\3\2"+
		"\2\2\u0106\u0dca\3\2\2\2\u0108\u0de2\3\2\2\2\u010a\u0deb\3\2\2\2\u010c"+
		"\u0ded\3\2\2\2\u010e\u0dfb\3\2\2\2\u0110\u0e06\3\2\2\2\u0112\u0e0c\3\2"+
		"\2\2\u0114\u0e0f\3\2\2\2\u0116\u0e17\3\2\2\2\u0118\u0e30\3\2\2\2\u011a"+
		"\u0e3c\3\2\2\2\u011c\u0e3f\3\2\2\2\u011e\u0e5f\3\2\2\2\u0120\u0e61\3\2"+
		"\2\2\u0122\u0e63\3\2\2\2\u0124\u0e65\3\2\2\2\u0126\u0e67\3\2\2\2\u0128"+
		"\u0e95\3\2\2\2\u012a\u0e97\3\2\2\2\u012c\u0eab\3\2\2\2\u012e\u0eb9\3\2"+
		"\2\2\u0130\u0ec4\3\2\2\2\u0132\u0ec6\3\2\2\2\u0134\u0ecc\3\2\2\2\u0136"+
		"\u0ed6\3\2\2\2\u0138\u0eda\3\2\2\2\u013a\u0ee1\3\2\2\2\u013c\u0ee5\3\2"+
		"\2\2\u013e\u0eeb\3\2\2\2\u0140\u0ef0\3\2\2\2\u0142\u0ef6\3\2\2\2\u0144"+
		"\u0efc\3\2\2\2\u0146\u0f01\3\2\2\2\u0148\u0f2f\3\2\2\2\u014a\u0f4e\3\2"+
		"\2\2\u014c\u0f6e\3\2\2\2\u014e\u0f71\3\2\2\2\u0150\u0f77\3\2\2\2\u0152"+
		"\u0f87\3\2\2\2\u0154\u0f96\3\2\2\2\u0156\u0f9c\3\2\2\2\u0158\u0fba\3\2"+
		"\2\2\u015a\u0fbc\3\2\2\2\u015c\u0fc3\3\2\2\2\u015e\u0fcf\3\2\2\2\u0160"+
		"\u0fd5\3\2\2\2\u0162\u0fee\3\2\2\2\u0164\u0ff2\3\2\2\2\u0166\u102f\3\2"+
		"\2\2\u0168\u1067\3\2\2\2\u016a\u1069\3\2\2\2\u016c\u1076\3\2\2\2\u016e"+
		"\u10a8\3\2\2\2\u0170\u10ba\3\2\2\2\u0172\u10ec\3\2\2\2\u0174\u10ee\3\2"+
		"\2\2\u0176\u10fb\3\2\2\2\u0178\u1104\3\2\2\2\u017a\u1125\3\2\2\2\u017c"+
		"\u112f\3\2\2\2\u017e\u1139\3\2\2\2\u0180\u113b\3\2\2\2\u0182\u113e\3\2"+
		"\2\2\u0184\u116f\3\2\2\2\u0186\u117e\3\2\2\2\u0188\u1185\3\2\2\2\u018a"+
		"\u1187\3\2\2\2\u018c\u118e\3\2\2\2\u018e\u1197\3\2\2\2\u0190\u119d\3\2"+
		"\2\2\u0192\u11a4\3\2\2\2\u0194\u11ba\3\2\2\2\u0196\u11bc\3\2\2\2\u0198"+
		"\u11c7\3\2\2\2\u019a\u11cd\3\2\2\2\u019c\u11f6\3\2\2\2\u019e\u12b8\3\2"+
		"\2\2\u01a0\u12c4\3\2\2\2\u01a2\u12ca\3\2\2\2\u01a4\u12d8\3\2\2\2\u01a6"+
		"\u12da\3\2\2\2\u01a8\u12dd\3\2\2\2\u01aa\u12f3\3\2\2\2\u01ac\u12ff\3\2"+
		"\2\2\u01ae\u1308\3\2\2\2\u01b0\u1314\3\2\2\2\u01b2\u1318\3\2\2\2\u01b4"+
		"\u131a\3\2\2\2\u01b6\u1344\3\2\2\2\u01b8\u1346\3\2\2\2\u01ba\u135d\3\2"+
		"\2\2\u01bc\u1363\3\2\2\2\u01be\u136d\3\2\2\2\u01c0\u1370\3\2\2\2\u01c2"+
		"\u137d\3\2\2\2\u01c4\u137f\3\2\2\2\u01c6\u1385\3\2\2\2\u01c8\u138b\3\2"+
		"\2\2\u01ca\u1392\3\2\2\2\u01cc\u139c\3\2\2\2\u01ce\u139e\3\2\2\2\u01d0"+
		"\u13a4\3\2\2\2\u01d2\u13a8\3\2\2\2\u01d4\u13aa\3\2\2\2\u01d6\u13ac\3\2"+
		"\2\2\u01d8\u13be\3\2\2\2\u01da\u13ce\3\2\2\2\u01dc\u13d2\3\2\2\2\u01de"+
		"\u13d7\3\2\2\2\u01e0\u13e3\3\2\2\2\u01e2\u13e8\3\2\2\2\u01e4\u13ea\3\2"+
		"\2\2\u01e6\u13ee\3\2\2\2\u01e8\u1407\3\2\2\2\u01ea\u1409\3\2\2\2\u01ec"+
		"\u140c\3\2\2\2\u01ee\u1412\3\2\2\2\u01f0\u141c\3\2\2\2\u01f2\u1469\3\2"+
		"\2\2\u01f4\u1483\3\2\2\2\u01f6\u1485\3\2\2\2\u01f8\u1487\3\2\2\2\u01fa"+
		"\u148b\3\2\2\2\u01fc\u1491\3\2\2\2\u01fe\u1499\3\2\2\2\u0200\u14a1\3\2"+
		"\2\2\u0202\u14a9\3\2\2\2\u0204\u14ba\3\2\2\2\u0206\u14c5\3\2\2\2\u0208"+
		"\u14cd\3\2\2\2\u020a\u14d5\3\2\2\2\u020c\u14dd\3\2\2\2\u020e\u14e7\3\2"+
		"\2\2\u0210\u14e9\3\2\2\2\u0212\u14ec\3\2\2\2\u0214\u1503\3\2\2\2\u0216"+
		"\u15aa\3\2\2\2\u0218\u15c0\3\2\2\2\u021a\u15fa\3\2\2\2\u021c\u1612\3\2"+
		"\2\2\u021e\u1618\3\2\2\2\u0220\u162a\3\2\2\2\u0222\u1639\3\2\2\2\u0224"+
		"\u1651\3\2\2\2\u0226\u1677\3\2\2\2\u0228\u16ab\3\2\2\2\u022a\u16ad\3\2"+
		"\2\2\u022c\u1700\3\2\2\2\u022e\u170e\3\2\2\2\u0230\u1710\3\2\2\2\u0232"+
		"\u1712\3\2\2\2\u0234\u1714\3\2\2\2\u0236\u1716\3\2\2\2\u0238\u1718\3\2"+
		"\2\2\u023a\u171a\3\2\2\2\u023c\u023e\5\4\3\2\u023d\u023c\3\2\2\2\u023d"+
		"\u023e\3\2\2\2\u023e\u0241\3\2\2\2\u023f\u0240\7\u03a5\2\2\u0240\u0242"+
		"\7\u03a5\2\2\u0241\u023f\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0243\3\2\2"+
		"\2\u0243\u0244\7\2\2\3\u0244\3\3\2\2\2\u0245\u0248\5\6\4\2\u0246\u0247"+
		"\7\u03a5\2\2\u0247\u0249\7\u03a5\2\2\u0248\u0246\3\2\2\2\u0248\u0249\3"+
		"\2\2\2\u0249\u024a\3\2\2\2\u024a\u024b\7\u03b4\2\2\u024b\u024e\3\2\2\2"+
		"\u024c\u024e\5\b\5\2\u024d\u0245\3\2\2\2\u024d\u024c\3\2\2\2\u024e\u0251"+
		"\3\2\2\2\u024f\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u025b\3\2\2\2\u0251"+
		"\u024f\3\2\2\2\u0252\u0258\5\6\4\2\u0253\u0254\7\u03a5\2\2\u0254\u0256"+
		"\7\u03a5\2\2\u0255\u0253\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257\3\2\2"+
		"\2\u0257\u0259\7\u03b4\2\2\u0258\u0255\3\2\2\2\u0258\u0259\3\2\2\2\u0259"+
		"\u025c\3\2\2\2\u025a\u025c\5\b\5\2\u025b\u0252\3\2\2\2\u025b\u025a\3\2"+
		"\2\2\u025c\5\3\2\2\2\u025d\u0265\5\n\6\2\u025e\u0265\5\f\7\2\u025f\u0265"+
		"\5\16\b\2\u0260\u0265\5\20\t\2\u0261\u0265\5\22\n\2\u0262\u0265\5\26\f"+
		"\2\u0263\u0265\5\30\r\2\u0264\u025d\3\2\2\2\u0264\u025e\3\2\2\2\u0264"+
		"\u025f\3\2\2\2\u0264\u0260\3\2\2\2\u0264\u0261\3\2\2\2\u0264\u0262\3\2"+
		"\2\2\u0264\u0263\3\2\2\2\u0265\7\3\2\2\2\u0266\u0267\7\u03b4\2\2\u0267"+
		"\t\3\2\2\2\u0268\u028c\5\32\16\2\u0269\u028c\5\34\17\2\u026a\u028c\5\36"+
		"\20\2\u026b\u028c\5 \21\2\u026c\u028c\5\"\22\2\u026d\u028c\5$\23\2\u026e"+
		"\u028c\5&\24\2\u026f\u028c\5(\25\2\u0270\u028c\5*\26\2\u0271\u028c\5,"+
		"\27\2\u0272\u028c\5.\30\2\u0273\u028c\5\60\31\2\u0274\u028c\5j\66\2\u0275"+
		"\u028c\5l\67\2\u0276\u028c\5n8\2\u0277\u028c\5p9\2\u0278\u028c\5r:\2\u0279"+
		"\u028c\5t;\2\u027a\u028c\5v<\2\u027b\u028c\5x=\2\u027c\u028c\5z>\2\u027d"+
		"\u028c\5|?\2\u027e\u028c\5\u0080A\2\u027f\u028c\5\u0082B\2\u0280\u028c"+
		"\5\u0084C\2\u0281\u028c\5\u0086D\2\u0282\u028c\5\u0088E\2\u0283\u028c"+
		"\5\u008aF\2\u0284\u028c\5\u008cG\2\u0285\u028c\5\u008eH\2\u0286\u028c"+
		"\5\u0090I\2\u0287\u028c\5\u0092J\2\u0288\u028c\5\u0094K\2\u0289\u028c"+
		"\5\u0096L\2\u028a\u028c\5\u0098M\2\u028b\u0268\3\2\2\2\u028b\u0269\3\2"+
		"\2\2\u028b\u026a\3\2\2\2\u028b\u026b\3\2\2\2\u028b\u026c\3\2\2\2\u028b"+
		"\u026d\3\2\2\2\u028b\u026e\3\2\2\2\u028b\u026f\3\2\2\2\u028b\u0270\3\2"+
		"\2\2\u028b\u0271\3\2\2\2\u028b\u0272\3\2\2\2\u028b\u0273\3\2\2\2\u028b"+
		"\u0274\3\2\2\2\u028b\u0275\3\2\2\2\u028b\u0276\3\2\2\2\u028b\u0277\3\2"+
		"\2\2\u028b\u0278\3\2\2\2\u028b\u0279\3\2\2\2\u028b\u027a\3\2\2\2\u028b"+
		"\u027b\3\2\2\2\u028b\u027c\3\2\2\2\u028b\u027d\3\2\2\2\u028b\u027e\3\2"+
		"\2\2\u028b\u027f\3\2\2\2\u028b\u0280\3\2\2\2\u028b\u0281\3\2\2\2\u028b"+
		"\u0282\3\2\2\2\u028b\u0283\3\2\2\2\u028b\u0284\3\2\2\2\u028b\u0285\3\2"+
		"\2\2\u028b\u0286\3\2\2\2\u028b\u0287\3\2\2\2\u028b\u0288\3\2\2\2\u028b"+
		"\u0289\3\2\2\2\u028b\u028a\3\2\2\2\u028c\13\3\2\2\2\u028d\u0298\5\u00aa"+
		"V\2\u028e\u0298\5\u00a2R\2\u028f\u0298\5\u00acW\2\u0290\u0298\5\u009c"+
		"O\2\u0291\u0298\5\u00a8U\2\u0292\u0298\5\u009aN\2\u0293\u0298\5\u00a4"+
		"S\2\u0294\u0298\5\u00a6T\2\u0295\u0298\5\u009eP\2\u0296\u0298\5\u00a0"+
		"Q\2\u0297\u028d\3\2\2\2\u0297\u028e\3\2\2\2\u0297\u028f\3\2\2\2\u0297"+
		"\u0290\3\2\2\2\u0297\u0291\3\2\2\2\u0297\u0292\3\2\2\2\u0297\u0293\3\2"+
		"\2\2\u0297\u0294\3\2\2\2\u0297\u0295\3\2\2\2\u0297\u0296\3\2\2\2\u0298"+
		"\r\3\2\2\2\u0299\u02a3\5\u00eex\2\u029a\u02a3\5\u00f0y\2\u029b\u02a3\5"+
		"\u00f2z\2\u029c\u02a3\5\u00f4{\2\u029d\u02a3\5\u00f6|\2\u029e\u02a3\5"+
		"\u00f8}\2\u029f\u02a3\5\u00fa~\2\u02a0\u02a3\5\u00fc\177\2\u02a1\u02a3"+
		"\5\u00fe\u0080\2\u02a2\u0299\3\2\2\2\u02a2\u029a\3\2\2\2\u02a2\u029b\3"+
		"\2\2\2\u02a2\u029c\3\2\2\2\u02a2\u029d\3\2\2\2\u02a2\u029e\3\2\2\2\u02a2"+
		"\u029f\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a1\3\2\2\2\u02a3\17\3\2\2"+
		"\2\u02a4\u02b4\5\u010c\u0087\2\u02a5\u02b4\5\u010e\u0088\2\u02a6\u02b4"+
		"\5\u0110\u0089\2\u02a7\u02b4\5\u0112\u008a\2\u02a8\u02b4\5\u0114\u008b"+
		"\2\u02a9\u02b4\5\u0116\u008c\2\u02aa\u02b4\5\u0118\u008d\2\u02ab\u02b4"+
		"\5\u011a\u008e\2\u02ac\u02b4\5\u011c\u008f\2\u02ad\u02b4\5\u0132\u009a"+
		"\2\u02ae\u02b4\5\u0134\u009b\2\u02af\u02b4\5\u0136\u009c\2\u02b0\u02b4"+
		"\5\u0138\u009d\2\u02b1\u02b4\5\u013a\u009e\2\u02b2\u02b4\5\u013c\u009f"+
		"\2\u02b3\u02a4\3\2\2\2\u02b3\u02a5\3\2\2\2\u02b3\u02a6\3\2\2\2\u02b3\u02a7"+
		"\3\2\2\2\u02b3\u02a8\3\2\2\2\u02b3\u02a9\3\2\2\2\u02b3\u02aa\3\2\2\2\u02b3"+
		"\u02ab\3\2\2\2\u02b3\u02ac\3\2\2\2\u02b3\u02ad\3\2\2\2\u02b3\u02ae\3\2"+
		"\2\2\u02b3\u02af\3\2\2\2\u02b3\u02b0\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3"+
		"\u02b2\3\2\2\2\u02b4\21\3\2\2\2\u02b5\u02b9\5\u013e\u00a0\2\u02b6\u02b9"+
		"\5\u0140\u00a1\2\u02b7\u02b9\5\u0142\u00a2\2\u02b8\u02b5\3\2\2\2\u02b8"+
		"\u02b6\3\2\2\2\u02b8\u02b7\3\2\2\2\u02b9\23\3\2\2\2\u02ba\u02c5\5\u0146"+
		"\u00a4\2\u02bb\u02c5\5\u0148\u00a5\2\u02bc\u02c5\5\u014a\u00a6\2\u02bd"+
		"\u02c5\5\u014e\u00a8\2\u02be\u02c5\5\u0150\u00a9\2\u02bf\u02c5\5\u0152"+
		"\u00aa\2\u02c0\u02c5\5\u0156\u00ac\2\u02c1\u02c5\5\u014c\u00a7\2\u02c2"+
		"\u02c5\5\u0154\u00ab\2\u02c3\u02c5\5\u0158\u00ad\2\u02c4\u02ba\3\2\2\2"+
		"\u02c4\u02bb\3\2\2\2\u02c4\u02bc\3\2\2\2\u02c4\u02bd\3\2\2\2\u02c4\u02be"+
		"\3\2\2\2\u02c4\u02bf\3\2\2\2\u02c4\u02c0\3\2\2\2\u02c4\u02c1\3\2\2\2\u02c4"+
		"\u02c2\3\2\2\2\u02c4\u02c3\3\2\2\2\u02c5\25\3\2\2\2\u02c6\u02e0\5\u0166"+
		"\u00b4\2\u02c7\u02e0\5\u0168\u00b5\2\u02c8\u02e0\5\u016a\u00b6\2\u02c9"+
		"\u02e0\5\u016c\u00b7\2\u02ca\u02e0\5\u016e\u00b8\2\u02cb\u02e0\5\u0170"+
		"\u00b9\2\u02cc\u02e0\5\u0172\u00ba\2\u02cd\u02e0\5\u0174\u00bb\2\u02ce"+
		"\u02e0\5\u018a\u00c6\2\u02cf\u02e0\5\u018c\u00c7\2\u02d0\u02e0\5\u018e"+
		"\u00c8\2\u02d1\u02e0\5\u0190\u00c9\2\u02d2\u02e0\5\u0192\u00ca\2\u02d3"+
		"\u02e0\5\u0196\u00cc\2\u02d4\u02e0\5\u0198\u00cd\2\u02d5\u02e0\5\u019a"+
		"\u00ce\2\u02d6\u02e0\5\u019c\u00cf\2\u02d7\u02e0\5\u019e\u00d0\2\u02d8"+
		"\u02e0\5\u01a6\u00d4\2\u02d9\u02e0\5\u01a8\u00d5\2\u02da\u02e0\5\u01aa"+
		"\u00d6\2\u02db\u02e0\5\u01ac\u00d7\2\u02dc\u02e0\5\u01ae\u00d8\2\u02dd"+
		"\u02e0\5\u01b0\u00d9\2\u02de\u02e0\5\u01b2\u00da\2\u02df\u02c6\3\2\2\2"+
		"\u02df\u02c7\3\2\2\2\u02df\u02c8\3\2\2\2\u02df\u02c9\3\2\2\2\u02df\u02ca"+
		"\3\2\2\2\u02df\u02cb\3\2\2\2\u02df\u02cc\3\2\2\2\u02df\u02cd\3\2\2\2\u02df"+
		"\u02ce\3\2\2\2\u02df\u02cf\3\2\2\2\u02df\u02d0\3\2\2\2\u02df\u02d1\3\2"+
		"\2\2\u02df\u02d2\3\2\2\2\u02df\u02d3\3\2\2\2\u02df\u02d4\3\2\2\2\u02df"+
		"\u02d5\3\2\2\2\u02df\u02d6\3\2\2\2\u02df\u02d7\3\2\2\2\u02df\u02d8\3\2"+
		"\2\2\u02df\u02d9\3\2\2\2\u02df\u02da\3\2\2\2\u02df\u02db\3\2\2\2\u02df"+
		"\u02dc\3\2\2\2\u02df\u02dd\3\2\2\2\u02df\u02de\3\2\2\2\u02e0\27\3\2\2"+
		"\2\u02e1\u02e6\5\u01ba\u00de\2\u02e2\u02e6\5\u01bc\u00df\2\u02e3\u02e6"+
		"\5\u01be\u00e0\2\u02e4\u02e6\5\u01c0\u00e1\2\u02e5\u02e1\3\2\2\2\u02e5"+
		"\u02e2\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e5\u02e4\3\2\2\2\u02e6\31\3\2\2"+
		"\2\u02e7\u02e8\7\37\2\2\u02e8\u02ea\t\2\2\2\u02e9\u02eb\5\u0212\u010a"+
		"\2\u02ea\u02e9\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02f0"+
		"\5\u01de\u00f0\2\u02ed\u02ef\5\62\32\2\u02ee\u02ed\3\2\2\2\u02ef\u02f2"+
		"\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\33\3\2\2\2\u02f2"+
		"\u02f0\3\2\2\2\u02f3\u02f5\7\37\2\2\u02f4\u02f6\5\64\33\2\u02f5\u02f4"+
		"\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f9\7\u013c\2"+
		"\2\u02f8\u02fa\5\u0212\u010a\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2"+
		"\u02fa\u02fb\3\2\2\2\u02fb\u02fc\5\u01c6\u00e4\2\u02fc\u02fd\7g\2\2\u02fd"+
		"\u02fe\7\u01de\2\2\u02fe\u0305\5\66\34\2\u02ff\u0300\7g\2\2\u0300\u0302"+
		"\7\u0118\2\2\u0301\u0303\7d\2\2\u0302\u0301\3\2\2\2\u0302\u0303\3\2\2"+
		"\2\u0303\u0304\3\2\2\2\u0304\u0306\7\u01b9\2\2\u0305\u02ff\3\2\2\2\u0305"+
		"\u0306\3\2\2\2\u0306\u030c\3\2\2\2\u0307\u030d\7\u0132\2\2\u0308\u030d"+
		"\7\u012b\2\2\u0309\u030a\7\u012b\2\2\u030a\u030b\7g\2\2\u030b\u030d\7"+
		"\u01e6\2\2\u030c\u0307\3\2\2\2\u030c\u0308\3\2\2\2\u030c\u0309\3\2\2\2"+
		"\u030c\u030d\3\2\2\2\u030d\u0310\3\2\2\2\u030e\u030f\7\u0115\2\2\u030f"+
		"\u0311\7\u03c0\2\2\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0312"+
		"\3\2\2\2\u0312\u0313\7\u012e\2\2\u0313\u0314\5\u0144\u00a3\2\u0314\35"+
		"\3\2\2\2\u0315\u0317\7\37\2\2\u0316\u0318\t\3\2\2\u0317\u0316\3\2\2\2"+
		"\u0317\u0318\3\2\2\2\u0318\u031a\3\2\2\2\u0319\u031b\t\4\2\2\u031a\u0319"+
		"\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031d\7E\2\2\u031d"+
		"\u031f\5\u01de\u00f0\2\u031e\u0320\5> \2\u031f\u031e\3\2\2\2\u031f\u0320"+
		"\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322\7g\2\2\u0322\u0323\5\u01c4\u00e3"+
		"\2\u0323\u0327\5\u0204\u0103\2\u0324\u0326\5@!\2\u0325\u0324\3\2\2\2\u0326"+
		"\u0329\3\2\2\2\u0327\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u0334\3\2"+
		"\2\2\u0329\u0327\3\2\2\2\u032a\u032c\7\u00fb\2\2\u032b\u032d\7\u03a8\2"+
		"\2\u032c\u032b\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0335"+
		"\t\5\2\2\u032f\u0331\7Z\2\2\u0330\u0332\7\u03a8\2\2\u0331\u0330\3\2\2"+
		"\2\u0331\u0332\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0335\t\6\2\2\u0334\u032a"+
		"\3\2\2\2\u0334\u032f\3\2\2\2\u0334\u0335\3\2\2\2\u0335\37\3\2\2\2\u0336"+
		"\u0337\7\37\2\2\u0337\u0338\7\u0172\2\2\u0338\u0339\7?\2\2\u0339\u033a"+
		"\5\u01de\u00f0\2\u033a\u033b\7\7\2\2\u033b\u033c\7\u020d\2\2\u033c\u0342"+
		"\7\u03c0\2\2\u033d\u033f\7\u015e\2\2\u033e\u0340\7\u03a8\2\2\u033f\u033e"+
		"\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0343\5\u01e6\u00f4"+
		"\2\u0342\u033d\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0349\3\2\2\2\u0344\u0346"+
		"\7\u020e\2\2\u0345\u0347\7\u03a8\2\2\u0346\u0345\3\2\2\2\u0346\u0347\3"+
		"\2\2\2\u0347\u0348\3\2\2\2\u0348\u034a\5\u01e6\u00f4\2\u0349\u0344\3\2"+
		"\2\2\u0349\u034a\3\2\2\2\u034a\u0350\3\2\2\2\u034b\u034d\7\u01c3\2\2\u034c"+
		"\u034e\7\u03a8\2\2\u034d\u034c\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034f"+
		"\3\2\2\2\u034f\u0351\5\u01e6\u00f4\2\u0350\u034b\3\2\2\2\u0350\u0351\3"+
		"\2\2\2\u0351\u0357\3\2\2\2\u0352\u0354\7\u019e\2\2\u0353\u0355\7\u03a8"+
		"\2\2\u0354\u0353\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0356\3\2\2\2\u0356"+
		"\u0358\5\u01de\u00f0\2\u0357\u0352\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u035a"+
		"\3\2\2\2\u0359\u035b\7\u021a\2\2\u035a\u0359\3\2\2\2\u035a\u035b\3\2\2"+
		"\2\u035b\u0361\3\2\2\2\u035c\u035e\7\u0115\2\2\u035d\u035f\7\u03a8\2\2"+
		"\u035e\u035d\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0362"+
		"\7\u03c0\2\2\u0361\u035c\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0363\3\2\2"+
		"\2\u0363\u0365\7\u0136\2\2\u0364\u0366\7\u03a8\2\2\u0365\u0364\3\2\2\2"+
		"\u0365\u0366\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\5\u01d4\u00eb\2\u0368"+
		"!\3\2\2\2\u0369\u036b\7\37\2\2\u036a\u036c\5\64\33\2\u036b\u036a\3\2\2"+
		"\2\u036b\u036c\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036e\7r\2\2\u036e\u036f"+
		"\5\u01c6\u00e4\2\u036f\u0371\7\u03b1\2\2\u0370\u0372\5B\"\2\u0371\u0370"+
		"\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0377\3\2\2\2\u0373\u0374\7\u03b3\2"+
		"\2\u0374\u0376\5B\"\2\u0375\u0373\3\2\2\2\u0376\u0379\3\2\2\2\u0377\u0375"+
		"\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u037a\3\2\2\2\u0379\u0377\3\2\2\2\u037a"+
		"\u037e\7\u03b2\2\2\u037b\u037d\5F$\2\u037c\u037b\3\2\2\2\u037d\u0380\3"+
		"\2\2\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381\3\2\2\2\u0380"+
		"\u037e\3\2\2\2\u0381\u0382\5\u0144\u00a3\2\u0382#\3\2\2\2\u0383\u0385"+
		"\7\37\2\2\u0384\u0386\5\64\33\2\u0385\u0384\3\2\2\2\u0385\u0386\3\2\2"+
		"\2\u0386\u0387\3\2\2\2\u0387\u0388\7\u0150\2\2\u0388\u0389\5\u01c6\u00e4"+
		"\2\u0389\u038b\7\u03b1\2\2\u038a\u038c\5D#\2\u038b\u038a\3\2\2\2\u038b"+
		"\u038c\3\2\2\2\u038c\u0391\3\2\2\2\u038d\u038e\7\u03b3\2\2\u038e\u0390"+
		"\5D#\2\u038f\u038d\3\2\2\2\u0390\u0393\3\2\2\2\u0391\u038f\3\2\2\2\u0391"+
		"\u0392\3\2\2\2\u0392\u0394\3\2\2\2\u0393\u0391\3\2\2\2\u0394\u0395\7\u03b2"+
		"\2\2\u0395\u0396\7\u01d6\2\2\u0396\u039a\5\u01f2\u00fa\2\u0397\u0399\5"+
		"F$\2\u0398\u0397\3\2\2\2\u0399\u039c\3\2\2\2\u039a\u0398\3\2\2\2\u039a"+
		"\u039b\3\2\2\2\u039b\u039d\3\2\2\2\u039c\u039a\3\2\2\2\u039d\u039e\5\u0144"+
		"\u00a3\2\u039e%\3\2\2\2\u039f\u03a0\7\37\2\2\u03a0\u03a1\7\u01e0\2\2\u03a1"+
		"\u03a2\5\u01de\u00f0\2\u03a2\u03a3\7;\2\2\u03a3\u03a4\7\u0123\2\2\u03a4"+
		"\u03a5\7\u021e\2\2\u03a5\u03a6\t\7\2\2\u03a6\u03a7\7\u01a9\2\2\u03a7\u03a8"+
		"\7\u03b1\2\2\u03a8\u03ad\5H%\2\u03a9\u03aa\7\u03b3\2\2\u03aa\u03ac\5H"+
		"%\2\u03ab\u03a9\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad"+
		"\u03ae\3\2\2\2\u03ae\u03b0\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b1\7\u03b2"+
		"\2\2\u03b1\'\3\2\2\2\u03b2\u03b4\7\37\2\2\u03b3\u03b5\7\u0205\2\2\u03b4"+
		"\u03b3\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\7\u0094"+
		"\2\2\u03b7\u03b9\5\u0212\u010a\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2"+
		"\2\u03b9\u03ba\3\2\2\2\u03ba\u03c2\5\u01c4\u00e3\2\u03bb\u03bc\7U\2\2"+
		"\u03bc\u03c3\5\u01c4\u00e3\2\u03bd\u03be\7\u03b1\2\2\u03be\u03bf\7U\2"+
		"\2\u03bf\u03c0\5\u01c4\u00e3\2\u03c0\u03c1\7\u03b2\2\2\u03c1\u03c3\3\2"+
		"\2\2\u03c2\u03bb\3\2\2\2\u03c2\u03bd\3\2\2\2\u03c3\u0401\3\2\2\2\u03c4"+
		"\u03c6\7\37\2\2\u03c5\u03c7\7\u0205\2\2\u03c6\u03c5\3\2\2\2\u03c6\u03c7"+
		"\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03ca\7\u0094\2\2\u03c9\u03cb\5\u0212"+
		"\u010a\2\u03ca\u03c9\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc"+
		"\u03ce\5\u01c4\u00e3\2\u03cd\u03cf\5J&\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf"+
		"\3\2\2\2\u03cf\u03da\3\2\2\2\u03d0\u03d7\5^\60\2\u03d1\u03d3\7\u03b3\2"+
		"\2\u03d2\u03d1\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d6"+
		"\5^\60\2\u03d5\u03d2\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7"+
		"\u03d8\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9\u03d7\3\2\2\2\u03da\u03d0\3\2"+
		"\2\2\u03da\u03db\3\2\2\2\u03db\u03dd\3\2\2\2\u03dc\u03de\5`\61\2\u03dd"+
		"\u03dc\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e0\3\2\2\2\u03df\u03e1\t\b"+
		"\2\2\u03e0\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e3\3\2\2\2\u03e2"+
		"\u03e4\7\f\2\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e5\3\2"+
		"\2\2\u03e5\u03e6\5\u00aaV\2\u03e6\u0401\3\2\2\2\u03e7\u03e9\7\37\2\2\u03e8"+
		"\u03ea\7\u0205\2\2\u03e9\u03e8\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb"+
		"\3\2\2\2\u03eb\u03ed\7\u0094\2\2\u03ec\u03ee\5\u0212\u010a\2\u03ed\u03ec"+
		"\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\5\u01c4\u00e3"+
		"\2\u03f0\u03fb\5J&\2\u03f1\u03f8\5^\60\2\u03f2\u03f4\7\u03b3\2\2\u03f3"+
		"\u03f2\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f7\5^"+
		"\60\2\u03f6\u03f3\3\2\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f8"+
		"\u03f9\3\2\2\2\u03f9\u03fc\3\2\2\2\u03fa\u03f8\3\2\2\2\u03fb\u03f1\3\2"+
		"\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fe\3\2\2\2\u03fd\u03ff\5`\61\2\u03fe"+
		"\u03fd\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0401\3\2\2\2\u0400\u03b2\3\2"+
		"\2\2\u0400\u03c4\3\2\2\2\u0400\u03e7\3\2\2\2\u0401)\3\2\2\2\u0402\u0403"+
		"\7\37\2\2\u0403\u0404\7\u0204\2\2\u0404\u0405\5\u01de\u00f0\2\u0405\u0406"+
		"\7\7\2\2\u0406\u0407\7\u0124\2\2\u0407\u040b\7\u03c0\2\2\u0408\u0409\7"+
		"\u0148\2\2\u0409\u040a\7\u03a8\2\2\u040a\u040c\5\u01e6\u00f4\2\u040b\u0408"+
		"\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u0412\3\2\2\2\u040d\u040f\7\u0136\2"+
		"\2\u040e\u0410\7\u03a8\2\2\u040f\u040e\3\2\2\2\u040f\u0410\3\2\2\2\u0410"+
		"\u0411\3\2\2\2\u0411\u0413\5\u01d4\u00eb\2\u0412\u040d\3\2\2\2\u0412\u0413"+
		"\3\2\2\2\u0413+\3\2\2\2\u0414\u0415\7\37\2\2\u0415\u0416\7\u0204\2\2\u0416"+
		"\u0417\5\u01de\u00f0\2\u0417\u0418\7\7\2\2\u0418\u0419\7\u0124\2\2\u0419"+
		"\u041a\7\u03c0\2\2\u041a\u041b\7\u00a2\2\2\u041b\u041c\7\u0172\2\2\u041c"+
		"\u041d\7?\2\2\u041d\u0423\5\u01de\u00f0\2\u041e\u0420\7\u0144\2\2\u041f"+
		"\u0421\7\u03a8\2\2\u0420\u041f\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0422"+
		"\3\2\2\2\u0422\u0424\5\u01e6\u00f4\2\u0423\u041e\3\2\2\2\u0423\u0424\3"+
		"\2\2\2\u0424\u042a\3\2\2\2\u0425\u0427\7\u015e\2\2\u0426\u0428\7\u03a8"+
		"\2\2\u0427\u0426\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u0429\3\2\2\2\u0429"+
		"\u042b\5\u01e6\u00f4\2\u042a\u0425\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u0431"+
		"\3\2\2\2\u042c\u042e\7\u0100\2\2\u042d\u042f\7\u03a8\2\2\u042e\u042d\3"+
		"\2\2\2\u042e\u042f\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0432\5\u01e6\u00f4"+
		"\2\u0431\u042c\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0438\3\2\2\2\u0433\u0435"+
		"\7\u018c\2\2\u0434\u0436\7\u03a8\2\2\u0435\u0434\3\2\2\2\u0435\u0436\3"+
		"\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439\5\u01e6\u00f4\2\u0438\u0433\3\2"+
		"\2\2\u0438\u0439\3\2\2\2\u0439\u043f\3\2\2\2\u043a\u043c\7\u019e\2\2\u043b"+
		"\u043d\7\u03a8\2\2\u043c\u043b\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u043e"+
		"\3\2\2\2\u043e\u0440\5\u01de\u00f0\2\u043f\u043a\3\2\2\2\u043f\u0440\3"+
		"\2\2\2\u0440\u0442\3\2\2\2\u0441\u0443\7\u021a\2\2\u0442\u0441\3\2\2\2"+
		"\u0442\u0443\3\2\2\2\u0443\u0449\3\2\2\2\u0444\u0446\7\u0115\2\2\u0445"+
		"\u0447\7\u03a8\2\2\u0446\u0445\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0448"+
		"\3\2\2\2\u0448\u044a\7\u03c0\2\2\u0449\u0444\3\2\2\2\u0449\u044a\3\2\2"+
		"\2\u044a\u044b\3\2\2\2\u044b\u044d\7\u0136\2\2\u044c\u044e\7\u03a8\2\2"+
		"\u044d\u044c\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450"+
		"\5\u01d4\u00eb\2\u0450-\3\2\2\2\u0451\u0453\7\37\2\2\u0452\u0454\5\64"+
		"\33\2\u0453\u0452\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0455\3\2\2\2\u0455"+
		"\u0456\7\u0099\2\2\u0456\u0457\5\u01c6\u00e4\2\u0457\u0458\t\t\2\2\u0458"+
		"\u0459\t\n\2\2\u0459\u045a\7g\2\2\u045a\u045b\5\u01c4\u00e3\2\u045b\u045c"+
		"\79\2\2\u045c\u045d\7/\2\2\u045d\u0460\7\u01da\2\2\u045e\u045f\t\13\2"+
		"\2\u045f\u0461\5\u01c6\u00e4\2\u0460\u045e\3\2\2\2\u0460\u0461\3\2\2\2"+
		"\u0461\u0462\3\2\2\2\u0462\u0463\5\u0144\u00a3\2\u0463/\3\2\2\2\u0464"+
		"\u0467\7\37\2\2\u0465\u0466\7k\2\2\u0466\u0468\7|\2\2\u0467\u0465\3\2"+
		"\2\2\u0467\u0468\3\2\2\2\u0468\u046c\3\2\2\2\u0469\u046a\7\u00fb\2\2\u046a"+
		"\u046b\7\u03a8\2\2\u046b\u046d\t\f\2\2\u046c\u0469\3\2\2\2\u046c\u046d"+
		"\3\2\2\2\u046d\u046f\3\2\2\2\u046e\u0470\5\64\33\2\u046f\u046e\3\2\2\2"+
		"\u046f\u0470\3\2\2\2\u0470\u0474\3\2\2\2\u0471\u0472\7\u008a\2\2\u0472"+
		"\u0473\7\u01df\2\2\u0473\u0475\t\r\2\2\u0474\u0471\3\2\2\2\u0474\u0475"+
		"\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0477\7\u0219\2\2\u0477\u047c\5\u01c6"+
		"\u00e4\2\u0478\u0479\7\u03b1\2\2\u0479\u047a\5\u01fe\u0100\2\u047a\u047b"+
		"\7\u03b2\2\2\u047b\u047d\3\2\2\2\u047c\u0478\3\2\2\2\u047c\u047d\3\2\2"+
		"\2\u047d\u047e\3\2\2\2\u047e\u047f\7\f\2\2\u047f\u0486\5\u00aaV\2\u0480"+
		"\u0482\7\u00a8\2\2\u0481\u0483\t\16\2\2\u0482\u0481\3\2\2\2\u0482\u0483"+
		"\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0485\7\30\2\2\u0485\u0487\7i\2\2\u0486"+
		"\u0480\3\2\2\2\u0486\u0487\3\2\2\2\u0487\61\3\2\2\2\u0488\u048a\7&\2\2"+
		"\u0489\u0488\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048c"+
		"\7\27\2\2\u048c\u048e\7\u0086\2\2\u048d\u048f\7\u03a8\2\2\u048e\u048d"+
		"\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u049a\5\u01d0\u00e9"+
		"\2\u0491\u0493\7&\2\2\u0492\u0491\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494"+
		"\3\2\2\2\u0494\u0496\7\31\2\2\u0495\u0497\7\u03a8\2\2\u0496\u0495\3\2"+
		"\2\2\u0496\u0497\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049a\5\u01d2\u00ea"+
		"\2\u0499\u0489\3\2\2\2\u0499\u0492\3\2\2\2\u049a\63\3\2\2\2\u049b\u049c"+
		"\7\u0127\2\2\u049c\u04a3\7\u03a8\2\2\u049d\u04a4\5\u01cc\u00e7\2\u049e"+
		"\u04a1\7!\2\2\u049f\u04a0\7\u03b1\2\2\u04a0\u04a2\7\u03b2\2\2\u04a1\u049f"+
		"\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a4\3\2\2\2\u04a3\u049d\3\2\2\2\u04a3"+
		"\u049e\3\2\2\2\u04a4\65\3\2\2\2\u04a5\u04a6\7\u00fd\2\2\u04a6\u04aa\5"+
		"8\35\2\u04a7\u04a9\5:\36\2\u04a8\u04a7\3\2\2\2\u04a9\u04ac\3\2\2\2\u04aa"+
		"\u04a8\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04c8\3\2\2\2\u04ac\u04aa\3\2"+
		"\2\2\u04ad\u04b0\7\u013e\2\2\u04ae\u04b1\5\u01e4\u00f3\2\u04af\u04b1\5"+
		"\u0222\u0112\2\u04b0\u04ae\3\2\2\2\u04b0\u04af\3\2\2\2\u04b1\u04b2\3\2"+
		"\2\2\u04b2\u04bb\5<\37\2\u04b3\u04b4\7\u01f6\2\2\u04b4\u04b8\58\35\2\u04b5"+
		"\u04b7\5:\36\2\u04b6\u04b5\3\2\2\2\u04b7\u04ba\3\2\2\2\u04b8\u04b6\3\2"+
		"\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04bc\3\2\2\2\u04ba\u04b8\3\2\2\2\u04bb"+
		"\u04b3\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04c5\3\2\2\2\u04bd\u04be\7\u0135"+
		"\2\2\u04be\u04c2\58\35\2\u04bf\u04c1\5:\36\2\u04c0\u04bf\3\2\2\2\u04c1"+
		"\u04c4\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04c6\3\2"+
		"\2\2\u04c4\u04c2\3\2\2\2\u04c5\u04bd\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6"+
		"\u04c8\3\2\2\2\u04c7\u04a5\3\2\2\2\u04c7\u04ad\3\2\2\2\u04c8\67\3\2\2"+
		"\2\u04c9\u04ce\7\u00e6\2\2\u04ca\u04ce\5\u01e8\u00f5\2\u04cb\u04ce\5\u01e4"+
		"\u00f3\2\u04cc\u04ce\5\u0222\u0112\2\u04cd\u04c9\3\2\2\2\u04cd\u04ca\3"+
		"\2\2\2\u04cd\u04cb\3\2\2\2\u04cd\u04cc\3\2\2\2\u04ce9\3\2\2\2\u04cf\u04d2"+
		"\7J\2\2\u04d0\u04d3\5\u01e4\u00f3\2\u04d1\u04d3\5\u0222\u0112\2\u04d2"+
		"\u04d0\3\2\2\2\u04d2\u04d1\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d5\5<"+
		"\37\2\u04d5;\3\2\2\2\u04d6\u04e4\5\u0234\u011b\2\u04d7\u04e4\7\u00bb\2"+
		"\2\u04d8\u04e4\7\u00c9\2\2\u04d9\u04e4\7\u00ca\2\2\u04da\u04e4\7\u00cb"+
		"\2\2\u04db\u04e4\7\u00cc\2\2\u04dc\u04e4\7\u00cd\2\2\u04dd\u04e4\7\u00ce"+
		"\2\2\u04de\u04e4\7\u00cf\2\2\u04df\u04e4\7\u00d0\2\2\u04e0\u04e4\7\u00d1"+
		"\2\2\u04e1\u04e4\7\u00d2\2\2\u04e2\u04e4\7\u00d3\2\2\u04e3\u04d6\3\2\2"+
		"\2\u04e3\u04d7\3\2\2\2\u04e3\u04d8\3\2\2\2\u04e3\u04d9\3\2\2\2\u04e3\u04da"+
		"\3\2\2\2\u04e3\u04db\3\2\2\2\u04e3\u04dc\3\2\2\2\u04e3\u04dd\3\2\2\2\u04e3"+
		"\u04de\3\2\2\2\u04e3\u04df\3\2\2\2\u04e3\u04e0\3\2\2\2\u04e3\u04e1\3\2"+
		"\2\2\u04e3\u04e2\3\2\2\2\u04e4=\3\2\2\2\u04e5\u04e6\7\u00a3\2\2\u04e6"+
		"\u04e7\t\17\2\2\u04e7?\3\2\2\2\u04e8\u04ea\7\u016a\2\2\u04e9\u04eb\7\u03a8"+
		"\2\2\u04ea\u04e9\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec"+
		"\u04f4\5\u01e6\u00f4\2\u04ed\u04f4\5> \2\u04ee\u04ef\7\u00a8\2\2\u04ef"+
		"\u04f0\7\u01ad\2\2\u04f0\u04f4\5\u01de\u00f0\2\u04f1\u04f2\7\u0115\2\2"+
		"\u04f2\u04f4\7\u03c0\2\2\u04f3\u04e8\3\2\2\2\u04f3\u04ed\3\2\2\2\u04f3"+
		"\u04ee\3\2\2\2\u04f3\u04f1\3\2\2\2\u04f4A\3\2\2\2\u04f5\u04f6\t\20\2\2"+
		"\u04f6\u04f7\5\u01de\u00f0\2\u04f7\u04f8\5\u01f2\u00fa\2\u04f8C\3\2\2"+
		"\2\u04f9\u04fa\5\u01de\u00f0\2\u04fa\u04fb\5\u01f2\u00fa\2\u04fbE\3\2"+
		"\2\2\u04fc\u04fd\7\u0115\2\2\u04fd\u0514\7\u03c0\2\2\u04fe\u04ff\7\u016b"+
		"\2\2\u04ff\u0514\7\u008a\2\2\u0500\u0502\7d\2\2\u0501\u0500\3\2\2\2\u0501"+
		"\u0502\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0514\7+\2\2\u0504\u0505\7\u011e"+
		"\2\2\u0505\u050f\7\u008a\2\2\u0506\u0507\7\u019d\2\2\u0507\u050f\7\u008a"+
		"\2\2\u0508\u0509\7v\2\2\u0509\u050a\7\u008a\2\2\u050a\u050f\7\u0123\2"+
		"\2\u050b\u050c\7a\2\2\u050c\u050d\7\u008a\2\2\u050d\u050f\7\u0123\2\2"+
		"\u050e\u0504\3\2\2\2\u050e\u0506\3\2\2\2\u050e\u0508\3\2\2\2\u050e\u050b"+
		"\3\2\2\2\u050f\u0514\3\2\2\2\u0510\u0511\7\u008a\2\2\u0511\u0512\7\u01df"+
		"\2\2\u0512\u0514\t\r\2\2\u0513\u04fc\3\2\2\2\u0513\u04fe\3\2\2\2\u0513"+
		"\u0501\3\2\2\2\u0513\u050e\3\2\2\2\u0513\u0510\3\2\2\2\u0514G\3\2\2\2"+
		"\u0515\u0516\7\u0158\2\2\u0516\u0524\7\u03c0\2\2\u0517\u0518\7#\2\2\u0518"+
		"\u0524\7\u03c0\2\2\u0519\u051a\7\u0213\2\2\u051a\u0524\7\u03c0\2\2\u051b"+
		"\u051c\7\u01b1\2\2\u051c\u0524\7\u03c0\2\2\u051d\u051e\7\u01e9\2\2\u051e"+
		"\u0524\7\u03c0\2\2\u051f\u0520\7\u01aa\2\2\u0520\u0524\7\u03c0\2\2\u0521"+
		"\u0522\7\u01b6\2\2\u0522\u0524\5\u01e4\u00f3\2\u0523\u0515\3\2\2\2\u0523"+
		"\u0517\3\2\2\2\u0523\u0519\3\2\2\2\u0523\u051b\3\2\2\2\u0523\u051d\3\2"+
		"\2\2\u0523\u051f\3\2\2\2\u0523\u0521\3\2\2\2\u0524I\3\2\2\2\u0525\u0526"+
		"\7\u03b1\2\2\u0526\u052b\5L\'\2\u0527\u0528\7\u03b3\2\2\u0528\u052a\5"+
		"L\'\2\u0529\u0527\3\2\2\2\u052a\u052d\3\2\2\2\u052b\u0529\3\2\2\2\u052b"+
		"\u052c\3\2\2\2\u052c\u052e\3\2\2\2\u052d\u052b\3\2\2\2\u052e\u052f\7\u03b2"+
		"\2\2\u052fK\3\2\2\2\u0530\u0531\5\u01de\u00f0\2\u0531\u0532\5N(\2\u0532"+
		"\u0536\3\2\2\2\u0533\u0536\5R*\2\u0534\u0536\5\\/\2\u0535\u0530\3\2\2"+
		"\2\u0535\u0533\3\2\2\2\u0535\u0534\3\2\2\2\u0536M\3\2\2\2\u0537\u053b"+
		"\5\u01f2\u00fa\2\u0538\u053a\5P)\2\u0539\u0538\3\2\2\2\u053a\u053d\3\2"+
		"\2\2\u053b\u0539\3\2\2\2\u053b\u053c\3\2\2\2\u053cO\3\2\2\2\u053d\u053b"+
		"\3\2\2\2\u053e\u0552\5\u01ee\u00f8\2\u053f\u0540\7&\2\2\u0540\u0552\5"+
		"\u020e\u0108\2\u0541\u0552\7\u0101\2\2";
	private static final String _serializedATNSegment1 =
		"\u0542\u0544\7q\2\2\u0543\u0542\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0545"+
		"\3\2\2\2\u0545\u0552\7O\2\2\u0546\u0548\7\u009d\2\2\u0547\u0549\7O\2\2"+
		"\u0548\u0547\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u0552\3\2\2\2\u054a\u054b"+
		"\7\u0115\2\2\u054b\u0552\7\u03c0\2\2\u054c\u054d\7\u0114\2\2\u054d\u0552"+
		"\t\21\2\2\u054e\u054f\7\u01fc\2\2\u054f\u0552\t\22\2\2\u0550\u0552\5T"+
		"+\2\u0551\u053e\3\2\2\2\u0551\u053f\3\2\2\2\u0551\u0541\3\2\2\2\u0551"+
		"\u0543\3\2\2\2\u0551\u0546\3\2\2\2\u0551\u054a\3\2\2\2\u0551\u054c\3\2"+
		"\2\2\u0551\u054e\3\2\2\2\u0551\u0550\3\2\2\2\u0552Q\3\2\2\2\u0553\u0555"+
		"\7\34\2\2\u0554\u0556\5\u01de\u00f0\2\u0555\u0554\3\2\2\2\u0555\u0556"+
		"\3\2\2\2\u0556\u0558\3\2\2\2\u0557\u0553\3\2\2\2\u0557\u0558\3\2\2\2\u0558"+
		"\u0559\3\2\2\2\u0559\u055a\7q\2\2\u055a\u055c\7O\2\2\u055b\u055d\5> \2"+
		"\u055c\u055b\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u0562"+
		"\5\u0204\u0103\2\u055f\u0561\5@!\2\u0560\u055f\3\2\2\2\u0561\u0564\3\2"+
		"\2\2\u0562\u0560\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0590\3\2\2\2\u0564"+
		"\u0562\3\2\2\2\u0565\u0567\7\34\2\2\u0566\u0568\5\u01de\u00f0\2\u0567"+
		"\u0566\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u056a\3\2\2\2\u0569\u0565\3\2"+
		"\2\2\u0569\u056a\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056d\7\u009d\2\2\u056c"+
		"\u056e\t\23\2\2\u056d\u056c\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u0570\3"+
		"\2\2\2\u056f\u0571\5\u01de\u00f0\2\u0570\u056f\3\2\2\2\u0570\u0571\3\2"+
		"\2\2\u0571\u0573\3\2\2\2\u0572\u0574\5> \2\u0573\u0572\3\2\2\2\u0573\u0574"+
		"\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0579\5\u0204\u0103\2\u0576\u0578\5"+
		"@!\2\u0577\u0576\3\2\2\2\u0578\u057b\3\2\2\2\u0579\u0577\3\2\2\2\u0579"+
		"\u057a\3\2\2\2\u057a\u0590\3\2\2\2\u057b\u0579\3\2\2\2\u057c\u057e\7\34"+
		"\2\2\u057d\u057f\5\u01de\u00f0\2\u057e\u057d\3\2\2\2\u057e\u057f\3\2\2"+
		"\2\u057f\u0581\3\2\2\2\u0580\u057c\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0582"+
		"\3\2\2\2\u0582\u0583\7;\2\2\u0583\u0585\7O\2\2\u0584\u0586\5\u01de\u00f0"+
		"\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0588"+
		"\5\u0204\u0103\2\u0588\u0589\5T+\2\u0589\u0590\3\2\2\2\u058a\u058b\7\30"+
		"\2\2\u058b\u058c\7\u03b1\2\2\u058c\u058d\5\u0222\u0112\2\u058d\u058e\7"+
		"\u03b2\2\2\u058e\u0590\3\2\2\2\u058f\u0557\3\2\2\2\u058f\u0569\3\2\2\2"+
		"\u058f\u0580\3\2\2\2\u058f\u058a\3\2\2\2\u0590S\3\2\2\2\u0591\u0592\7"+
		"w\2\2\u0592\u0593\5\u01c4\u00e3\2\u0593\u0596\5\u0204\u0103\2\u0594\u0595"+
		"\7_\2\2\u0595\u0597\t\24\2\2\u0596\u0594\3\2\2\2\u0596\u0597\3\2\2\2\u0597"+
		"\u059a\3\2\2\2\u0598\u059b\5V,\2\u0599\u059b\5X-\2\u059a\u0598\3\2\2\2"+
		"\u059a\u0599\3\2\2\2\u059a\u059b\3\2\2\2\u059bU\3\2\2\2\u059c\u059d\7"+
		"g\2\2\u059d\u059e\7(\2\2\u059e\u05a2\5Z.\2\u059f\u05a0\7g\2\2\u05a0\u05a1"+
		"\7\u00a0\2\2\u05a1\u05a3\5Z.\2\u05a2\u059f\3\2\2\2\u05a2\u05a3\3\2\2\2"+
		"\u05a3W\3\2\2\2\u05a4\u05a5\7g\2\2\u05a5\u05a6\7\u00a0\2\2\u05a6\u05aa"+
		"\5Z.\2\u05a7\u05a8\7g\2\2\u05a8\u05a9\7(\2\2\u05a9\u05ab\5Z.\2\u05aa\u05a7"+
		"\3\2\2\2\u05aa\u05ab\3\2\2\2\u05abY\3\2\2\2\u05ac\u05b3\7~\2\2\u05ad\u05b3"+
		"\7\23\2\2\u05ae\u05af\7\u0086\2\2\u05af\u05b3\7f\2\2\u05b0\u05b1\7\u019d"+
		"\2\2\u05b1\u05b3\7\u00f8\2\2\u05b2\u05ac\3\2\2\2\u05b2\u05ad\3\2\2\2\u05b2"+
		"\u05ae\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b3[\3\2\2\2\u05b4\u05b6\t\23\2\2"+
		"\u05b5\u05b7\5\u01de\u00f0\2\u05b6\u05b5\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7"+
		"\u05b9\3\2\2\2\u05b8\u05ba\5> \2\u05b9\u05b8\3\2\2\2\u05b9\u05ba\3\2\2"+
		"\2\u05ba\u05bb\3\2\2\2\u05bb\u05bf\5\u0204\u0103\2\u05bc\u05be\5@!\2\u05bd"+
		"\u05bc\3\2\2\2\u05be\u05c1\3\2\2\2\u05bf\u05bd\3\2\2\2\u05bf\u05c0\3\2"+
		"\2\2\u05c0\u05d1\3\2\2\2\u05c1\u05bf\3\2\2\2\u05c2\u05c4\t\25\2\2\u05c3"+
		"\u05c5\t\23\2\2\u05c4\u05c3\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c7\3"+
		"\2\2\2\u05c6\u05c8\5\u01de\u00f0\2\u05c7\u05c6\3\2\2\2\u05c7\u05c8\3\2"+
		"\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05cd\5\u0204\u0103\2\u05ca\u05cc\5@!\2"+
		"\u05cb\u05ca\3\2\2\2\u05cc\u05cf\3\2\2\2\u05cd\u05cb\3\2\2\2\u05cd\u05ce"+
		"\3\2\2\2\u05ce\u05d1\3\2\2\2\u05cf\u05cd\3\2\2\2\u05d0\u05b4\3\2\2\2\u05d0"+
		"\u05c2\3\2\2\2\u05d1]\3\2\2\2\u05d2\u05d4\7\u0136\2\2\u05d3\u05d5\7\u03a8"+
		"\2\2\u05d4\u05d3\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6"+
		"\u0667\5\u01d4\u00eb\2\u05d7\u05d9\7\u0101\2\2\u05d8\u05da\7\u03a8\2\2"+
		"\u05d9\u05d8\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05db\3\2\2\2\u05db\u0667"+
		"\5\u01e4\u00f3\2\u05dc\u05de\7\u0102\2\2\u05dd\u05df\7\u03a8\2\2\u05de"+
		"\u05dd\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u0667\5\u01e4"+
		"\u00f3\2\u05e1\u05e3\7&\2\2\u05e2\u05e1\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3"+
		"\u05e7\3\2\2\2\u05e4\u05e5\7\27\2\2\u05e5\u05e8\7\u0086\2\2\u05e6\u05e8"+
		"\7\u0292\2\2\u05e7\u05e4\3\2\2\2\u05e7\u05e6\3\2\2\2\u05e8\u05ea\3\2\2"+
		"\2\u05e9\u05eb\7\u03a8\2\2\u05ea\u05e9\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb"+
		"\u05ec\3\2\2\2\u05ec\u0667\5\u01d0\u00e9\2\u05ed\u05ef\7\u010d\2\2\u05ee"+
		"\u05f0\7\u03a8\2\2\u05ef\u05ee\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f1"+
		"\3\2\2\2\u05f1\u0667\t\26\2\2\u05f2\u05f4\7&\2\2\u05f3\u05f2\3\2\2\2\u05f3"+
		"\u05f4\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u05f7\7\31\2\2\u05f6\u05f8\7"+
		"\u03a8\2\2\u05f7\u05f6\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05f9\3\2\2\2"+
		"\u05f9\u0667\5\u01d2\u00ea\2\u05fa\u05fc\7\u0115\2\2\u05fb\u05fd\7\u03a8"+
		"\2\2\u05fc\u05fb\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe"+
		"\u0667\7\u03c0\2\2\u05ff\u0601\7\u011a\2\2\u0600\u0602\7\u03a8\2\2\u0601"+
		"\u0600\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u0667\7\u03c0"+
		"\2\2\u0604\u0606\7\u011c\2\2\u0605\u0607\7\u03a8\2\2\u0606\u0605\3\2\2"+
		"\2\u0606\u0607\3\2\2\2\u0607\u0608\3\2\2\2\u0608\u0667\7\u03c0\2\2\u0609"+
		"\u060a\7\u0123\2\2\u060a\u060c\7\u012a\2\2\u060b\u060d\7\u03a8\2\2\u060c"+
		"\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u0667\7\u03c0"+
		"\2\2\u060f\u0611\7\u0128\2\2\u0610\u0612\7\u03a8\2\2\u0611\u0610\3\2\2"+
		"\2\u0611\u0612\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0667\t\26\2\2\u0614"+
		"\u0616\7\u0133\2\2\u0615\u0617\7\u03a8\2\2\u0616\u0615\3\2\2\2\u0616\u0617"+
		"\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u0667\7\u03c0\2\2\u0619\u061a\7E\2"+
		"\2\u061a\u061c\7\u012a\2\2\u061b\u061d\7\u03a8\2\2\u061c\u061b\3\2\2\2"+
		"\u061c\u061d\3\2\2\2\u061d\u061e\3\2\2\2\u061e\u0667\7\u03c0\2\2\u061f"+
		"\u0621\7\u0160\2\2\u0620\u0622\7\u03a8\2\2\u0621\u0620\3\2\2\2\u0621\u0622"+
		"\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0667\t\27\2\2\u0624\u0626\7\u016a"+
		"\2\2\u0625\u0627\7\u03a8\2\2\u0626\u0625\3\2\2\2\u0626\u0627\3\2\2\2\u0627"+
		"\u0628\3\2\2\2\u0628\u0667\5\u01e6\u00f4\2\u0629\u062b\7\u018b\2\2\u062a"+
		"\u062c\7\u03a8\2\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u062d"+
		"\3\2\2\2\u062d\u0667\5\u01e4\u00f3\2\u062e\u0630\7\u0193\2\2\u062f\u0631"+
		"\7\u03a8\2\2\u0630\u062f\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0632\3\2\2"+
		"\2\u0632\u0667\5\u01e4\u00f3\2\u0633\u0635\7\u01ab\2\2\u0634\u0636\7\u03a8"+
		"\2\2\u0635\u0634\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0637\3\2\2\2\u0637"+
		"\u0667\t\30\2\2\u0638\u063a\7\u01b1\2\2\u0639\u063b\7\u03a8\2\2\u063a"+
		"\u0639\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u0667\7\u03c0"+
		"\2\2\u063d\u063f\7\u01dc\2\2\u063e\u0640\7\u03a8\2\2\u063f\u063e\3\2\2"+
		"\2\u063f\u0640\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0667\t\31\2\2\u0642"+
		"\u0644\7\u01f7\2\2\u0643\u0645\7\u03a8\2\2\u0644\u0643\3\2\2\2\u0644\u0645"+
		"\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0667\t\30\2\2\u0647\u0649\7\u01f8"+
		"\2\2\u0648\u064a\7\u03a8\2\2\u0649\u0648\3\2\2\2\u0649\u064a\3\2\2\2\u064a"+
		"\u064b\3\2\2\2\u064b\u0667\t\30\2\2\u064c\u064e\7\u01f9\2\2\u064d\u064f"+
		"\7\u03a8\2\2\u064e\u064d\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u0650\3\2\2"+
		"\2\u0650\u0667\5\u01e4\u00f3\2\u0651\u0652\7\u0204\2\2\u0652\u0655\5\u01de"+
		"\u00f0\2\u0653\u0654\7\u01fc\2\2\u0654\u0656\t\22\2\2\u0655\u0653\3\2"+
		"\2\2\u0655\u0656\3\2\2\2\u0656\u0667\3\2\2\2\u0657\u0659\7\u009c\2\2\u0658"+
		"\u065a\7\u03a8\2\2\u0659\u0658\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065b"+
		"\3\2\2\2\u065b\u065c\7\u03b1\2\2\u065c\u0661\5\u01c4\u00e3\2\u065d\u065e"+
		"\7\u03b3\2\2\u065e\u0660\5\u01c4\u00e3\2\u065f\u065d\3\2\2\2\u0660\u0663"+
		"\3\2\2\2\u0661\u065f\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0664\3\2\2\2\u0663"+
		"\u0661\3\2\2\2\u0664\u0665\7\u03b2\2\2\u0665\u0667\3\2\2\2\u0666\u05d2"+
		"\3\2\2\2\u0666\u05d7\3\2\2\2\u0666\u05dc\3\2\2\2\u0666\u05e2\3\2\2\2\u0666"+
		"\u05ed\3\2\2\2\u0666\u05f3\3\2\2\2\u0666\u05fa\3\2\2\2\u0666\u05ff\3\2"+
		"\2\2\u0666\u0604\3\2\2\2\u0666\u0609\3\2\2\2\u0666\u060f\3\2\2\2\u0666"+
		"\u0614\3\2\2\2\u0666\u0619\3\2\2\2\u0666\u061f\3\2\2\2\u0666\u0624\3\2"+
		"\2\2\u0666\u0629\3\2\2\2\u0666\u062e\3\2\2\2\u0666\u0633\3\2\2\2\u0666"+
		"\u0638\3\2\2\2\u0666\u063d\3\2\2\2\u0666\u0642\3\2\2\2\u0666\u0647\3\2"+
		"\2\2\u0666\u064c\3\2\2\2\u0666\u0651\3\2\2\2\u0666\u0657\3\2\2\2\u0667"+
		"_\3\2\2\2\u0668\u0669\7p\2\2\u0669\u066a\7\21\2\2\u066a\u066d\5b\62\2"+
		"\u066b\u066c\7\u01b0\2\2\u066c\u066e\5\u01e4\u00f3\2\u066d\u066b\3\2\2"+
		"\2\u066d\u066e\3\2\2\2\u066e\u0676\3\2\2\2\u066f\u0670\7\u01ff\2\2\u0670"+
		"\u0671\7\21\2\2\u0671\u0674\5d\63\2\u0672\u0673\7\u0200\2\2\u0673\u0675"+
		"\5\u01e4\u00f3\2\u0674\u0672\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0677\3"+
		"\2\2\2\u0676\u066f\3\2\2\2\u0676\u0677\3\2\2\2\u0677\u0683\3\2\2\2\u0678"+
		"\u0679\7\u03b1\2\2\u0679\u067e\5f\64\2\u067a\u067b\7\u03b3\2\2\u067b\u067d"+
		"\5f\64\2\u067c\u067a\3\2\2\2\u067d\u0680\3\2\2\2\u067e\u067c\3\2\2\2\u067e"+
		"\u067f\3\2\2\2\u067f\u0681\3\2\2\2\u0680\u067e\3\2\2\2\u0681\u0682\7\u03b2"+
		"\2\2\u0682\u0684\3\2\2\2\u0683\u0678\3\2\2\2\u0683\u0684\3\2\2\2\u0684"+
		"a\3\2\2\2\u0685\u0693\5d\63\2\u0686\u0690\t\32\2\2\u0687\u0688\7\u03b1"+
		"\2\2\u0688\u0689\5\u0222\u0112\2\u0689\u068a\7\u03b2\2\2\u068a\u0691\3"+
		"\2\2\2\u068b\u068c\7\u0113\2\2\u068c\u068d\7\u03b1\2\2\u068d\u068e\5\u01fe"+
		"\u0100\2\u068e\u068f\7\u03b2\2\2\u068f\u0691\3\2\2\2\u0690\u0687\3\2\2"+
		"\2\u0690\u068b\3\2\2\2\u0691\u0693\3\2\2\2\u0692\u0685\3\2\2\2\u0692\u0686"+
		"\3\2\2\2\u0693c\3\2\2\2\u0694\u0696\7W\2\2\u0695\u0694\3\2\2\2\u0695\u0696"+
		"\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0698\7\u0156\2\2\u0698\u0699\7\u03b1"+
		"\2\2\u0699\u069a\5\u0222\u0112\2\u069a\u069b\7\u03b2\2\2\u069b\u06aa\3"+
		"\2\2\2\u069c\u069e\7W\2\2\u069d\u069c\3\2\2\2\u069d\u069e\3\2\2\2\u069e"+
		"\u069f\3\2\2\2\u069f\u06a3\7O\2\2\u06a0\u06a1\7\u00fb\2\2\u06a1\u06a2"+
		"\7\u03a8\2\2\u06a2\u06a4\t\33\2\2\u06a3\u06a0\3\2\2\2\u06a3\u06a4\3\2"+
		"\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a6\7\u03b1\2\2\u06a6\u06a7\5\u01fe\u0100"+
		"\2\u06a7\u06a8\7\u03b2\2\2\u06a8\u06aa\3\2\2\2\u06a9\u0695\3\2\2\2\u06a9"+
		"\u069d\3\2\2\2\u06aae\3\2\2\2\u06ab\u06ac\7p\2\2\u06ac\u06c1\5\u01de\u00f0"+
		"\2\u06ad\u06bf\7\u00a4\2\2\u06ae\u06af\7\u016e\2\2\u06af\u06b8\7\u0207"+
		"\2\2\u06b0\u06b3\7\u03b1\2\2\u06b1\u06b4\5\u0222\u0112\2\u06b2\u06b4\5"+
		"\u0208\u0105\2\u06b3\u06b1\3\2\2\2\u06b3\u06b2\3\2\2\2\u06b4\u06b5\3\2"+
		"\2\2\u06b5\u06b6\7\u03b2\2\2\u06b6\u06b9\3\2\2\2\u06b7\u06b9\7`\2\2\u06b8"+
		"\u06b0\3\2\2\2\u06b8\u06b7\3\2\2\2\u06b9\u06c0\3\2\2\2\u06ba\u06bb\7D"+
		"\2\2\u06bb\u06bc\7\u03b1\2\2\u06bc\u06bd\5\u0208\u0105\2\u06bd\u06be\7"+
		"\u03b2\2\2\u06be\u06c0\3\2\2\2\u06bf\u06ae\3\2\2\2\u06bf\u06ba\3\2\2\2"+
		"\u06c0\u06c2\3\2\2\2\u06c1\u06ad\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06cb"+
		"\3\2\2\2\u06c3\u06c5\7\u01fc\2\2\u06c4\u06c3\3\2\2\2\u06c4\u06c5\3\2\2"+
		"\2\u06c5\u06c6\3\2\2\2\u06c6\u06c8\7\u0136\2\2\u06c7\u06c9\7\u03a8\2\2"+
		"\u06c8\u06c7\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06cc"+
		"\5\u01d4\u00eb\2\u06cb\u06c4\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06d2\3"+
		"\2\2\2\u06cd\u06cf\7\u0115\2\2\u06ce\u06d0\7\u03a8\2\2\u06cf\u06ce\3\2"+
		"\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d3\7\u03c0\2\2\u06d2"+
		"\u06cd\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06da\3\2\2\2\u06d4\u06d5\7\u0123"+
		"\2\2\u06d5\u06d7\7\u012a\2\2\u06d6\u06d8\7\u03a8\2\2\u06d7\u06d6\3\2\2"+
		"\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\7\u03c0\2\2\u06da"+
		"\u06d4\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06e2\3\2\2\2\u06dc\u06dd\7E"+
		"\2\2\u06dd\u06df\7\u012a\2\2\u06de\u06e0\7\u03a8\2\2\u06df\u06de\3\2\2"+
		"\2\u06df\u06e0\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06e3\7\u03c0\2\2\u06e2"+
		"\u06dc\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06e9\3\2\2\2\u06e4\u06e6\7\u018b"+
		"\2\2\u06e5\u06e7\7\u03a8\2\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7"+
		"\u06e8\3\2\2\2\u06e8\u06ea\5\u01e4\u00f3\2\u06e9\u06e4\3\2\2\2\u06e9\u06ea"+
		"\3\2\2\2\u06ea\u06f0\3\2\2\2\u06eb\u06ed\7\u0193\2\2\u06ec\u06ee\7\u03a8"+
		"\2\2\u06ed\u06ec\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef"+
		"\u06f1\5\u01e4\u00f3\2\u06f0\u06eb\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f7"+
		"\3\2\2\2\u06f2\u06f4\7\u0204\2\2\u06f3\u06f5\7\u03a8\2\2\u06f4\u06f3\3"+
		"\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f8\5\u01de\u00f0"+
		"\2\u06f7\u06f2\3\2\2\2\u06f7\u06f8\3\2\2\2\u06f8\u06fe\3\2\2\2\u06f9\u06fb"+
		"\7\u019e\2\2\u06fa\u06fc\7\u03a8\2\2\u06fb\u06fa\3\2\2\2\u06fb\u06fc\3"+
		"\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u06ff\5\u01de\u00f0\2\u06fe\u06f9\3\2"+
		"\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0708\3\2\2\2\u0700\u0705\5h\65\2\u0701"+
		"\u0702\7\u03b3\2\2\u0702\u0704\5h\65\2\u0703\u0701\3\2\2\2\u0704\u0707"+
		"\3\2\2\2\u0705\u0703\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0709\3\2\2\2\u0707"+
		"\u0705\3\2\2\2\u0708\u0700\3\2\2\2\u0708\u0709\3\2\2\2\u0709g\3\2\2\2"+
		"\u070a\u070b\7\u01ff\2\2\u070b\u0714\5\u01de\u00f0\2\u070c\u070e\7\u01fc"+
		"\2\2\u070d\u070c\3\2\2\2\u070d\u070e\3\2\2\2\u070e\u070f\3\2\2\2\u070f"+
		"\u0711\7\u0136\2\2\u0710\u0712\7\u03a8\2\2\u0711\u0710\3\2\2\2\u0711\u0712"+
		"\3\2\2\2\u0712\u0713\3\2\2\2\u0713\u0715\5\u01d4\u00eb\2\u0714\u070d\3"+
		"\2\2\2\u0714\u0715\3\2\2\2\u0715\u071b\3\2\2\2\u0716\u0718\7\u0115\2\2"+
		"\u0717\u0719\7\u03a8\2\2\u0718\u0717\3\2\2\2\u0718\u0719\3\2\2\2\u0719"+
		"\u071a\3\2\2\2\u071a\u071c\7\u03c0\2\2\u071b\u0716\3\2\2\2\u071b\u071c"+
		"\3\2\2\2\u071c\u0723\3\2\2\2\u071d\u071e\7\u0123\2\2\u071e\u0720\7\u012a"+
		"\2\2\u071f\u0721\7\u03a8\2\2\u0720\u071f\3\2\2\2\u0720\u0721\3\2\2\2\u0721"+
		"\u0722\3\2\2\2\u0722\u0724\7\u03c0\2\2\u0723\u071d\3\2\2\2\u0723\u0724"+
		"\3\2\2\2\u0724\u072b\3\2\2\2\u0725\u0726\7E\2\2\u0726\u0728\7\u012a\2"+
		"\2\u0727\u0729\7\u03a8\2\2\u0728\u0727\3\2\2\2\u0728\u0729\3\2\2\2\u0729"+
		"\u072a\3\2\2\2\u072a\u072c\7\u03c0\2\2\u072b\u0725\3\2\2\2\u072b\u072c"+
		"\3\2\2\2\u072c\u0732\3\2\2\2\u072d\u072f\7\u018b\2\2\u072e\u0730\7\u03a8"+
		"\2\2\u072f\u072e\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u0731\3\2\2\2\u0731"+
		"\u0733\5\u01e4\u00f3\2\u0732\u072d\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0739"+
		"\3\2\2\2\u0734\u0736\7\u0193\2\2\u0735\u0737\7\u03a8\2\2\u0736\u0735\3"+
		"\2\2\2\u0736\u0737\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u073a\5\u01e4\u00f3"+
		"\2\u0739\u0734\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u0740\3\2\2\2\u073b\u073d"+
		"\7\u0204\2\2\u073c\u073e\7\u03a8\2\2\u073d\u073c\3\2\2\2\u073d\u073e\3"+
		"\2\2\2\u073e\u073f\3\2\2\2\u073f\u0741\5\u01de\u00f0\2\u0740\u073b\3\2"+
		"\2\2\u0740\u0741\3\2\2\2\u0741\u0747\3\2\2\2\u0742\u0744\7\u019e\2\2\u0743"+
		"\u0745\7\u03a8\2\2\u0744\u0743\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746"+
		"\3\2\2\2\u0746\u0748\5\u01de\u00f0\2\u0747\u0742\3\2\2\2\u0747\u0748\3"+
		"\2\2\2\u0748i\3\2\2\2\u0749\u074a\7\t\2\2\u074a\u074c\t\2\2\2\u074b\u074d"+
		"\5\u01de\u00f0\2\u074c\u074b\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074f\3"+
		"\2\2\2\u074e\u0750\5\62\32\2\u074f\u074e\3\2\2\2\u0750\u0751\3\2\2\2\u0751"+
		"\u074f\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u075c\3\2\2\2\u0753\u0754\7\t"+
		"\2\2\u0754\u0755\t\2\2\2\u0755\u0756\5\u01de\u00f0\2\u0756\u0757\7\u0212"+
		"\2\2\u0757\u0758\7\u0123\2\2\u0758\u0759\7\u012a\2\2\u0759\u075a\7\u0198"+
		"\2\2\u075a\u075c\3\2\2\2\u075b\u0749\3\2\2\2\u075b\u0753\3\2\2\2\u075c"+
		"k\3\2\2\2\u075d\u075f\7\t\2\2\u075e\u0760\5\64\33\2\u075f\u075e\3\2\2"+
		"\2\u075f\u0760\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u0762\7\u013c\2\2\u0762"+
		"\u0766\5\u01c6\u00e4\2\u0763\u0764\7g\2\2\u0764\u0765\7\u01de\2\2\u0765"+
		"\u0767\5\66\34\2\u0766\u0763\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u076e\3"+
		"\2\2\2\u0768\u0769\7g\2\2\u0769\u076b\7\u0118\2\2\u076a\u076c\7d\2\2\u076b"+
		"\u076a\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u076f\7\u01b9"+
		"\2\2\u076e\u0768\3\2\2\2\u076e\u076f\3\2\2\2\u076f\u0773\3\2\2\2\u0770"+
		"\u0771\7z\2\2\u0771\u0772\7\u0097\2\2\u0772\u0774\5\u01c6\u00e4\2\u0773"+
		"\u0770\3\2\2\2\u0773\u0774\3\2\2\2\u0774\u077a\3\2\2\2\u0775\u077b\7\u0132"+
		"\2\2\u0776\u077b\7\u012b\2\2\u0777\u0778\7\u012b\2\2\u0778\u0779\7g\2"+
		"\2\u0779\u077b\7\u01e6\2\2\u077a\u0775\3\2\2\2\u077a\u0776\3\2\2\2\u077a"+
		"\u0777\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077e\3\2\2\2\u077c\u077d\7\u0115"+
		"\2\2\u077d\u077f\7\u03c0\2\2\u077e\u077c\3\2\2\2\u077e\u077f\3\2\2\2\u077f"+
		"\u0782\3\2\2\2\u0780\u0781\7\u012e\2\2\u0781\u0783\5\u0144\u00a3\2\u0782"+
		"\u0780\3\2\2\2\u0782\u0783\3\2\2\2\u0783m\3\2\2\2\u0784\u0785\7\t\2\2"+
		"\u0785\u0786\7\u0150\2\2\u0786\u078a\5\u01c6\u00e4\2\u0787\u0789\5F$\2"+
		"\u0788\u0787\3\2\2\2\u0789\u078c\3\2\2\2\u078a\u0788\3\2\2\2\u078a\u078b"+
		"\3\2\2\2\u078bo\3\2\2\2\u078c\u078a\3\2\2\2\u078d\u078e\7\t\2\2\u078e"+
		"\u078f\7\u0162\2\2\u078f\u0790\7\u01d9\2\2\u0790\u0791\7\u0264\2\2\u0791"+
		"\u0792\7\u0174\2\2\u0792\u0793\7O\2\2\u0793q\3\2\2\2\u0794\u0795\7\t\2"+
		"\2\u0795\u0796\7\u0172\2\2\u0796\u0797\7?\2\2\u0797\u0798\5\u01de\u00f0"+
		"\2\u0798\u0799\7\7\2\2\u0799\u079a\7\u020d\2\2\u079a\u07a0\7\u03c0\2\2"+
		"\u079b\u079d\7\u015e\2\2\u079c\u079e\7\u03a8\2\2\u079d\u079c\3\2\2\2\u079d"+
		"\u079e\3\2\2\2\u079e\u079f\3\2\2\2\u079f\u07a1\5\u01e6\u00f4\2\u07a0\u079b"+
		"\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a3\3\2\2\2\u07a2\u07a4\7\u021a\2"+
		"\2\u07a3\u07a2\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a7"+
		"\7\u0136\2\2\u07a6\u07a8\7\u03a8\2\2\u07a7\u07a6\3\2\2\2\u07a7\u07a8\3"+
		"\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07aa\5\u01d4\u00eb\2\u07aas\3\2\2\2"+
		"\u07ab\u07ac\7\t\2\2\u07ac\u07ad\7r\2\2\u07ad\u07b1\5\u01c6\u00e4\2\u07ae"+
		"\u07b0\5F$\2\u07af\u07ae\3\2\2\2\u07b0\u07b3\3\2\2\2\u07b1\u07af\3\2\2"+
		"\2\u07b1\u07b2\3\2\2\2\u07b2u\3\2\2\2\u07b3\u07b1\3\2\2\2\u07b4\u07b5"+
		"\7\t\2\2\u07b5\u07b6\7\u01e0\2\2\u07b6\u07b7\5\u01de\u00f0\2\u07b7\u07b8"+
		"\7\u01a9\2\2\u07b8\u07b9\7\u03b1\2\2\u07b9\u07be\5H%\2\u07ba\u07bb\7\u03b3"+
		"\2\2\u07bb\u07bd\5H%\2\u07bc\u07ba\3\2\2\2\u07bd\u07c0\3\2\2\2\u07be\u07bc"+
		"\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c1\3\2\2\2\u07c0\u07be\3\2\2\2\u07c1"+
		"\u07c2\7\u03b2\2\2\u07c2w\3\2\2\2\u07c3\u07c5\7\t\2\2\u07c4\u07c6\t\3"+
		"\2\2\u07c5\u07c4\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u07c8\3\2\2\2\u07c7"+
		"\u07c9\7C\2\2\u07c8\u07c7\3\2\2\2\u07c8\u07c9\3\2\2\2\u07c9\u07ca\3\2"+
		"\2\2\u07ca\u07cb\7\u0094\2\2\u07cb\u07cc\5\u01c4\u00e3\2\u07cc\u07d1\5"+
		"~@\2\u07cd\u07ce\7\u03b3\2\2\u07ce\u07d0\5~@\2\u07cf\u07cd\3\2\2\2\u07d0"+
		"\u07d3\3\2\2\2\u07d1\u07cf\3\2\2\2\u07d1\u07d2\3\2\2\2\u07d2\u07d7\3\2"+
		"\2\2\u07d3\u07d1\3\2\2\2\u07d4\u07d6\5`\61\2\u07d5\u07d4\3\2\2\2\u07d6"+
		"\u07d9\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8y\3\2\2\2"+
		"\u07d9\u07d7\3\2\2\2\u07da\u07db\7\t\2\2\u07db\u07dc\7\u0204\2\2\u07dc"+
		"\u07dd\5\u01de\u00f0\2\u07dd\u07de\t\34\2\2\u07de\u07df\7\u0124\2\2\u07df"+
		"\u07e3\7\u03c0\2\2\u07e0\u07e1\7\u015e\2\2\u07e1\u07e2\7\u03a8\2\2\u07e2"+
		"\u07e4\5\u01e6\u00f4\2\u07e3\u07e0\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4\u07e6"+
		"\3\2\2\2\u07e5\u07e7\7\u021a\2\2\u07e6\u07e5\3\2\2\2\u07e6\u07e7\3\2\2"+
		"\2\u07e7\u07e8\3\2\2\2\u07e8\u07ea\7\u0136\2\2\u07e9\u07eb\7\u03a8\2\2"+
		"\u07ea\u07e9\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07ed"+
		"\5\u01d4\u00eb\2\u07ed{\3\2\2\2\u07ee\u07f2\7\t\2\2\u07ef\u07f0\7\u00fb"+
		"\2\2\u07f0\u07f1\7\u03a8\2\2\u07f1\u07f3\t\f\2\2\u07f2\u07ef\3\2\2\2\u07f2"+
		"\u07f3\3\2\2\2\u07f3\u07f5\3\2\2\2\u07f4\u07f6\5\64\33\2\u07f5\u07f4\3"+
		"\2\2\2\u07f5\u07f6\3\2\2\2\u07f6\u07fa\3\2\2\2\u07f7\u07f8\7\u008a\2\2"+
		"\u07f8\u07f9\7\u01df\2\2\u07f9\u07fb\t\r\2\2\u07fa\u07f7\3\2\2\2\u07fa"+
		"\u07fb\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fd\7\u0219\2\2\u07fd\u0802"+
		"\5\u01c6\u00e4\2\u07fe\u07ff\7\u03b1\2\2\u07ff\u0800\5\u01fe\u0100\2\u0800"+
		"\u0801\7\u03b2\2\2\u0801\u0803\3\2\2\2\u0802\u07fe\3\2\2\2\u0802\u0803"+
		"\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0805\7\f\2\2\u0805\u080c\5\u00aaV"+
		"\2\u0806\u0808\7\u00a8\2\2\u0807\u0809\t\16\2\2\u0808\u0807\3\2\2\2\u0808"+
		"\u0809\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080b\7\30\2\2\u080b\u080d\7"+
		"i\2\2\u080c\u0806\3\2\2\2\u080c\u080d\3\2\2\2\u080d}\3\2\2\2\u080e\u0941"+
		"\5^\60\2\u080f\u0811\7\7\2\2\u0810\u0812\7\32\2\2\u0811\u0810\3\2\2\2"+
		"\u0811\u0812\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0814\5\u01de\u00f0\2\u0814"+
		"\u0818\5N(\2\u0815\u0819\7\u014a\2\2\u0816\u0817\7\u00f9\2\2\u0817\u0819"+
		"\5\u01de\u00f0\2\u0818\u0815\3\2\2\2\u0818\u0816\3\2\2\2\u0818\u0819\3"+
		"\2\2\2\u0819\u0941\3\2\2\2\u081a\u081c\7\7\2\2\u081b\u081d\7\32\2\2\u081c"+
		"\u081b\3\2\2\2\u081c\u081d\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u081f\7\u03b1"+
		"\2\2\u081f\u0820\5\u01de\u00f0\2\u0820\u0827\5N(\2\u0821\u0822\7\u03b3"+
		"\2\2\u0822\u0823\5\u01de\u00f0\2\u0823\u0824\5N(\2\u0824\u0826\3\2\2\2"+
		"\u0825\u0821\3\2\2\2\u0826\u0829\3\2\2\2\u0827\u0825\3\2\2\2\u0827\u0828"+
		"\3\2\2\2\u0828\u082a\3\2\2\2\u0829\u0827\3\2\2\2\u082a\u082b\7\u03b2\2"+
		"\2\u082b\u0941\3\2\2\2\u082c\u082d\7\7\2\2\u082d\u082f\t\23\2\2\u082e"+
		"\u0830\5\u01de\u00f0\2\u082f\u082e\3\2\2\2\u082f\u0830\3\2\2\2\u0830\u0832"+
		"\3\2\2\2\u0831\u0833\5> \2\u0832\u0831\3\2\2\2\u0832\u0833\3\2\2\2\u0833"+
		"\u0834\3\2\2\2\u0834\u0838\5\u0204\u0103\2\u0835\u0837\5@!\2\u0836\u0835"+
		"\3\2\2\2\u0837\u083a\3\2\2\2\u0838\u0836\3\2\2\2\u0838\u0839\3\2\2\2\u0839"+
		"\u0941\3\2\2\2\u083a\u0838\3\2\2\2\u083b\u0840\7\7\2\2\u083c\u083e\7\34"+
		"\2\2\u083d\u083f\5\u01de\u00f0\2\u083e\u083d\3\2\2\2\u083e\u083f\3\2\2"+
		"\2\u083f\u0841\3\2\2\2\u0840\u083c\3\2\2\2\u0840\u0841\3\2\2\2\u0841\u0842"+
		"\3\2\2\2\u0842\u0843\7q\2\2\u0843\u0845\7O\2\2\u0844\u0846\5> \2\u0845"+
		"\u0844\3\2\2\2\u0845\u0846\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u084b\5\u0204"+
		"\u0103\2\u0848\u084a\5@!\2\u0849\u0848\3\2\2\2\u084a\u084d\3\2\2\2\u084b"+
		"\u0849\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u0941\3\2\2\2\u084d\u084b\3\2"+
		"\2\2\u084e\u0853\7\7\2\2\u084f\u0851\7\34\2\2\u0850\u0852\5\u01de\u00f0"+
		"\2\u0851\u0850\3\2\2\2\u0851\u0852\3\2\2\2\u0852\u0854\3\2\2\2\u0853\u084f"+
		"\3\2\2\2\u0853\u0854\3\2\2\2\u0854\u0855\3\2\2\2\u0855\u0857\7\u009d\2"+
		"\2\u0856\u0858\t\23\2\2\u0857\u0856\3\2\2\2\u0857\u0858\3\2\2\2\u0858"+
		"\u085a\3\2\2\2\u0859\u085b\5\u01de\u00f0\2\u085a\u0859\3\2\2\2\u085a\u085b"+
		"\3\2\2\2\u085b\u085d\3\2\2\2\u085c\u085e\5> \2\u085d\u085c\3\2\2\2\u085d"+
		"\u085e\3\2\2\2\u085e\u085f\3\2\2\2\u085f\u0863\5\u0204\u0103\2\u0860\u0862"+
		"\5@!\2\u0861\u0860\3\2\2\2\u0862\u0865\3\2\2\2\u0863\u0861\3\2\2\2\u0863"+
		"\u0864\3\2\2\2\u0864\u0941\3\2\2\2\u0865\u0863\3\2\2\2\u0866\u0867\7\7"+
		"\2\2\u0867\u0869\t\25\2\2\u0868\u086a\t\23\2\2\u0869\u0868\3\2\2\2\u0869"+
		"\u086a\3\2\2\2\u086a\u086c\3\2\2\2\u086b\u086d\5\u01de\u00f0\2\u086c\u086b"+
		"\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u086e\3\2\2\2\u086e\u0872\5\u0204\u0103"+
		"\2\u086f\u0871\5@!\2\u0870\u086f\3\2\2\2\u0871\u0874\3\2\2\2\u0872\u0870"+
		"\3\2\2\2\u0872\u0873\3\2\2\2\u0873\u0941\3\2\2\2\u0874\u0872\3\2\2\2\u0875"+
		"\u087a\7\7\2\2\u0876\u0878\7\34\2\2\u0877\u0879\5\u01de\u00f0\2\u0878"+
		"\u0877\3\2\2\2\u0878\u0879\3\2\2\2\u0879\u087b\3\2\2\2\u087a\u0876\3\2"+
		"\2\2\u087a\u087b\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087d\7;\2\2\u087d"+
		"\u087f\7O\2\2\u087e\u0880\5\u01de\u00f0\2\u087f\u087e\3\2\2\2\u087f\u0880"+
		"\3\2\2\2\u0880\u0881\3\2\2\2\u0881\u0882\5\u0204\u0103\2\u0882\u0883\5"+
		"T+\2\u0883\u0941\3\2\2\2\u0884\u0886\7\u00fb\2\2\u0885\u0887\7\u03a8\2"+
		"\2\u0886\u0885\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u0941"+
		"\t\5\2\2\u0889\u088b\7\t\2\2\u088a\u088c\7\32\2\2\u088b\u088a\3\2\2\2"+
		"\u088b\u088c\3\2\2\2\u088c\u088d\3\2\2\2\u088d\u0893\5\u01de\u00f0\2\u088e"+
		"\u088f\7\u0086\2\2\u088f\u0890\7&\2\2\u0890\u0894\5\u020e\u0108\2\u0891"+
		"\u0892\7.\2\2\u0892\u0894\7&\2\2\u0893\u088e\3\2\2\2\u0893\u0891\3\2\2"+
		"\2\u0894\u0941\3\2\2\2\u0895\u0897\7\26\2\2\u0896\u0898\7\32\2\2\u0897"+
		"\u0896\3\2\2\2\u0897\u0898\3\2\2\2\u0898\u0899\3\2\2\2\u0899\u089a\5\u01de"+
		"\u00f0\2\u089a\u089b\5\u01de\u00f0\2\u089b\u089f\5N(\2\u089c\u08a0\7\u014a"+
		"\2\2\u089d\u089e\7\u00f9\2\2\u089e\u08a0\5\u01de\u00f0\2\u089f\u089c\3"+
		"\2\2\2\u089f\u089d\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u0941\3\2\2\2\u08a1"+
		"\u08a3\7Z\2\2\u08a2\u08a4\7\u03a8\2\2\u08a3\u08a2\3\2\2\2\u08a3\u08a4"+
		"\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u0941\t\6\2\2\u08a6\u08a8\7\u0195\2"+
		"\2\u08a7\u08a9\7\32\2\2\u08a8\u08a7\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9"+
		"\u08aa\3\2\2\2\u08aa\u08ab\5\u01de\u00f0\2\u08ab\u08af\5N(\2\u08ac\u08b0"+
		"\7\u014a\2\2\u08ad\u08ae\7\u00f9\2\2\u08ae\u08b0\5\u01de\u00f0\2\u08af"+
		"\u08ac\3\2\2\2\u08af\u08ad\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u0941\3\2"+
		"\2\2\u08b1\u08b3\7.\2\2\u08b2\u08b4\7\32\2\2\u08b3\u08b2\3\2\2\2\u08b3"+
		"\u08b4\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u0941\5\u01de\u00f0\2\u08b6\u08b7"+
		"\7.\2\2\u08b7\u08b8\7q\2\2\u08b8\u0941\7O\2\2\u08b9\u08ba\7.\2\2\u08ba"+
		"\u08bb\t\23\2\2\u08bb\u0941\5\u01de\u00f0\2\u08bc\u08bd\7.\2\2\u08bd\u08be"+
		"\7;\2\2\u08be\u08bf\7O\2\2\u08bf\u0941\5\u01de\u00f0\2\u08c0\u08c1\7\u012b"+
		"\2\2\u08c1\u0941\7P\2\2\u08c2\u08c3\7\u0132\2\2\u08c3\u0941\7P\2\2\u08c4"+
		"\u08c6\7z\2\2\u08c5\u08c7\t\35\2\2\u08c6\u08c5\3\2\2\2\u08c6\u08c7\3\2"+
		"\2\2\u08c7\u08c8\3\2\2\2\u08c8\u0941\5\u01de\u00f0\2\u08c9\u08ca\7l\2"+
		"\2\u08ca\u08cb\7\21\2\2\u08cb\u0941\5\u01fe\u0100\2\u08cc\u08cd\7\36\2"+
		"\2\u08cd\u08ce\7\u0097\2\2\u08ce\u08cf\7\27\2\2\u08cf\u08d0\7\u0086\2"+
		"\2\u08d0\u08d3\5\u01d0\u00e9\2\u08d1\u08d2\7\31\2\2\u08d2\u08d4\5\u01d2"+
		"\u00ea\2\u08d3\u08d1\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u0941\3\2\2\2\u08d5"+
		"\u08d7\7&\2\2\u08d6\u08d5\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u08d8\3\2"+
		"\2\2\u08d8\u08d9\7\27\2\2\u08d9\u08da\7\u0086\2\2\u08da\u08db\7\u03a8"+
		"\2\2\u08db\u08df\5\u01d0\u00e9\2\u08dc\u08dd\7\31\2\2\u08dd\u08de\7\u03a8"+
		"\2\2\u08de\u08e0\5\u01d2\u00ea\2\u08df\u08dc\3\2\2\2\u08df\u08e0\3\2\2"+
		"\2\u08e0\u0941\3\2\2\2\u08e1\u08e2\7\u012c\2\2\u08e2\u0941\7\u0204\2\2"+
		"\u08e3\u08e4\7\u015c\2\2\u08e4\u0941\7\u0204\2\2\u08e5\u0941\7:\2\2\u08e6"+
		"\u08e7\t\36\2\2\u08e7\u0941\7\u0216\2\2\u08e8\u08e9\7\7\2\2\u08e9\u08ea"+
		"\7p\2\2\u08ea\u0941\5f\64\2\u08eb\u08ec\7.\2\2\u08ec\u08ed\7p\2\2\u08ed"+
		"\u0941\5\u01fe\u0100\2\u08ee\u08ef\7\u012c\2\2\u08ef\u08f2\7p\2\2\u08f0"+
		"\u08f3\5\u01fe\u0100\2\u08f1\u08f3\7\b\2\2\u08f2\u08f0\3\2\2\2\u08f2\u08f1"+
		"\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u0941\7\u0204\2\2\u08f5\u08f6\7\u015c"+
		"\2\2\u08f6\u08f9\7p\2\2\u08f7\u08fa\5\u01fe\u0100\2\u08f8\u08fa\7\b\2"+
		"\2\u08f9\u08f7\3\2\2\2\u08f9\u08f8\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u0941"+
		"\7\u0204\2\2\u08fc\u08fd\7\u020b\2\2\u08fd\u0900\7p\2\2\u08fe\u0901\5"+
		"\u01fe\u0100\2\u08ff\u0901\7\b\2\2\u0900\u08fe\3\2\2\2\u0900\u08ff\3\2"+
		"\2\2\u0901\u0941\3\2\2\2\u0902\u0903\7\u0111\2\2\u0903\u0904\7p\2\2\u0904"+
		"\u0941\5\u01e4\u00f3\2\u0905\u0906\7\u01ca\2\2\u0906\u0907\7p\2\2\u0907"+
		"\u0908\5\u01fe\u0100\2\u0908\u0909\7K\2\2\u0909\u090a\7\u03b1\2\2\u090a"+
		"\u090f\5f\64\2\u090b\u090c\7\u03b3\2\2\u090c\u090e\5f\64\2\u090d\u090b"+
		"\3\2\2\2\u090e\u0911\3\2\2\2\u090f\u090d\3\2\2\2\u090f\u0910\3\2\2\2\u0910"+
		"\u0912\3\2\2\2\u0911\u090f\3\2\2\2\u0912\u0913\7\u03b2\2\2\u0913\u0941"+
		"\3\2\2\2\u0914\u0915\7\u013f\2\2\u0915\u0916\7p\2\2\u0916\u0917\5\u01de"+
		"\u00f0\2\u0917\u0918\7\u00a8\2\2\u0918\u0919\7\u0094\2\2\u0919\u091c\5"+
		"\u01c4\u00e3\2\u091a\u091b\t\36\2\2\u091b\u091d\7\u0216\2\2\u091c\u091a"+
		"\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u0941\3\2\2\2\u091e\u091f\7\n\2\2\u091f"+
		"\u0922\7p\2\2\u0920\u0923\5\u01fe\u0100\2\u0921\u0923\7\b\2\2\u0922\u0920"+
		"\3\2\2\2\u0922\u0921\3\2\2\2\u0923\u0941\3\2\2\2\u0924\u0925\7\30\2\2"+
		"\u0925\u0928\7p\2\2\u0926\u0929\5\u01fe\u0100\2\u0927\u0929\7\b\2\2\u0928"+
		"\u0926\3\2\2\2\u0928\u0927\3\2\2\2\u0929\u0941\3\2\2\2\u092a\u092b\7h"+
		"\2\2\u092b\u092e\7p\2\2\u092c\u092f\5\u01fe\u0100\2\u092d\u092f\7\b\2"+
		"\2\u092e\u092c\3\2\2\2\u092e\u092d\3\2\2\2\u092f\u0941\3\2\2\2\u0930\u0931"+
		"\7\u01c1\2\2\u0931\u0934\7p\2\2\u0932\u0935\5\u01fe\u0100\2\u0933\u0935"+
		"\7\b\2\2\u0934\u0932\3\2\2\2\u0934\u0933\3\2\2\2\u0935\u0941\3\2\2\2\u0936"+
		"\u0937\7\u01cb\2\2\u0937\u093a\7p\2\2\u0938\u093b\5\u01fe\u0100\2\u0939"+
		"\u093b\7\b\2\2\u093a\u0938\3\2\2\2\u093a\u0939\3\2\2\2\u093b\u0941\3\2"+
		"\2\2\u093c\u093d\7\u01c9\2\2\u093d\u0941\7\u01af\2\2\u093e\u093f\7\u0212"+
		"\2\2\u093f\u0941\7\u01af\2\2\u0940\u080e\3\2\2\2\u0940\u080f\3\2\2\2\u0940"+
		"\u081a\3\2\2\2\u0940\u082c\3\2\2\2\u0940\u083b\3\2\2\2\u0940\u084e\3\2"+
		"\2\2\u0940\u0866\3\2\2\2\u0940\u0875\3\2\2\2\u0940\u0884\3\2\2\2\u0940"+
		"\u0889\3\2\2\2\u0940\u0895\3\2\2\2\u0940\u08a1\3\2\2\2\u0940\u08a6\3\2"+
		"\2\2\u0940\u08b1\3\2\2\2\u0940\u08b6\3\2\2\2\u0940\u08b9\3\2\2\2\u0940"+
		"\u08bc\3\2\2\2\u0940\u08c0\3\2\2\2\u0940\u08c2\3\2\2\2\u0940\u08c4\3\2"+
		"\2\2\u0940\u08c9\3\2\2\2\u0940\u08cc\3\2\2\2\u0940\u08d6\3\2\2\2\u0940"+
		"\u08e1\3\2\2\2\u0940\u08e3\3\2\2\2\u0940\u08e5\3\2\2\2\u0940\u08e6\3\2"+
		"\2\2\u0940\u08e8\3\2\2\2\u0940\u08eb\3\2\2\2\u0940\u08ee\3\2\2\2\u0940"+
		"\u08f5\3\2\2\2\u0940\u08fc\3\2\2\2\u0940\u0902\3\2\2\2\u0940\u0905\3\2"+
		"\2\2\u0940\u0914\3\2\2\2\u0940\u091e\3\2\2\2\u0940\u0924\3\2\2\2\u0940"+
		"\u092a\3\2\2\2\u0940\u0930\3\2\2\2\u0940\u0936\3\2\2\2\u0940\u093c\3\2"+
		"\2\2\u0940\u093e\3\2\2\2\u0941\177\3\2\2\2\u0942\u0943\7.\2\2\u0943\u0945"+
		"\t\2\2\2\u0944\u0946\5\u0210\u0109\2\u0945\u0944\3\2\2\2\u0945\u0946\3"+
		"\2\2\2\u0946\u0947\3\2\2\2\u0947\u0948\5\u01de\u00f0\2\u0948\u0081\3\2"+
		"\2\2\u0949\u094a\7.\2\2\u094a\u094c\7\u013c\2\2\u094b\u094d\5\u0210\u0109"+
		"\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u094e\3\2\2\2\u094e\u094f"+
		"\5\u01c6\u00e4\2\u094f\u0083\3\2\2\2\u0950\u0951\7.\2\2\u0951\u0953\7"+
		"E\2\2\u0952\u0954\t\3\2\2\u0953\u0952\3\2\2\2\u0953\u0954\3\2\2\2\u0954"+
		"\u0955\3\2\2\2\u0955\u0956\5\u01de\u00f0\2\u0956\u0957\7g\2\2\u0957\u095d"+
		"\5\u01c4\u00e3\2\u0958\u095a\7\u00fb\2\2\u0959\u095b\7\u03a8\2\2\u095a"+
		"\u0959\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u095c\3\2\2\2\u095c\u095e\t\5"+
		"\2\2\u095d\u0958\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u0964\3\2\2\2\u095f"+
		"\u0961\7Z\2\2\u0960\u0962\7\u03a8\2\2\u0961\u0960\3\2\2\2\u0961\u0962"+
		"\3\2\2\2\u0962\u0963\3\2\2\2\u0963\u0965\t\6\2\2\u0964\u095f\3\2\2\2\u0964"+
		"\u0965\3\2\2\2\u0965\u0085\3\2\2\2\u0966\u0967\7.\2\2\u0967\u0968\7\u0172"+
		"\2\2\u0968\u0969\7?\2\2\u0969\u096a\5\u01de\u00f0\2\u096a\u096b\7\u0136"+
		"\2\2\u096b\u096c\7\u03a8\2\2\u096c\u096d\5\u01d4\u00eb\2\u096d\u0087\3"+
		"\2\2\2\u096e\u096f\7.\2\2\u096f\u0971\7r\2\2\u0970\u0972\5\u0210\u0109"+
		"\2\u0971\u0970\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0974"+
		"\5\u01c6\u00e4\2\u0974\u0089\3\2\2\2\u0975\u0976\7.\2\2\u0976\u0978\7"+
		"\u0150\2\2\u0977\u0979\5\u0210\u0109\2\u0978\u0977\3\2\2\2\u0978\u0979"+
		"\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u097b\5\u01c6\u00e4\2\u097b\u008b\3"+
		"\2\2\2\u097c\u097d\7.\2\2\u097d\u097f\7\u01e0\2\2\u097e\u0980\5\u0210"+
		"\u0109\2\u097f\u097e\3\2\2\2\u097f\u0980\3\2\2\2\u0980\u0981\3\2\2\2\u0981"+
		"\u0982\5\u01de\u00f0\2\u0982\u008d\3\2\2\2\u0983\u0985\7.\2\2\u0984\u0986"+
		"\7\u0205\2\2\u0985\u0984\3\2\2\2\u0985\u0986\3\2\2\2\u0986\u0987\3\2\2"+
		"\2\u0987\u0989\7\u0094\2\2\u0988\u098a\5\u0210\u0109\2\u0989\u0988\3\2"+
		"\2\2\u0989\u098a\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u098d\5\u0200\u0101"+
		"\2\u098c\u098e\t\37\2\2\u098d\u098c\3\2\2\2\u098d\u098e\3\2\2\2\u098e"+
		"\u008f\3\2\2\2\u098f\u0990\7.\2\2\u0990\u0991\7\u0204\2\2\u0991\u0997"+
		"\5\u01de\u00f0\2\u0992\u0994\7\u0136\2\2\u0993\u0995\7\u03a8\2\2\u0994"+
		"\u0993\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0996\3\2\2\2\u0996\u0998\5\u01d4"+
		"\u00eb\2\u0997\u0992\3\2\2\2\u0997\u0998\3\2\2\2\u0998\u0091\3\2\2\2\u0999"+
		"\u099a\7.\2\2\u099a\u099c\7\u0099\2\2\u099b\u099d\5\u0210\u0109\2\u099c"+
		"\u099b\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u099f\5\u01c6"+
		"\u00e4\2\u099f\u0093\3\2\2\2\u09a0\u09a1\7.\2\2\u09a1\u09a3\7\u0219\2"+
		"\2\u09a2\u09a4\5\u0210\u0109\2\u09a3\u09a2\3\2\2\2\u09a3\u09a4\3\2\2\2"+
		"\u09a4\u09a5\3\2\2\2\u09a5\u09aa\5\u01c6\u00e4\2\u09a6\u09a7\7\u03b3\2"+
		"\2\u09a7\u09a9\5\u01c6\u00e4\2\u09a8\u09a6\3\2\2\2\u09a9\u09ac\3\2\2\2"+
		"\u09aa\u09a8\3\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09ae\3\2\2\2\u09ac\u09aa"+
		"\3\2\2\2\u09ad\u09af\t\37\2\2\u09ae\u09ad\3\2\2\2\u09ae\u09af\3\2\2\2"+
		"\u09af\u0095\3\2\2\2\u09b0\u09b1\7z\2\2\u09b1\u09b2\7\u0094\2\2\u09b2"+
		"\u09b3\5\u01c4\u00e3\2\u09b3\u09b4\7\u0097\2\2\u09b4\u09bc\5\u01c4\u00e3"+
		"\2\u09b5\u09b6\7\u03b3\2\2\u09b6\u09b7\5\u01c4\u00e3\2\u09b7\u09b8\7\u0097"+
		"\2\2\u09b8\u09b9\5\u01c4\u00e3\2\u09b9\u09bb\3\2\2\2\u09ba\u09b5\3\2\2"+
		"\2\u09bb\u09be\3\2\2\2\u09bc\u09ba\3\2\2\2\u09bc\u09bd\3\2\2\2\u09bd\u0097"+
		"\3\2\2\2\u09be\u09bc\3\2\2\2\u09bf\u09c1\7\u020b\2\2\u09c0\u09c2\7\u0094"+
		"\2\2\u09c1\u09c0\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3"+
		"\u09c4\5\u01c4\u00e3\2\u09c4\u0099\3\2\2\2\u09c5\u09c6\7\22\2\2\u09c6"+
		"\u09cd\5\u01c6\u00e4\2\u09c7\u09ca\7\u03b1\2\2\u09c8\u09cb\5\u0208\u0105"+
		"\2\u09c9\u09cb\5\u0206\u0104\2\u09ca\u09c8\3\2\2\2\u09ca\u09c9\3\2\2\2"+
		"\u09ca\u09cb\3\2\2\2\u09cb\u09cc\3\2\2\2\u09cc\u09ce\7\u03b2\2\2\u09cd"+
		"\u09c7\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u009b\3\2\2\2\u09cf\u09d2\5\u00b4"+
		"[\2\u09d0\u09d2\5\u00b6\\\2\u09d1\u09cf\3\2\2\2\u09d1\u09d0\3\2\2\2\u09d2"+
		"\u009d\3\2\2\2\u09d3\u09d4\7\u012e\2\2\u09d4\u09d5\5\u0206\u0104\2\u09d5"+
		"\u009f\3\2\2\2\u09d6\u09db\5\u00b8]\2\u09d7\u09db\5\u00ba^\2\u09d8\u09db"+
		"\5\u00bc_\2\u09d9\u09db\5\u00be`\2\u09da\u09d6\3\2\2\2\u09da\u09d7\3\2"+
		"\2\2\u09da\u09d8\3\2\2\2\u09da\u09d9\3\2\2\2\u09db\u00a1\3\2\2\2\u09dc"+
		"\u09de\7I\2\2\u09dd\u09df\t \2\2\u09de\u09dd\3\2\2\2\u09de\u09df\3\2\2"+
		"\2\u09df\u09e1\3\2\2\2\u09e0\u09e2\7C\2\2\u09e1\u09e0\3\2\2\2\u09e1\u09e2"+
		"\3\2\2\2\u09e2\u09e4\3\2\2\2\u09e3\u09e5\7K\2\2\u09e4\u09e3\3\2\2\2\u09e4"+
		"\u09e5\3\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09ec\5\u01c4\u00e3\2\u09e7\u09e8"+
		"\7p\2\2\u09e8\u09e9\7\u03b1\2\2\u09e9\u09ea\5\u01fe\u0100\2\u09ea\u09eb"+
		"\7\u03b2\2\2\u09eb\u09ed\3\2\2\2\u09ec\u09e7\3\2\2\2\u09ec\u09ed\3\2\2"+
		"\2\u09ed\u09fe\3\2\2\2\u09ee\u09ef\7\u03b1\2\2\u09ef\u09f0\5\u01fe\u0100"+
		"\2\u09f0\u09f1\7\u03b2\2\2\u09f1\u09f3\3\2\2\2\u09f2\u09ee\3\2\2\2\u09f2"+
		"\u09f3\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09ff\5\u00aeX\2\u09f5\u09f6"+
		"\7\u0086\2\2\u09f6\u09fb\5\u00b0Y\2\u09f7\u09f8\7\u03b3\2\2\u09f8\u09fa"+
		"\5\u00b0Y\2\u09f9\u09f7\3\2\2\2\u09fa\u09fd\3\2\2\2\u09fb\u09f9\3\2\2"+
		"\2\u09fb\u09fc\3\2\2\2\u09fc\u09ff\3\2\2\2\u09fd\u09fb\3\2\2\2\u09fe\u09f2"+
		"\3\2\2\2\u09fe\u09f5\3\2\2\2\u09ff\u0a0c\3\2\2\2\u0a00\u0a01\7g\2\2\u0a01"+
		"\u0a02\7\u0130\2\2\u0a02\u0a03\7O\2\2\u0a03\u0a04\7\u00a0\2\2\u0a04\u0a09"+
		"\5\u00b0Y\2\u0a05\u0a06\7\u03b3\2\2\u0a06\u0a08\5\u00b0Y\2\u0a07\u0a05"+
		"\3\2\2\2\u0a08\u0a0b\3\2\2\2\u0a09\u0a07\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a"+
		"\u0a0d\3\2\2\2\u0a0b\u0a09\3\2\2\2\u0a0c\u0a00\3\2\2\2\u0a0c\u0a0d\3\2"+
		"\2\2\u0a0d\u00a3\3\2\2\2\u0a0e\u0a0f\7Y\2\2\u0a0f\u0a11\7\u0123\2\2\u0a10"+
		"\u0a12\t!\2\2\u0a11\u0a10\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u0a14\3\2"+
		"\2\2\u0a13\u0a15\7\u0171\2\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15"+
		"\u0a16\3\2\2\2\u0a16\u0a17\7F\2\2\u0a17\u0a19\7\u03c0\2\2\u0a18\u0a1a"+
		"\t\b\2\2\u0a19\u0a18\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a1b\3\2\2\2\u0a1b"+
		"\u0a1c\7K\2\2\u0a1c\u0a1d\7\u0094\2\2\u0a1d\u0a23\5\u01c4\u00e3\2\u0a1e"+
		"\u0a1f\7p\2\2\u0a1f\u0a20\7\u03b1\2\2\u0a20\u0a21\5\u01fe\u0100\2\u0a21"+
		"\u0a22\7\u03b2\2\2\u0a22\u0a24\3\2\2\2\u0a23\u0a1e\3\2\2\2\u0a23\u0a24"+
		"\3\2\2\2\u0a24\u0a28\3\2\2\2\u0a25\u0a26\7\27\2\2\u0a26\u0a27\7\u0086"+
		"\2\2\u0a27\u0a29\5\u01d0\u00e9\2\u0a28\u0a25\3\2\2\2\u0a28\u0a29\3\2\2"+
		"\2\u0a29\u0a3d\3\2\2\2\u0a2a\u0a2e\t\"\2\2\u0a2b\u0a2c\7\u0095\2\2\u0a2c"+
		"\u0a2d\7\21\2\2\u0a2d\u0a2f\7\u03c0\2\2\u0a2e\u0a2b\3\2\2\2\u0a2e\u0a2f"+
		"\3\2\2\2\u0a2f\u0a36\3\2\2\2\u0a30\u0a32\7j\2\2\u0a31\u0a30\3\2\2\2\u0a31"+
		"\u0a32\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a34\7\62\2\2\u0a34\u0a35\7"+
		"\21\2\2\u0a35\u0a37\7\u03c0\2\2\u0a36\u0a31\3\2\2\2\u0a36\u0a37\3\2\2"+
		"\2\u0a37\u0a3b\3\2\2\2\u0a38\u0a39\7\63\2\2\u0a39\u0a3a\7\21\2\2\u0a3a"+
		"\u0a3c\7\u03c0\2\2\u0a3b\u0a38\3\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c\u0a3e"+
		"\3\2\2\2\u0a3d\u0a2a\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u0a4a\3\2\2\2\u0a3f"+
		"\u0a43\7X\2\2\u0a40\u0a41\7\u0092\2\2\u0a41\u0a42\7\21\2\2\u0a42\u0a44"+
		"\7\u03c0\2\2\u0a43\u0a40\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44\u0a48\3\2\2"+
		"\2\u0a45\u0a46\7\u0095\2\2\u0a46\u0a47\7\21\2\2\u0a47\u0a49\7\u03c0\2"+
		"\2\u0a48\u0a45\3\2\2\2\u0a48\u0a49\3\2\2\2\u0a49\u0a4b\3\2\2\2\u0a4a\u0a3f"+
		"\3\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a50\3\2\2\2\u0a4c\u0a4d\7C\2\2\u0a4d"+
		"\u0a4e\5\u01e4\u00f3\2\u0a4e\u0a4f\t#\2\2\u0a4f\u0a51\3\2\2\2\u0a50\u0a4c"+
		"\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a5d\3\2\2\2\u0a52\u0a53\7\u03b1\2"+
		"\2\u0a53\u0a58\5\u00b2Z\2\u0a54\u0a55\7\u03b3\2\2\u0a55\u0a57\5\u00b2"+
		"Z\2\u0a56\u0a54\3\2\2\2\u0a57\u0a5a\3\2\2\2\u0a58\u0a56\3\2\2\2\u0a58"+
		"\u0a59\3\2\2\2\u0a59\u0a5b\3\2\2\2\u0a5a\u0a58\3\2\2\2\u0a5b\u0a5c\7\u03b2"+
		"\2\2\u0a5c\u0a5e\3\2\2\2\u0a5d\u0a52\3\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e"+
		"\u0a68\3\2\2\2\u0a5f\u0a60\7\u0086\2\2\u0a60\u0a65\5\u00b0Y\2\u0a61\u0a62"+
		"\7\u03b3\2\2\u0a62\u0a64\5\u00b0Y\2\u0a63\u0a61\3\2\2\2\u0a64\u0a67\3"+
		"\2\2\2\u0a65\u0a63\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a69\3\2\2\2\u0a67"+
		"\u0a65\3\2\2\2\u0a68\u0a5f\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69\u00a5\3\2"+
		"\2\2\u0a6a\u0a6b\7Y\2\2\u0a6b\u0a6d\7\u0221\2\2\u0a6c\u0a6e\t!\2\2\u0a6d"+
		"\u0a6c\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e\u0a70\3\2\2\2\u0a6f\u0a71\7\u0171"+
		"\2\2\u0a70\u0a6f\3\2\2\2\u0a70\u0a71\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72"+
		"\u0a73\7F\2\2\u0a73\u0a75\7\u03c0\2\2\u0a74\u0a76\t\b\2\2\u0a75\u0a74"+
		"\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a77\3\2\2\2\u0a77\u0a78\7K\2\2\u0a78"+
		"\u0a79\7\u0094\2\2\u0a79\u0a7d\5\u01c4\u00e3\2\u0a7a\u0a7b\7\27\2\2\u0a7b"+
		"\u0a7c\7\u0086\2\2\u0a7c\u0a7e\5\u01d0\u00e9\2\u0a7d\u0a7a\3\2\2\2\u0a7d"+
		"\u0a7e\3\2\2\2\u0a7e\u0a85\3\2\2\2\u0a7f\u0a80\7\u01db\2\2\u0a80\u0a81"+
		"\7\u015a\2\2\u0a81\u0a82\7\21\2\2\u0a82\u0a83\7\u03aa\2\2\u0a83\u0a84"+
		"\7\u03c0\2\2\u0a84\u0a86\7\u03a9\2\2\u0a85\u0a7f\3\2\2\2\u0a85\u0a86\3"+
		"\2\2\2\u0a86\u0a8b\3\2\2\2\u0a87\u0a88\7C\2\2\u0a88\u0a89\5\u01e4\u00f3"+
		"\2\u0a89\u0a8a\t#\2\2\u0a8a\u0a8c\3\2\2\2\u0a8b\u0a87\3\2\2\2\u0a8b\u0a8c"+
		"\3\2\2\2\u0a8c\u0a98\3\2\2\2\u0a8d\u0a8e\7\u03b1\2\2\u0a8e\u0a93\5\u00b2"+
		"Z\2\u0a8f\u0a90\7\u03b3\2\2\u0a90\u0a92\5\u00b2Z\2\u0a91\u0a8f\3\2\2\2"+
		"\u0a92\u0a95\3\2\2\2\u0a93\u0a91\3\2\2\2\u0a93\u0a94\3\2\2\2\u0a94\u0a96"+
		"\3\2\2\2\u0a95\u0a93\3\2\2\2\u0a96\u0a97\7\u03b2\2\2\u0a97\u0a99\3\2\2"+
		"\2\u0a98\u0a8d\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0aa3\3\2\2\2\u0a9a\u0a9b"+
		"\7\u0086\2\2\u0a9b\u0aa0\5\u00b0Y\2\u0a9c\u0a9d\7\u03b3\2\2\u0a9d\u0a9f"+
		"\5\u00b0Y\2\u0a9e\u0a9c\3\2\2\2\u0a9f\u0aa2\3\2\2\2\u0aa0\u0a9e\3\2\2"+
		"\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0aa4\3\2\2\2\u0aa2\u0aa0\3\2\2\2\u0aa3\u0a9a"+
		"\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u00a7\3\2\2\2\u0aa5\u0aa7\7|\2\2\u0aa6"+
		"\u0aa8\t$\2\2\u0aa7\u0aa6\3\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aaa\3\2"+
		"\2\2\u0aa9\u0aab\7K\2\2\u0aaa\u0aa9\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab"+
		"\u0aac\3\2\2\2\u0aac\u0ab2\5\u01c4\u00e3\2\u0aad\u0aae\7p\2\2\u0aae\u0aaf"+
		"\7\u03b1\2\2\u0aaf\u0ab0\5\u01fe\u0100\2\u0ab0\u0ab1\7\u03b2\2\2\u0ab1"+
		"\u0ab3\3\2\2\2\u0ab2\u0aad\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0ac4\3\2"+
		"\2\2\u0ab4\u0ab5\7\u03b1\2\2\u0ab5\u0ab6\5\u01fe\u0100\2\u0ab6\u0ab7\7"+
		"\u03b2\2\2\u0ab7\u0ab9\3\2\2\2\u0ab8\u0ab4\3\2\2\2\u0ab8\u0ab9\3\2\2\2"+
		"\u0ab9\u0aba\3\2\2\2\u0aba\u0ac5\5\u00aeX\2\u0abb\u0abc\7\u0086\2\2\u0abc"+
		"\u0ac1\5\u00b0Y\2\u0abd\u0abe\7\u03b3\2\2\u0abe\u0ac0\5\u00b0Y\2\u0abf"+
		"\u0abd\3\2\2\2\u0ac0\u0ac3\3\2\2\2\u0ac1\u0abf\3\2\2\2\u0ac1\u0ac2\3\2"+
		"\2\2\u0ac2\u0ac5\3\2\2\2\u0ac3\u0ac1\3\2\2\2\u0ac4\u0ab8\3\2\2\2\u0ac4"+
		"\u0abb\3\2\2\2\u0ac5\u00a9\3\2\2\2\u0ac6\u0acd\5\u00d8m\2\u0ac7\u0ac8"+
		"\79\2\2\u0ac8\u0ace\7\u00a0\2\2\u0ac9\u0aca\7Z\2\2\u0aca\u0acb\7D\2\2"+
		"\u0acb\u0acc\7\u01e2\2\2\u0acc\u0ace\7\u0194\2\2\u0acd\u0ac7\3\2\2\2\u0acd"+
		"\u0ac9\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0b12\3\2\2\2\u0acf\u0ad6\5\u00d4"+
		"k\2\u0ad0\u0ad1\79\2\2\u0ad1\u0ad7\7\u00a0\2\2\u0ad2\u0ad3\7Z\2\2\u0ad3"+
		"\u0ad4\7D\2\2\u0ad4\u0ad5\7\u01e2\2\2\u0ad5\u0ad7\7\u0194\2\2\u0ad6\u0ad0"+
		"\3\2\2\2\u0ad6\u0ad2\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u0b12\3\2\2\2\u0ad8"+
		"\u0ada\5\u00dan\2\u0ad9\u0adb\5\u00dep\2\u0ada\u0ad9\3\2\2\2\u0adb\u0adc"+
		"\3\2\2\2\u0adc\u0ada\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0ae6\3\2\2\2\u0ade"+
		"\u0ae0\7\u009c\2\2\u0adf\u0ae1\t%\2\2\u0ae0\u0adf\3\2\2\2\u0ae0\u0ae1"+
		"\3\2\2\2\u0ae1\u0ae4\3\2\2\2\u0ae2\u0ae5\5\u00d8m\2\u0ae3\u0ae5\5\u00d4"+
		"k\2\u0ae4\u0ae2\3\2\2\2\u0ae4\u0ae3\3\2\2\2\u0ae5\u0ae7\3\2\2\2\u0ae6"+
		"\u0ade\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7\u0ae9\3\2\2\2\u0ae8\u0aea\5\u00c4"+
		"c\2\u0ae9\u0ae8\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0aec\3\2\2\2\u0aeb"+
		"\u0aed\5\u00ecw\2\u0aec\u0aeb\3\2\2\2\u0aec\u0aed\3\2\2\2\u0aed\u0af4"+
		"\3\2\2\2\u0aee\u0aef\79\2\2\u0aef\u0af5\7\u00a0\2\2\u0af0\u0af1\7Z\2\2"+
		"\u0af1\u0af2\7D\2\2\u0af2\u0af3\7\u01e2\2\2\u0af3\u0af5\7\u0194\2\2\u0af4"+
		"\u0aee\3\2\2\2\u0af4\u0af0\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5\u0b12\3\2"+
		"\2\2\u0af6\u0af8\5\u00d6l\2\u0af7\u0af9\5\u00dco\2\u0af8\u0af7\3\2\2\2"+
		"\u0af9\u0afa\3\2\2\2\u0afa\u0af8\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0b01"+
		"\3\2\2\2\u0afc\u0afe\7\u009c\2\2\u0afd\u0aff\t%\2\2\u0afe\u0afd\3\2\2"+
		"\2\u0afe\u0aff\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u0b02\5\u00d4k\2\u0b01"+
		"\u0afc\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02\u0b04\3\2\2\2\u0b03\u0b05\5\u00c4"+
		"c\2\u0b04\u0b03\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05\u0b07\3\2\2\2\u0b06"+
		"\u0b08\5\u00ecw\2\u0b07\u0b06\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08\u0b0f"+
		"\3\2\2\2\u0b09\u0b0a\79\2\2\u0b0a\u0b10\7\u00a0\2\2\u0b0b\u0b0c\7Z\2\2"+
		"\u0b0c\u0b0d\7D\2\2\u0b0d\u0b0e\7\u01e2\2\2\u0b0e\u0b10\7\u0194\2\2\u0b0f"+
		"\u0b09\3\2\2\2\u0b0f\u0b0b\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10\u0b12\3\2"+
		"\2\2\u0b11\u0ac6\3\2\2\2\u0b11\u0acf\3\2\2\2\u0b11\u0ad8\3\2\2\2\u0b11"+
		"\u0af6\3\2\2\2\u0b12\u00ab\3\2\2\2\u0b13\u0b16\5\u00c0a\2\u0b14\u0b16"+
		"\5\u00c2b\2\u0b15\u0b13\3\2\2\2\u0b15\u0b14\3\2\2\2\u0b16\u00ad\3\2\2"+
		"\2\u0b17\u0b27\5\u00aaV\2\u0b18\u0b19\t&\2\2\u0b19\u0b1a\7\u03b1\2\2\u0b1a"+
		"\u0b1b\5\u0206\u0104\2\u0b1b\u0b23\7\u03b2\2\2\u0b1c\u0b1d\7\u03b3\2\2"+
		"\u0b1d\u0b1e\7\u03b1\2\2\u0b1e\u0b1f\5\u0206\u0104\2\u0b1f\u0b20\7\u03b2"+
		"\2\2\u0b20\u0b22\3\2\2\2\u0b21\u0b1c\3\2\2\2\u0b22\u0b25\3\2\2\2\u0b23"+
		"\u0b21\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b27\3\2\2\2\u0b25\u0b23\3\2"+
		"\2\2\u0b26\u0b17\3\2\2\2\u0b26\u0b18\3\2\2\2\u0b27\u00af\3\2\2\2\u0b28"+
		"\u0b29\5\u01c8\u00e5\2\u0b29\u0b2a\7\u03a8\2\2\u0b2a\u0b2b\5\u0222\u0112"+
		"\2\u0b2b\u00b1\3\2\2\2\u0b2c\u0b2f\5\u01de\u00f0\2\u0b2d\u0b2f\7\u03cb"+
		"\2\2\u0b2e\u0b2c\3\2\2\2\u0b2e\u0b2d\3\2\2\2\u0b2f\u00b3\3\2\2\2\u0b30"+
		"\u0b32\7(\2\2\u0b31\u0b33\7\\\2\2\u0b32\u0b31\3\2\2\2\u0b32\u0b33\3\2"+
		"\2\2\u0b33\u0b35\3\2\2\2\u0b34\u0b36\7\u01c0\2\2\u0b35\u0b34\3\2\2\2\u0b35"+
		"\u0b36\3\2\2\2\u0b36\u0b38\3\2\2\2\u0b37\u0b39\7C\2\2\u0b38\u0b37\3\2"+
		"\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0b3b\7<\2\2\u0b3b"+
		"\u0b41\5\u01c4\u00e3\2\u0b3c\u0b3d\7p\2\2\u0b3d\u0b3e\7\u03b1\2\2\u0b3e"+
		"\u0b3f\5\u01fe\u0100\2\u0b3f\u0b40\7\u03b2\2\2\u0b40\u0b42\3\2\2\2\u0b41"+
		"\u0b3c\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0b45\3\2\2\2\u0b43\u0b44\7\u00a6"+
		"\2\2\u0b44\u0b46\5\u0222\u0112\2\u0b45\u0b43\3\2\2\2\u0b45\u0b46\3\2\2"+
		"\2\u0b46\u0b48\3\2\2\2\u0b47\u0b49\5\u00c4c\2\u0b48\u0b47\3\2\2\2\u0b48"+
		"\u0b49\3\2\2\2\u0b49\u0b4c\3\2\2\2\u0b4a\u0b4b\7V\2\2\u0b4b\u0b4d\5\u01e4"+
		"\u00f3\2\u0b4c\u0b4a\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u00b5\3\2\2\2\u0b4e"+
		"\u0b50\7(\2\2\u0b4f\u0b51\7\\\2\2\u0b50\u0b4f\3\2\2\2\u0b50\u0b51\3\2"+
		"\2\2\u0b51\u0b53\3\2\2\2\u0b52\u0b54\7\u01c0\2\2\u0b53\u0b52\3\2\2\2\u0b53"+
		"\u0b54\3\2\2\2\u0b54\u0b56\3\2\2\2\u0b55\u0b57\7C\2\2\u0b56\u0b55\3\2"+
		"\2\2\u0b56\u0b57\3\2\2\2\u0b57\u0b7f\3\2\2\2\u0b58\u0b5b\5\u01c4\u00e3"+
		"\2\u0b59\u0b5a\7\u03b0\2\2\u0b5a\u0b5c\7\u03a1\2\2\u0b5b\u0b59\3\2\2\2"+
		"\u0b5b\u0b5c\3\2\2\2\u0b5c\u0b65\3\2\2\2\u0b5d\u0b5e\7\u03b3\2\2\u0b5e"+
		"\u0b61\5\u01c4\u00e3\2\u0b5f\u0b60\7\u03b0\2\2\u0b60\u0b62\7\u03a1\2\2"+
		"\u0b61\u0b5f\3\2\2\2\u0b61\u0b62\3\2\2\2\u0b62\u0b64\3\2\2\2\u0b63\u0b5d"+
		"\3\2\2\2\u0b64\u0b67\3\2\2\2\u0b65\u0b63\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66"+
		"\u0b68\3\2\2\2\u0b67\u0b65\3\2\2\2\u0b68\u0b69\7<\2\2\u0b69\u0b6a\5\u00c8"+
		"e\2\u0b6a\u0b80\3\2\2\2\u0b6b\u0b6c\7<\2\2\u0b6c\u0b6f\5\u01c4\u00e3\2"+
		"\u0b6d\u0b6e\7\u03b0\2\2\u0b6e\u0b70\7\u03a1\2\2\u0b6f\u0b6d\3\2\2\2\u0b6f"+
		"\u0b70\3\2\2\2\u0b70\u0b79\3\2\2\2\u0b71\u0b72\7\u03b3\2\2\u0b72\u0b75"+
		"\5\u01c4\u00e3\2\u0b73\u0b74\7\u03b0\2\2\u0b74\u0b76\7\u03a1\2\2\u0b75"+
		"\u0b73\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0b78\3\2\2\2\u0b77\u0b71\3\2"+
		"\2\2\u0b78\u0b7b\3\2\2\2\u0b79\u0b77\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a"+
		"\u0b7c\3\2\2\2\u0b7b\u0b79\3\2\2\2\u0b7c\u0b7d\7\u00a3\2\2\u0b7d\u0b7e"+
		"\5\u00c8e\2\u0b7e\u0b80\3\2\2\2\u0b7f\u0b58\3\2\2\2\u0b7f\u0b6b\3\2\2"+
		"\2\u0b80\u0b83\3\2\2\2\u0b81\u0b82\7\u00a6\2\2\u0b82\u0b84\5\u0222\u0112"+
		"\2\u0b83\u0b81\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u00b7\3\2\2\2\u0b85\u0b86"+
		"\7\u0155\2\2\u0b86\u0b87\5\u01c4\u00e3\2\u0b87\u0b8c\7\u01a7\2\2\u0b88"+
		"\u0b8a\7\f\2\2\u0b89\u0b88\3\2\2\2\u0b89\u0b8a\3\2\2\2\u0b8a\u0b8b\3\2"+
		"\2\2\u0b8b\u0b8d\5\u01de\u00f0\2\u0b8c\u0b89\3\2\2\2\u0b8c\u0b8d\3\2\2"+
		"\2\u0b8d\u00b9\3\2\2\2\u0b8e\u0b8f\7\u0155\2\2\u0b8f\u0b90\5\u01c4\u00e3"+
		"\2\u0b90\u0b91\7u\2\2\u0b91\u0b98\5\u01c6\u00e4\2\u0b92\u0b93\5\u0226"+
		"\u0114\2\u0b93\u0b94\7\u03b1\2\2\u0b94\u0b95\5\u0208\u0105\2\u0b95\u0b96"+
		"\7\u03b2\2\2\u0b96\u0b99\3\2\2\2\u0b97\u0b99\t\'\2\2\u0b98\u0b92\3\2\2"+
		"\2\u0b98\u0b97\3\2\2\2\u0b99\u0b9c\3\2\2\2\u0b9a\u0b9b\7\u00a6\2\2\u0b9b"+
		"\u0b9d\5\u0222\u0112\2\u0b9c\u0b9a\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0ba0"+
		"\3\2\2\2\u0b9e\u0b9f\7V\2\2\u0b9f\u0ba1\5\u01e4\u00f3\2\u0ba0\u0b9e\3"+
		"\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u00bb\3\2\2\2\u0ba2\u0ba3\7\u0155\2\2"+
		"\u0ba3\u0ba4\5\u01c4\u00e3\2\u0ba4\u0ba5\7u\2\2\u0ba5\u0ba8\t(\2\2\u0ba6"+
		"\u0ba7\7\u00a6\2\2\u0ba7\u0ba9\5\u0222\u0112\2\u0ba8\u0ba6\3\2\2\2\u0ba8"+
		"\u0ba9\3\2\2\2\u0ba9\u0bac\3\2\2\2\u0baa\u0bab\7V\2\2\u0bab\u0bad\5\u01e4"+
		"\u00f3\2\u0bac\u0baa\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u00bd\3\2\2\2\u0bae"+
		"\u0baf\7\u0155\2\2\u0baf\u0bb0\5\u01c4\u00e3\2\u0bb0\u0bb1\7\u0110\2\2"+
		"\u0bb1\u00bf\3\2\2\2\u0bb2\u0bb4\7\u00a0\2\2\u0bb3\u0bb5\7\\\2\2\u0bb4"+
		"\u0bb3\3\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bb7\3\2\2\2\u0bb6\u0bb8\7C"+
		"\2\2\u0bb7\u0bb6\3\2\2\2\u0bb7\u0bb8\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9"+
		"\u0bbe\5\u01c4\u00e3\2\u0bba\u0bbc\7\f\2\2\u0bbb\u0bba\3\2\2\2\u0bbb\u0bbc"+
		"\3\2\2\2\u0bbc\u0bbd\3\2\2\2\u0bbd\u0bbf\5\u01de\u00f0\2\u0bbe\u0bbb\3"+
		"\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u0bc0\3\2\2\2\u0bc0\u0bc1\7\u0086\2\2"+
		"\u0bc1\u0bc6\5\u00b0Y\2\u0bc2\u0bc3\7\u03b3\2\2\u0bc3\u0bc5\5\u00b0Y\2"+
		"\u0bc4\u0bc2\3\2\2\2\u0bc5\u0bc8\3\2\2\2\u0bc6\u0bc4\3\2\2\2\u0bc6\u0bc7"+
		"\3\2\2\2\u0bc7\u0bcb\3\2\2\2\u0bc8\u0bc6\3\2\2\2\u0bc9\u0bca\7\u00a6\2"+
		"\2\u0bca\u0bcc\5\u0222\u0112\2\u0bcb\u0bc9\3\2\2\2\u0bcb\u0bcc\3\2\2\2"+
		"\u0bcc\u0bce\3\2\2\2\u0bcd\u0bcf\5\u00c4c\2\u0bce\u0bcd\3\2\2\2\u0bce"+
		"\u0bcf\3\2\2\2\u0bcf\u0bd1\3\2\2\2\u0bd0\u0bd2\5\u00ecw\2\u0bd1\u0bd0"+
		"\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u00c1\3\2\2\2\u0bd3\u0bd5\7\u00a0\2"+
		"\2\u0bd4\u0bd6\7\\\2\2\u0bd5\u0bd4\3\2\2\2\u0bd5\u0bd6\3\2\2\2\u0bd6\u0bd8"+
		"\3\2\2\2\u0bd7\u0bd9\7C\2\2\u0bd8\u0bd7\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9"+
		"\u0bda\3\2\2\2\u0bda\u0bdb\5\u00c8e\2\u0bdb\u0bdc\7\u0086\2\2\u0bdc\u0be1"+
		"\5\u00b0Y\2\u0bdd\u0bde\7\u03b3\2\2\u0bde\u0be0\5\u00b0Y\2\u0bdf\u0bdd"+
		"\3\2\2\2\u0be0\u0be3\3\2\2\2\u0be1\u0bdf\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2"+
		"\u0be6\3\2\2\2\u0be3\u0be1\3\2\2\2\u0be4\u0be5\7\u00a6\2\2\u0be5\u0be7"+
		"\5\u0222\u0112\2\u0be6\u0be4\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u00c3\3"+
		"\2\2\2\u0be8\u0be9\7l\2\2\u0be9\u0bea\7\21\2\2\u0bea\u0bef\5\u00c6d\2"+
		"\u0beb\u0bec\7\u03b3\2\2\u0bec\u0bee\5\u00c6d\2\u0bed\u0beb\3\2\2\2\u0bee"+
		"\u0bf1\3\2\2\2\u0bef\u0bed\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u00c5\3\2"+
		"\2\2\u0bf1\u0bef\3\2\2\2\u0bf2\u0bf4\5\u0222\u0112\2\u0bf3\u0bf5\t)\2"+
		"\2\u0bf4\u0bf3\3\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u00c7\3\2\2\2\u0bf6\u0bfb"+
		"\5\u00caf\2\u0bf7\u0bf8\7\u03b3\2\2\u0bf8\u0bfa\5\u00caf\2\u0bf9\u0bf7"+
		"\3\2\2\2\u0bfa\u0bfd\3\2\2\2\u0bfb\u0bf9\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc"+
		"\u00c9\3\2\2\2\u0bfd\u0bfb\3\2\2\2\u0bfe\u0c02\5\u00ccg\2\u0bff\u0c01"+
		"\5\u00d0i\2\u0c00\u0bff\3\2\2\2\u0c01\u0c04\3\2\2\2\u0c02\u0c00\3\2\2"+
		"\2\u0c02\u0c03\3\2\2\2\u0c03\u0c10\3\2\2\2\u0c04\u0c02\3\2\2\2\u0c05\u0c06"+
		"\7\u03b1\2\2\u0c06\u0c0a\5\u00ccg\2\u0c07\u0c09\5\u00d0i\2\u0c08\u0c07"+
		"\3\2\2\2\u0c09\u0c0c\3\2\2\2\u0c0a\u0c08\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b"+
		"\u0c0d\3\2\2\2\u0c0c\u0c0a\3\2\2\2\u0c0d\u0c0e\7\u03b2\2\2\u0c0e\u0c10"+
		"\3\2\2\2\u0c0f\u0bfe\3\2\2\2\u0c0f\u0c05\3\2\2\2\u0c10\u00cb\3\2\2\2\u0c11"+
		"\u0c17\5\u01c4\u00e3\2\u0c12\u0c13\7p\2\2\u0c13\u0c14\7\u03b1\2\2\u0c14"+
		"\u0c15\5\u01fe\u0100\2\u0c15\u0c16\7\u03b2\2\2\u0c16\u0c18\3\2\2\2\u0c17"+
		"\u0c12\3\2\2\2\u0c17\u0c18\3\2\2\2\u0c18\u0c1d\3\2\2\2\u0c19\u0c1b\7\f"+
		"\2\2\u0c1a\u0c19\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c"+
		"\u0c1e\5\u01de\u00f0\2\u0c1d\u0c1a\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u0c27"+
		"\3\2\2\2\u0c1f\u0c24\5\u00ceh\2\u0c20\u0c21\7\u03b3\2\2\u0c21\u0c23\5"+
		"\u00ceh\2\u0c22\u0c20\3\2\2\2\u0c23\u0c26\3\2\2\2\u0c24\u0c22\3\2\2\2"+
		"\u0c24\u0c25\3\2\2\2\u0c25\u0c28\3\2\2\2\u0c26\u0c24\3\2\2\2\u0c27\u0c1f"+
		"\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c3a\3\2\2\2\u0c29\u0c2f\5\u00d2j"+
		"\2\u0c2a\u0c2b\7\u03b1\2\2\u0c2b\u0c2c\5\u00d2j\2\u0c2c\u0c2d\7\u03b2"+
		"\2\2\u0c2d\u0c2f\3\2\2\2\u0c2e\u0c29\3\2\2\2\u0c2e\u0c2a\3\2\2\2\u0c2f"+
		"\u0c31\3\2\2\2\u0c30\u0c32\7\f\2\2\u0c31\u0c30\3\2\2\2\u0c31\u0c32\3\2"+
		"\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c34\5\u01de\u00f0\2\u0c34\u0c3a\3\2\2"+
		"\2\u0c35\u0c36\7\u03b1\2\2\u0c36\u0c37\5\u00c8e\2\u0c37\u0c38\7\u03b2"+
		"\2\2\u0c38\u0c3a\3\2\2\2\u0c39\u0c11\3\2\2\2\u0c39\u0c2e\3\2\2\2\u0c39"+
		"\u0c35\3\2\2\2\u0c3a\u00cd\3\2\2\2\u0c3b\u0c3c\t*\2\2\u0c3c\u0c45\t\23"+
		"\2\2\u0c3d\u0c43\79\2\2\u0c3e\u0c44\7N\2\2\u0c3f\u0c40\7l\2\2\u0c40\u0c44"+
		"\7\21\2\2\u0c41\u0c42\7?\2\2\u0c42\u0c44\7\21\2\2\u0c43\u0c3e\3\2\2\2"+
		"\u0c43\u0c3f\3\2\2\2\u0c43\u0c41\3\2\2\2\u0c44\u0c46\3\2\2\2\u0c45\u0c3d"+
		"\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46\u0c47\3\2\2\2\u0c47\u0c48\7\u03b1\2"+
		"\2\u0c48\u0c49\5\u01fe\u0100\2\u0c49\u0c4a\7\u03b2\2\2\u0c4a\u00cf\3\2"+
		"\2\2\u0c4b\u0c4d\t+\2\2\u0c4c\u0c4b\3\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d"+
		"\u0c4e\3\2\2\2\u0c4e\u0c4f\7N\2\2\u0c4f\u0c57\5\u00ccg\2\u0c50\u0c51\7"+
		"g\2\2\u0c51\u0c58\5\u0222\u0112\2\u0c52\u0c53\7\u00a3\2\2\u0c53\u0c54"+
		"\7\u03b1\2\2\u0c54\u0c55\5\u01fe\u0100\2\u0c55\u0c56\7\u03b2\2\2\u0c56"+
		"\u0c58\3\2\2\2\u0c57\u0c50\3\2\2\2\u0c57\u0c52\3\2\2\2\u0c57\u0c58\3\2"+
		"\2\2\u0c58\u0c78\3\2\2\2\u0c59\u0c5a\7\u0093\2\2\u0c5a\u0c5d\5\u00ccg"+
		"\2\u0c5b\u0c5c\7g\2\2\u0c5c\u0c5e\5\u0222\u0112\2\u0c5d\u0c5b\3\2\2\2"+
		"\u0c5d\u0c5e\3\2\2\2\u0c5e\u0c78\3\2\2\2\u0c5f\u0c61\t,\2\2\u0c60\u0c62"+
		"\7n\2\2\u0c61\u0c60\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63"+
		"\u0c64\7N\2\2\u0c64\u0c6c\5\u00ccg\2\u0c65\u0c66\7g\2\2\u0c66\u0c6d\5"+
		"\u0222\u0112\2\u0c67\u0c68\7\u00a3\2\2\u0c68\u0c69\7\u03b1\2\2\u0c69\u0c6a"+
		"\5\u01fe\u0100\2\u0c6a\u0c6b\7\u03b2\2\2\u0c6b\u0c6d\3\2\2\2\u0c6c\u0c65"+
		"\3\2\2\2\u0c6c\u0c67\3\2\2\2\u0c6d\u0c78\3\2\2\2\u0c6e\u0c73\7b\2\2\u0c6f"+
		"\u0c71\t,\2\2\u0c70\u0c72\7n\2\2\u0c71\u0c70\3\2\2\2\u0c71\u0c72\3\2\2"+
		"\2\u0c72\u0c74\3\2\2\2\u0c73\u0c6f\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74\u0c75"+
		"\3\2\2\2\u0c75\u0c76\7N\2\2\u0c76\u0c78\5\u00ccg\2\u0c77\u0c4c\3\2\2\2"+
		"\u0c77\u0c59\3\2\2\2\u0c77\u0c5f\3\2\2\2\u0c77\u0c6e\3\2\2\2\u0c78\u00d1"+
		"\3\2\2\2\u0c79\u0c7a\5\u00aaV\2\u0c7a\u00d3\3\2\2\2\u0c7b\u0c7c\7\u03b1"+
		"\2\2\u0c7c\u0c7d\5\u00d8m\2\u0c7d\u0c7e\7\u03b2\2\2\u0c7e\u0c84\3\2\2"+
		"\2\u0c7f\u0c80\7\u03b1\2\2\u0c80\u0c81\5\u00d4k\2\u0c81\u0c82\7\u03b2"+
		"\2\2\u0c82\u0c84\3\2\2\2\u0c83\u0c7b\3\2\2\2\u0c83\u0c7f\3\2\2\2\u0c84"+
		"\u00d5\3\2\2\2\u0c85\u0c86\7\u03b1\2\2\u0c86\u0c87\5\u00dan\2\u0c87\u0c88"+
		"\7\u03b2\2\2\u0c88\u0c8e\3\2\2\2\u0c89\u0c8a\7\u03b1\2\2\u0c8a\u0c8b\5"+
		"\u00d6l\2\u0c8b\u0c8c\7\u03b2\2\2\u0c8c\u0c8e\3\2\2\2\u0c8d\u0c85\3\2"+
		"\2\2\u0c8d\u0c89\3\2\2\2\u0c8e\u00d7\3\2\2\2\u0c8f\u0c93\7\u0085\2\2\u0c90"+
		"\u0c92\5\u00e0q\2\u0c91\u0c90\3\2\2\2\u0c92\u0c95\3\2\2\2\u0c93\u0c91"+
		"\3\2\2\2\u0c93\u0c94\3\2\2\2\u0c94\u0c96\3\2\2\2\u0c95\u0c93\3\2\2\2\u0c96"+
		"\u0c98\5\u00e2r\2\u0c97\u0c99\5\u00e6t\2\u0c98\u0c97\3\2\2\2\u0c98\u0c99"+
		"\3\2\2\2\u0c99\u0c9b\3\2\2\2\u0c9a\u0c9c\5\u00e8u\2\u0c9b\u0c9a\3\2\2"+
		"\2\u0c9b\u0c9c\3\2\2\2\u0c9c\u0c9e\3\2\2\2\u0c9d\u0c9f\5\u00c4c\2\u0c9e"+
		"\u0c9d\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca1\3\2\2\2\u0ca0\u0ca2\5\u00ec"+
		"w\2\u0ca1\u0ca0\3\2\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2\u00d9\3\2\2\2\u0ca3"+
		"\u0ca7\7\u0085\2\2\u0ca4\u0ca6\5\u00e0q\2\u0ca5\u0ca4\3\2\2\2\u0ca6\u0ca9"+
		"\3\2\2\2\u0ca7\u0ca5\3\2\2\2\u0ca7\u0ca8\3\2\2\2\u0ca8\u0caa\3\2\2\2\u0ca9"+
		"\u0ca7\3\2\2\2\u0caa\u0cac\5\u00e2r\2\u0cab\u0cad\5\u00e8u\2\u0cac\u0cab"+
		"\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad\u0caf\3\2\2\2\u0cae\u0cb0\5\u00c4c"+
		"\2\u0caf\u0cae\3\2\2\2\u0caf\u0cb0\3\2\2\2\u0cb0\u0cb2\3\2\2\2\u0cb1\u0cb3"+
		"\5\u00ecw\2\u0cb2\u0cb1\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u00db\3\2\2"+
		"\2\u0cb4\u0cb6\7\u009c\2\2\u0cb5\u0cb7\t%\2\2\u0cb6\u0cb5\3\2\2\2\u0cb6"+
		"\u0cb7\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8\u0cb9\5\u00d6l\2\u0cb9\u00dd"+
		"\3\2\2\2\u0cba\u0cbc\7\u009c\2\2\u0cbb\u0cbd\t%\2\2\u0cbc\u0cbb\3\2\2"+
		"\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0cc0\3\2\2\2\u0cbe\u0cc1\5\u00dan\2\u0cbf"+
		"\u0cc1\5\u00d6l\2\u0cc0\u0cbe\3\2\2\2\u0cc0\u0cbf\3\2\2\2\u0cc1\u00df"+
		"\3\2\2\2\u0cc2\u0ccb\t-\2\2\u0cc3\u0ccb\7A\2\2\u0cc4\u0ccb\7\u0093\2\2"+
		"\u0cc5\u0ccb\7\u0090\2\2\u0cc6\u0ccb\7\u008e\2\2\u0cc7\u0ccb\7\u01f1\2"+
		"\2\u0cc8\u0ccb\t.\2\2\u0cc9\u0ccb\7\u008f\2\2\u0cca\u0cc2\3\2\2\2\u0cca"+
		"\u0cc3\3\2\2\2\u0cca\u0cc4\3\2\2\2\u0cca\u0cc5\3\2\2\2\u0cca\u0cc6\3\2"+
		"\2\2\u0cca\u0cc7\3\2\2\2\u0cca\u0cc8\3\2\2\2\u0cca\u0cc9\3\2\2\2\u0ccb"+
		"\u00e1\3\2\2\2\u0ccc\u0ccf\7\u03a1\2\2\u0ccd\u0ccf\5\u00e4s\2\u0cce\u0ccc"+
		"\3\2\2\2\u0cce\u0ccd\3\2\2\2\u0ccf\u0cd4\3\2\2\2\u0cd0\u0cd1\7\u03b3\2"+
		"\2\u0cd1\u0cd3\5\u00e4s\2\u0cd2\u0cd0\3\2\2\2\u0cd3\u0cd6\3\2\2\2\u0cd4"+
		"\u0cd2\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u00e3\3\2\2\2\u0cd6\u0cd4\3\2"+
		"\2\2\u0cd7\u0cd8\5\u01c6\u00e4\2\u0cd8\u0cd9\7\u03b0\2\2\u0cd9\u0cda\7"+
		"\u03a1\2\2\u0cda\u0cf5\3\2\2\2\u0cdb\u0ce0\5\u01c8\u00e5\2\u0cdc\u0cde"+
		"\7\f\2\2\u0cdd\u0cdc\3\2\2\2\u0cdd\u0cde\3\2\2\2\u0cde\u0cdf\3\2\2\2\u0cdf"+
		"\u0ce1\5\u01de\u00f0\2\u0ce0\u0cdd\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0cf5"+
		"\3\2\2\2\u0ce2\u0ce7\5\u0214\u010b\2\u0ce3\u0ce5\7\f\2\2\u0ce4\u0ce3\3"+
		"\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6\u0ce8\5\u01de\u00f0"+
		"\2\u0ce7\u0ce4\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8\u0cf5\3\2\2\2\u0ce9\u0cea"+
		"\7\u03cb\2\2\u0cea\u0cec\7\u0398\2\2\u0ceb\u0ce9\3\2\2\2\u0ceb\u0cec\3"+
		"\2\2\2\u0cec\u0ced\3\2\2\2\u0ced\u0cf2\5\u0222\u0112\2\u0cee\u0cf0\7\f"+
		"\2\2\u0cef\u0cee\3\2\2\2\u0cef\u0cf0\3\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1"+
		"\u0cf3\5\u01de\u00f0\2\u0cf2\u0cef\3\2\2\2\u0cf2\u0cf3\3\2\2\2\u0cf3\u0cf5"+
		"\3\2\2\2\u0cf4\u0cd7\3\2\2\2\u0cf4\u0cdb\3\2\2\2\u0cf4\u0ce2\3\2\2\2\u0cf4"+
		"\u0ceb\3\2\2\2\u0cf5\u00e5\3\2\2\2\u0cf6\u0cf9\7K\2\2\u0cf7\u0cfa\7\u03cb"+
		"\2\2\u0cf8\u0cfa\5\u01de\u00f0\2\u0cf9\u0cf7\3\2\2\2\u0cf9\u0cf8\3\2\2"+
		"\2\u0cfa\u0d02\3\2\2\2\u0cfb\u0cfe\7\u03b3\2\2\u0cfc\u0cff\7\u03cb\2\2"+
		"\u0cfd\u0cff\5\u01de\u00f0\2\u0cfe\u0cfc\3\2\2\2\u0cfe\u0cfd\3\2\2\2\u0cff"+
		"\u0d01\3\2\2\2\u0d00\u0cfb\3\2\2\2\u0d01\u0d04\3\2\2\2\u0d02\u0d00\3\2"+
		"\2\2\u0d02\u0d03\3\2\2\2\u0d03\u0d33\3\2\2\2\u0d04\u0d02\3\2\2\2\u0d05"+
		"\u0d06\7K\2\2\u0d06\u0d07\7\u012f\2\2\u0d07\u0d33\7\u03c0\2\2\u0d08\u0d09"+
		"\7K\2\2\u0d09\u0d0a\7o\2\2\u0d0a\u0d0e\7\u03c0\2\2\u0d0b\u0d0c\7\27\2"+
		"\2\u0d0c\u0d0d\7\u0086\2\2\u0d0d\u0d0f\5\u01d0\u00e9\2\u0d0e\u0d0b\3\2"+
		"\2\2\u0d0e\u0d0f\3\2\2\2\u0d0f\u0d23\3\2\2\2\u0d10\u0d14\t\"\2\2\u0d11"+
		"\u0d12\7\u0095\2\2\u0d12\u0d13\7\21\2\2\u0d13\u0d15\7\u03c0\2\2\u0d14"+
		"\u0d11\3\2\2\2\u0d14\u0d15\3\2\2\2\u0d15\u0d1c\3\2\2\2\u0d16\u0d18\7j"+
		"\2\2\u0d17\u0d16\3\2\2\2\u0d17\u0d18\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19"+
		"\u0d1a\7\62\2\2\u0d1a\u0d1b\7\21\2\2\u0d1b\u0d1d\7\u03c0\2\2\u0d1c\u0d17"+
		"\3\2\2\2\u0d1c\u0d1d\3\2\2\2\u0d1d\u0d21\3\2\2\2\u0d1e\u0d1f\7\63\2\2"+
		"\u0d1f\u0d20\7\21\2\2\u0d20\u0d22\7\u03c0\2\2\u0d21\u0d1e\3\2\2\2\u0d21"+
		"\u0d22\3\2\2\2\u0d22\u0d24\3\2\2\2\u0d23\u0d10\3\2\2\2\u0d23\u0d24\3\2"+
		"\2\2\u0d24\u0d30\3\2\2\2\u0d25\u0d29\7X\2\2\u0d26\u0d27\7\u0092\2\2\u0d27"+
		"\u0d28\7\21\2\2\u0d28\u0d2a\7\u03c0\2\2\u0d29\u0d26\3\2\2\2\u0d29\u0d2a"+
		"\3\2\2\2\u0d2a\u0d2e\3\2\2\2\u0d2b\u0d2c\7\u0095\2\2\u0d2c\u0d2d\7\21"+
		"\2\2\u0d2d\u0d2f\7\u03c0\2\2\u0d2e\u0d2b\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f"+
		"\u0d31\3\2\2\2\u0d30\u0d25\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31\u0d33\3\2"+
		"\2\2\u0d32\u0cf6\3\2\2\2\u0d32\u0d05\3\2\2\2\u0d32\u0d08\3\2\2\2\u0d33"+
		"\u00e7\3\2\2\2\u0d34\u0d35\7<\2\2\u0d35\u0d38\5\u00c8e\2\u0d36\u0d37\7"+
		"\u00a6\2\2\u0d37\u0d39\5\u0222\u0112\2\u0d38\u0d36\3\2\2\2\u0d38\u0d39"+
		"\3\2\2\2\u0d39\u0d48\3\2\2\2\u0d3a\u0d3b\7?\2\2\u0d3b\u0d3c\7\21\2\2\u0d3c"+
		"\u0d41\5\u00eav\2\u0d3d\u0d3e\7\u03b3\2\2\u0d3e\u0d40\5\u00eav\2\u0d3f"+
		"\u0d3d\3\2\2\2\u0d40\u0d43\3\2\2\2\u0d41\u0d3f\3\2\2\2\u0d41\u0d42\3\2"+
		"\2\2\u0d42\u0d46\3\2\2\2\u0d43\u0d41\3\2\2\2\u0d44\u0d45\7\u00a8\2\2\u0d45"+
		"\u0d47\7\u01d8\2\2\u0d46\u0d44\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d49"+
		"\3\2\2\2\u0d48\u0d3a\3\2\2\2\u0d48\u0d49\3\2\2\2\u0d49\u0d4c\3\2\2\2\u0d4a"+
		"\u0d4b\7@\2\2\u0d4b\u0d4d\5\u0222\u0112\2\u0d4c\u0d4a\3\2\2\2\u0d4c\u0d4d"+
		"\3\2\2\2\u0d4d\u00e9\3\2\2\2\u0d4e\u0d50\5\u0222\u0112\2\u0d4f\u0d51\t"+
		")\2\2\u0d50\u0d4f\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u00eb\3\2\2\2\u0d52"+
		"\u0d5d\7V\2\2\u0d53\u0d54\5\u01e4\u00f3\2\u0d54\u0d55\7\u03b3\2\2\u0d55"+
		"\u0d57\3\2\2\2\u0d56\u0d53\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u0d58\3\2"+
		"\2\2\u0d58\u0d5e\5\u01e4\u00f3\2\u0d59\u0d5a\5\u01e4\u00f3\2\u0d5a\u0d5b"+
		"\7\u01a1\2\2\u0d5b\u0d5c\5\u01e4\u00f3\2\u0d5c\u0d5e\3\2\2\2\u0d5d\u0d56"+
		"\3\2\2\2\u0d5d\u0d59\3\2\2\2\u0d5e\u00ed\3\2\2\2\u0d5f\u0d60\7\u01f5\2"+
		"\2\u0d60\u0d69\7\u0209\2\2\u0d61\u0d66\5\u0104\u0083\2\u0d62\u0d63\7\u03b3"+
		"\2\2\u0d63\u0d65\5\u0104\u0083\2\u0d64\u0d62\3\2\2\2\u0d65\u0d68\3\2\2"+
		"\2\u0d66\u0d64\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d6a\3\2\2\2\u0d68\u0d66"+
		"\3\2\2\2\u0d69\u0d61\3\2\2\2\u0d69\u0d6a\3\2\2\2\u0d6a\u00ef\3\2\2\2\u0d6b"+
		"\u0d6d\7\u0103\2\2\u0d6c\u0d6e\7\u021d\2\2\u0d6d\u0d6c\3\2\2\2\u0d6d\u0d6e"+
		"\3\2\2\2\u0d6e\u00f1\3\2\2\2\u0d6f\u0d71\7\u0116\2\2\u0d70\u0d72\7\u021d"+
		"\2\2\u0d71\u0d70\3\2\2\2\u0d71\u0d72\3\2\2\2\u0d72\u0d78\3\2\2\2\u0d73"+
		"\u0d75\7\13\2\2\u0d74\u0d76\7\u019d\2\2\u0d75\u0d74\3\2\2\2\u0d75\u0d76"+
		"\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d79\7\u010a\2\2\u0d78\u0d73\3\2\2"+
		"\2\u0d78\u0d79\3\2\2\2\u0d79\u0d7e\3\2\2\2\u0d7a\u0d7c\7\u019d\2\2\u0d7b"+
		"\u0d7a\3\2\2\2\u0d7b\u0d7c\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d\u0d7f\7y"+
		"\2\2\u0d7e\u0d7b\3\2\2\2\u0d7e\u0d7f\3\2\2\2\u0d7f\u00f3\3\2\2\2\u0d80"+
		"\u0d82\7\u01d7\2\2\u0d81\u0d83\7\u021d\2\2\u0d82\u0d81\3\2\2\2\u0d82\u0d83"+
		"\3\2\2\2\u0d83\u0d89\3\2\2\2\u0d84\u0d86\7\13\2\2\u0d85\u0d87\7\u019d"+
		"\2\2\u0d86\u0d85\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87\u0d88\3\2\2\2\u0d88"+
		"\u0d8a\7\u010a\2\2\u0d89\u0d84\3\2\2\2\u0d89\u0d8a\3\2\2\2\u0d8a\u0d8f"+
		"\3\2\2\2\u0d8b\u0d8d\7\u019d\2\2\u0d8c\u0d8b\3\2\2\2\u0d8c\u0d8d\3\2\2"+
		"\2\u0d8d\u0d8e\3\2\2\2\u0d8e\u0d90\7y\2\2\u0d8f\u0d8c\3\2\2\2\u0d8f\u0d90"+
		"\3\2\2\2\u0d90\u00f5\3\2\2\2\u0d91\u0d92\7\u01dd\2\2\u0d92\u0d93\5\u01de"+
		"\u00f0\2\u0d93\u00f7\3\2\2\2\u0d94\u0d96\7\u01d7\2\2\u0d95\u0d97\7\u021d"+
		"\2\2\u0d96\u0d95\3\2\2\2\u0d96\u0d97\3\2\2\2\u0d97\u0d98\3\2\2\2\u0d98"+
		"\u0d9a\7\u0097\2\2\u0d99\u0d9b\7\u01dd\2\2\u0d9a\u0d99\3\2\2\2\u0d9a\u0d9b"+
		"\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0d9d\5\u01de\u00f0\2\u0d9d\u00f9\3"+
		"\2\2\2\u0d9e\u0d9f\7y\2\2\u0d9f\u0da0\7\u01dd\2\2\u0da0\u0da1\5\u01de"+
		"\u00f0\2\u0da1\u00fb\3\2\2\2\u0da2\u0da3\7Z\2\2\u0da3\u0da4\7\u022f\2"+
		"\2\u0da4\u0da9\5\u0106\u0084\2\u0da5\u0da6\7\u03b3\2\2\u0da6\u0da8\5\u0106"+
		"\u0084\2\u0da7\u0da5\3\2\2\2\u0da8\u0dab\3\2\2\2\u0da9\u0da7\3\2\2\2\u0da9"+
		"\u0daa\3\2\2\2\u0daa\u00fd\3\2\2\2\u0dab\u0da9\3\2\2\2\u0dac\u0dad\7\u009e"+
		"\2\2\u0dad\u0dae\7\u022f\2\2\u0dae\u00ff\3\2\2\2\u0daf\u0db0\7\u0086\2"+
		"\2\u0db0\u0db1\7\u00ff\2\2\u0db1\u0db2\7\u03a8\2\2\u0db2\u0db3\t\26\2"+
		"\2\u0db3\u0101\3\2\2\2\u0db4\u0db6\7\u0086\2\2\u0db5\u0db7\t/\2\2\u0db6"+
		"\u0db5\3\2\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0db9\7\u0209"+
		"\2\2\u0db9\u0dbe\5\u0108\u0085\2\u0dba\u0dbb\7\u03b3\2\2\u0dbb\u0dbd\5"+
		"\u0108\u0085\2\u0dbc\u0dba\3\2\2\2\u0dbd\u0dc0\3\2\2\2\u0dbe\u0dbc\3\2"+
		"\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf\u0103\3\2\2\2\u0dc0\u0dbe\3\2\2\2\u0dc1"+
		"\u0dc2\7\u00a8\2\2\u0dc2\u0dc3\7\u011d\2\2\u0dc3\u0dc9\7\u01e8\2\2\u0dc4"+
		"\u0dc5\7u\2\2\u0dc5\u0dc9\7\u00a9\2\2\u0dc6\u0dc7\7u\2\2\u0dc7\u0dc9\7"+
		"\u01a6\2\2\u0dc8\u0dc1\3\2\2\2\u0dc8\u0dc4\3\2\2\2\u0dc8\u0dc6\3\2\2\2"+
		"\u0dc9\u0105\3\2\2\2\u0dca\u0dcf\5\u01c4\u00e3\2\u0dcb\u0dcd\7\f\2\2\u0dcc"+
		"\u0dcb\3\2\2\2\u0dcc\u0dcd\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u0dd0\5\u01de"+
		"\u00f0\2\u0dcf\u0dcc\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u0dd9\3\2\2\2\u0dd1"+
		"\u0dd3\7u\2\2\u0dd2\u0dd4\7\u0171\2\2\u0dd3\u0dd2\3\2\2\2\u0dd3\u0dd4"+
		"\3\2\2\2\u0dd4\u0dda\3\2\2\2\u0dd5\u0dd7\7\\\2\2\u0dd6\u0dd5\3\2\2\2\u0dd6"+
		"\u0dd7\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dda\7\u00a9\2\2\u0dd9\u0dd1"+
		"\3\2\2\2\u0dd9\u0dd6\3\2\2\2\u0dda\u0107\3\2\2\2\u0ddb\u0ddc\7\u0167\2"+
		"\2\u0ddc\u0ddd\7\u016f\2\2\u0ddd\u0de3\5\u010a\u0086\2\u0dde\u0ddf\7u"+
		"\2\2\u0ddf\u0de3\7\u00a9\2\2\u0de0\u0de1\7u\2\2\u0de1\u0de3\7\u01a6\2"+
		"\2\u0de2\u0ddb\3\2\2\2\u0de2\u0dde\3\2\2\2\u0de2\u0de0\3\2\2\2\u0de3\u0109"+
		"\3\2\2\2\u0de4\u0de5\7\u026b\2\2\u0de5\u0dec\7u\2\2\u0de6\u0de7\7u\2\2"+
		"\u0de7\u0dec\7\u026c\2\2\u0de8\u0de9\7u\2\2\u0de9\u0dec\7\u026d\2\2\u0dea"+
		"\u0dec\7\u026e\2\2\u0deb\u0de4\3\2\2\2\u0deb\u0de6\3\2\2\2\u0deb\u0de8"+
		"\3\2\2\2\u0deb\u0dea\3\2\2\2\u0dec\u010b\3\2\2\2\u0ded\u0dee\7\26\2\2"+
		"\u0dee\u0def\7\u0174\2\2\u0def\u0df0\7\u0097\2\2\u0df0\u0df5\5\u011e\u0090"+
		"\2\u0df1\u0df2\7\u03b3\2\2\u0df2\u0df4\5\u011e\u0090\2\u0df3\u0df1\3\2"+
		"\2\2\u0df4\u0df7\3\2\2\2\u0df5\u0df3\3\2\2\2\u0df5\u0df6\3\2\2\2\u0df6"+
		"\u0df9\3\2\2\2\u0df7\u0df5\3\2\2\2\u0df8\u0dfa\5\u0126\u0094\2\u0df9\u0df8"+
		"\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u010d\3\2\2\2\u0dfb\u0dfc\7\26\2\2"+
		"\u0dfc\u0dfd\7\u01d3\2\2\u0dfd\u0dfe\7\u0149\2\2\u0dfe\u0e03\5\u0128\u0095"+
		"\2\u0dff\u0e00\7\u03b3\2\2\u0e00\u0e02\5\u0128\u0095\2\u0e01\u0dff\3\2"+
		"\2\2\u0e02\u0e05\3\2\2\2\u0e03\u0e01\3\2\2\2\u0e03\u0e04\3\2\2\2\u0e04"+
		"\u010f\3\2\2\2\u0e05\u0e03\3\2\2\2\u0e06\u0e07\7s\2\2\u0e07\u0e08\t\60"+
		"\2\2\u0e08\u0e09\7\u0173\2\2\u0e09\u0e0a\t\61\2\2\u0e0a\u0e0b\7\u03c0"+
		"\2\2\u0e0b\u0111\3\2\2\2\u0e0c\u0e0d\7\u01d4\2\2\u0e0d\u0e0e\7\u0174\2"+
		"\2\u0e0e\u0113\3\2\2\2\u0e0f\u0e10\7\u01d4\2\2\u0e10\u0e12\7\u01e6\2\2"+
		"\u0e11\u0e13\7\b\2\2\u0e12\u0e11\3\2\2\2\u0e12\u0e13\3\2\2\2\u0e13\u0e15"+
		"\3\2\2\2\u0e14\u0e16\5\u0126\u0094\2\u0e15\u0e14\3\2\2\2\u0e15\u0e16\3"+
		"\2\2\2\u0e16\u0115\3\2\2\2\u0e17\u0e18\7\u01f5\2\2\u0e18\u0e21\7\u01e6"+
		"\2\2\u0e19\u0e1e\5\u012a\u0096\2\u0e1a\u0e1b\7\u03b3\2\2\u0e1b\u0e1d\5"+
		"\u012a\u0096\2\u0e1c\u0e1a\3\2\2\2\u0e1d\u0e20\3\2\2\2\u0e1e\u0e1c\3\2"+
		"\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e22\3\2\2\2\u0e20\u0e1e\3\2\2\2\u0e21"+
		"\u0e19\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e23\3\2\2\2\u0e23\u0e25\7\u0211"+
		"\2\2\u0e24\u0e26\5\u012c\u0097\2\u0e25\u0e24\3\2\2\2\u0e25\u0e26\3\2\2"+
		"\2\u0e26\u0e2a\3\2\2\2\u0e27\u0e29\5\u012e\u0098\2\u0e28\u0e27\3\2\2\2"+
		"\u0e29\u0e2c\3\2\2\2\u0e2a\u0e28\3\2\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u0e2e"+
		"\3\2\2\2\u0e2c\u0e2a\3\2\2\2\u0e2d\u0e2f\5\u0126\u0094\2\u0e2e\u0e2d\3"+
		"\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0117\3\2\2\2\u0e30\u0e31\7\u01fb\2\2"+
		"\u0e31\u0e3a\7\u01e6\2\2\u0e32\u0e37\5\u012a\u0096\2\u0e33\u0e34\7\u03b3"+
		"\2\2\u0e34\u0e36\5\u012a\u0096\2\u0e35\u0e33\3\2\2\2\u0e36\u0e39\3\2\2"+
		"\2\u0e37\u0e35\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u0e3b\3\2\2\2\u0e39\u0e37"+
		"\3\2\2\2\u0e3a\u0e32\3\2\2\2\u0e3a\u0e3b\3\2\2\2\u0e3b\u0119\3\2\2\2\u0e3c"+
		"\u0e3d\7\u01f5\2\2\u0e3d\u0e3e\7\u0154\2\2\u0e3e\u011b\3\2\2\2\u0e3f\u0e40"+
		"\7\u01f5\2\2\u0e40\u0e41\7\u0154\2\2\u0e41\u011d\3\2\2\2\u0e42\u0e43\5"+
		"\u0120\u0091\2\u0e43\u0e44\7\u03a8\2\2\u0e44\u0e45\7\u03c0\2\2\u0e45\u0e60"+
		"\3\2\2\2\u0e46\u0e47\5\u0122\u0092\2\u0e47\u0e48\7\u03a8\2\2\u0e48\u0e49"+
		"\5\u01e4\u00f3\2\u0e49\u0e60\3\2\2\2\u0e4a\u0e4b\5\u0124\u0093\2\u0e4b"+
		"\u0e4c\7\u03a8\2\2\u0e4c\u0e4d\t\26\2\2\u0e4d\u0e60\3\2\2\2\u0e4e\u0e4f"+
		"\7\u0178\2\2\u0e4f\u0e50\7\u03a8\2\2\u0e50\u0e60\7\u03c3\2\2\u0e51\u0e52"+
		"\7\u015b\2\2\u0e52\u0e53\7\u03a8\2\2\u0e53\u0e5c\7\u03b1\2\2\u0e54\u0e59"+
		"\5\u01de\u00f0\2\u0e55\u0e56\7\u03b3\2\2\u0e56\u0e58\5\u01de\u00f0\2\u0e57"+
		"\u0e55\3\2\2\2\u0e58\u0e5b\3\2\2\2\u0e59\u0e57\3\2\2\2\u0e59\u0e5a\3\2"+
		"\2\2\u0e5a\u0e5d\3\2\2\2\u0e5b\u0e59\3\2\2\2\u0e5c\u0e54\3\2\2\2\u0e5c"+
		"\u0e5d\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e60\7\u03b2\2\2\u0e5f\u0e42"+
		"\3\2\2\2\u0e5f\u0e46\3\2\2\2\u0e5f\u0e4a\3\2\2\2\u0e5f\u0e4e\3\2\2\2\u0e5f"+
		"\u0e51\3\2\2\2\u0e60\u011f\3\2\2\2\u0e61\u0e62\t\62\2\2\u0e62\u0121\3"+
		"\2\2\2\u0e63\u0e64\t\63\2\2\u0e64\u0123\3\2\2\2\u0e65\u0e66\t\64\2\2\u0e66"+
		"\u0125\3\2\2\2\u0e67\u0e68\79\2\2\u0e68\u0e69\7\u010c\2\2\u0e69\u0e6a"+
		"\7\u03c0\2\2\u0e6a\u0127\3\2\2\2\u0e6b\u0e6c\7\u01cc\2\2\u0e6c\u0e6d\7"+
		"\u03a8\2\2\u0e6d\u0e6e\7\u03b1\2\2\u0e6e\u0e6f\5\u01fe\u0100\2\u0e6f\u0e70"+
		"\7\u03b2\2\2\u0e70\u0e96\3\2\2\2\u0e71\u0e72\7\u01ce\2\2\u0e72\u0e73\7"+
		"\u03a8\2\2\u0e73\u0e74\7\u03b1\2\2\u0e74\u0e75\5\u01fe\u0100\2\u0e75\u0e76"+
		"\7\u03b2\2\2\u0e76\u0e96\3\2\2\2\u0e77\u0e78\7\u01cd\2\2\u0e78\u0e79\7"+
		"\u03a8\2\2\u0e79\u0e7a\7\u03b1\2\2\u0e7a\u0e7b\5\u0200\u0101\2\u0e7b\u0e7c"+
		"\7\u03b2\2\2\u0e7c\u0e96\3\2\2\2\u0e7d\u0e7e\7\u01cf\2\2\u0e7e\u0e7f\7"+
		"\u03a8\2\2\u0e7f\u0e80\7\u03b1\2\2\u0e80\u0e81\5\u0200\u0101\2\u0e81\u0e82"+
		"\7\u03b2\2\2\u0e82\u0e96\3\2\2\2\u0e83\u0e84\7\u01d1\2\2\u0e84\u0e85\7"+
		"\u03a8\2\2\u0e85\u0e86\7\u03b1\2\2\u0e86\u0e87\5\u020a\u0106\2\u0e87\u0e88"+
		"\7\u03b2\2\2\u0e88\u0e96\3\2\2\2\u0e89\u0e8a\7\u01d2\2\2\u0e8a\u0e8b\7"+
		"\u03a8\2\2\u0e8b\u0e8c\7\u03b1\2\2\u0e8c\u0e8d\5\u020a\u0106\2\u0e8d\u0e8e"+
		"\7\u03b2\2\2\u0e8e\u0e96\3\2\2\2\u0e8f\u0e90\7\u01d0\2\2\u0e90\u0e91\7"+
		"\u03a8\2\2\u0e91\u0e92\7\u03b1\2\2\u0e92\u0e93\5\u0202\u0102\2\u0e93\u0e94"+
		"\7\u03b2\2\2\u0e94\u0e96\3\2\2\2\u0e95\u0e6b\3\2\2\2\u0e95\u0e71\3\2\2"+
		"\2\u0e95\u0e77\3\2\2\2\u0e95\u0e7d\3\2\2\2\u0e95\u0e83\3\2\2\2\u0e95\u0e89"+
		"\3\2\2\2\u0e95\u0e8f\3\2\2\2\u0e96\u0129\3\2\2\2\u0e97\u0e98\t\65\2\2"+
		"\u0e98\u012b\3\2\2\2\u0e99\u0e9a\t\66\2\2\u0e9a\u0e9b\7\u03a8\2\2\u0e9b"+
		"\u0eac\5\u0130\u0099\2\u0e9c\u0e9d\7\u017a\2\2\u0e9d\u0e9e\7\u03a8\2\2"+
		"\u0e9e\u0e9f\7\u03c0\2\2\u0e9f\u0ea0\7\u03b3\2\2\u0ea0\u0ea1\7\u017b\2"+
		"\2\u0ea1\u0ea2\7\u03a8\2\2\u0ea2\u0eac\5\u01e4\u00f3\2\u0ea3\u0ea4\7\u01c6"+
		"\2\2\u0ea4\u0ea5\7\u03a8\2\2\u0ea5\u0ea6\7\u03c0\2\2\u0ea6\u0ea7\7\u03b3"+
		"\2\2\u0ea7\u0ea8\7\u01c7\2\2\u0ea8\u0ea9\7\u03a8\2\2\u0ea9\u0eac\5\u01e4"+
		"\u00f3\2\u0eaa\u0eac\7\u01ef\2\2\u0eab\u0e99\3\2\2\2\u0eab\u0e9c\3\2\2"+
		"\2\u0eab\u0ea3\3\2\2\2\u0eab\u0eaa\3\2\2\2\u0eac\u012d\3\2\2\2\u0ead\u0eae"+
		"\7\u0213\2\2\u0eae\u0eaf\7\u03a8\2\2\u0eaf\u0eba\7\u03c0\2\2\u0eb0\u0eb1"+
		"\7\u01b1\2\2\u0eb1\u0eb2\7\u03a8\2\2\u0eb2\u0eba\7\u03c0\2\2\u0eb3\u0eb4"+
		"\7\u0126\2\2\u0eb4\u0eb5\7\u03a8\2\2\u0eb5\u0eba\7\u03c0\2\2\u0eb6\u0eb7"+
		"\7\u01b4\2\2\u0eb7\u0eb8\7\u03a8\2\2\u0eb8\u0eba\7\u03c0\2\2\u0eb9\u0ead"+
		"\3\2\2\2\u0eb9\u0eb0\3\2\2\2\u0eb9\u0eb3\3\2\2\2\u0eb9\u0eb6\3\2\2\2\u0eba"+
		"\u012f\3\2\2\2\u0ebb\u0ec0\5\u01d6\u00ec\2\u0ebc\u0ebd\7\u03b3\2\2\u0ebd"+
		"\u0ebf\5\u01d6\u00ec\2\u0ebe\u0ebc\3\2\2\2\u0ebf\u0ec2\3\2\2\2\u0ec0\u0ebe"+
		"\3\2\2\2\u0ec0\u0ec1\3\2\2\2\u0ec1\u0ec5\3\2\2\2\u0ec2\u0ec0\3\2\2\2\u0ec3"+
		"\u0ec5\7\u03c0\2\2\u0ec4\u0ebb\3\2\2\2\u0ec4\u0ec3\3\2\2\2\u0ec5\u0131"+
		"\3\2\2\2\u0ec6\u0ec7\7\u0220\2\2\u0ec7\u0ec8\t\67\2\2\u0ec8\u0eca\5\u01d8"+
		"\u00ed\2\u0ec9\u0ecb\t8\2\2\u0eca\u0ec9\3\2\2\2\u0eca\u0ecb\3\2\2\2\u0ecb"+
		"\u0133\3\2\2\2\u0ecc\u0ecd\7\u0220\2\2\u0ecd\u0ece\7\u0134\2\2\u0ece\u0ed4"+
		"\5\u01d8\u00ed\2\u0ecf\u0ed2\7\u0201\2\2\u0ed0\u0ed1\79\2\2\u0ed1\u0ed3"+
		"\7\u0192\2\2\u0ed2\u0ed0\3\2\2\2\u0ed2\u0ed3\3\2\2\2\u0ed3\u0ed5\3\2\2"+
		"\2\u0ed4\u0ecf\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0135\3\2\2\2\u0ed6\u0ed7"+
		"\7\u0220\2\2\u0ed7\u0ed8\7\u01b8\2\2\u0ed8\u0ed9\5\u01d8\u00ed\2\u0ed9"+
		"\u0137\3\2\2\2\u0eda\u0edb\7\u0220\2\2\u0edb\u0edc\7\u0116\2\2\u0edc\u0edf"+
		"\5\u01d8\u00ed\2\u0edd\u0ede\7\u01a4\2\2\u0ede\u0ee0\7\u01b2\2\2\u0edf"+
		"\u0edd\3\2\2\2\u0edf\u0ee0\3\2\2\2\u0ee0\u0139\3\2\2\2\u0ee1\u0ee2\7\u0220"+
		"\2\2\u0ee2\u0ee3\7\u01d7\2\2\u0ee3\u0ee4\5\u01d8\u00ed\2\u0ee4\u013b\3"+
		"\2\2\2\u0ee5\u0ee6\7\u0220\2\2\u0ee6\u0ee9\7\u01c2\2\2\u0ee7\u0ee8\7\36"+
		"\2\2\u0ee8\u0eea\5\u01d8\u00ed\2\u0ee9\u0ee7\3\2\2\2\u0ee9\u0eea\3\2\2"+
		"\2\u0eea\u013d\3\2\2\2\u0eeb\u0eec\7\u01b8\2\2\u0eec\u0eed\5\u01de\u00f0"+
		"\2\u0eed\u0eee\7<\2\2\u0eee\u0eef\t9\2\2\u0eef\u013f\3\2\2\2\u0ef0\u0ef1"+
		"\7\u0231\2\2\u0ef1\u0ef4\5\u01de\u00f0\2\u0ef2\u0ef3\7\u00a3\2\2\u0ef3"+
		"\u0ef5\5\u020c\u0107\2\u0ef4\u0ef2\3\2\2\2\u0ef4\u0ef5\3\2\2\2\u0ef5\u0141"+
		"\3\2\2\2\u0ef6\u0ef7\t:\2\2\u0ef7\u0ef8\7\u01b8\2\2\u0ef8\u0ef9\5\u01de"+
		"\u00f0\2\u0ef9\u0143\3\2\2\2\u0efa\u0efd\5\u0146\u00a4\2\u0efb\u0efd\5"+
		"\6\4\2\u0efc\u0efa\3\2\2\2\u0efc\u0efb\3\2\2\2\u0efd\u0145\3\2\2\2\u0efe"+
		"\u0eff\5\u01de\u00f0\2\u0eff\u0f00\7\u03bc\2\2\u0f00\u0f02\3\2\2\2\u0f01"+
		"\u0efe\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02\u0f03\3\2\2\2\u0f03\u0f29\7\u0103"+
		"\2\2\u0f04\u0f05\5\u015a\u00ae\2\u0f05\u0f06\7\u03b4\2\2\u0f06\u0f08\3"+
		"\2\2\2\u0f07\u0f04\3\2\2\2\u0f08\u0f0b\3\2\2\2\u0f09\u0f07\3\2\2\2\u0f09"+
		"\u0f0a\3\2\2\2\u0f0a\u0f11\3\2\2\2\u0f0b\u0f09\3\2\2\2\u0f0c\u0f0d\5\u015c"+
		"\u00af\2\u0f0d\u0f0e\7\u03b4\2\2\u0f0e\u0f10\3\2\2\2\u0f0f\u0f0c\3\2\2"+
		"\2\u0f10\u0f13\3\2\2\2\u0f11\u0f0f\3\2\2\2\u0f11\u0f12\3\2\2\2\u0f12\u0f19"+
		"\3\2\2\2\u0f13\u0f11\3\2\2\2\u0f14\u0f15\5\u015e\u00b0\2\u0f15\u0f16\7"+
		"\u03b4\2\2\u0f16\u0f18\3\2\2\2\u0f17\u0f14\3\2\2\2\u0f18\u0f1b\3\2\2\2"+
		"\u0f19\u0f17\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f21\3\2\2\2\u0f1b\u0f19"+
		"\3\2\2\2\u0f1c\u0f1d\5\u0160\u00b1\2\u0f1d\u0f1e\7\u03b4\2\2\u0f1e\u0f20"+
		"\3\2\2\2\u0f1f\u0f1c\3\2\2\2\u0f20\u0f23\3\2\2\2\u0f21\u0f1f\3\2\2\2\u0f21"+
		"\u0f22\3\2\2\2\u0f22\u0f25\3\2\2\2\u0f23\u0f21\3\2\2\2\u0f24\u0f26\5\u0164"+
		"\u00b3\2\u0f25\u0f24\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u0f25\3\2\2\2\u0f27"+
		"\u0f28\3\2\2\2\u0f28\u0f2a\3\2\2\2\u0f29\u0f09\3\2\2\2\u0f29\u0f2a\3\2"+
		"\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0f2d\7\u0134\2\2\u0f2c\u0f2e\5\u01de\u00f0"+
		"\2\u0f2d\u0f2c\3\2\2\2\u0f2d\u0f2e\3\2\2\2\u0f2e\u0147\3\2\2\2\u0f2f\u0f32"+
		"\7\24\2\2\u0f30\u0f33\5\u01de\u00f0\2\u0f31\u0f33\5\u0222\u0112\2\u0f32"+
		"\u0f30\3\2\2\2\u0f32\u0f31\3\2\2\2\u0f32\u0f33\3\2\2\2\u0f33\u0f3f\3\2"+
		"\2\2\u0f34\u0f37\7\u00a5\2\2\u0f35\u0f38\5\u01f0\u00f9\2\u0f36\u0f38\5"+
		"\u0222\u0112\2\u0f37\u0f35\3\2\2\2\u0f37\u0f36\3\2\2\2\u0f38\u0f39\3\2"+
		"\2\2\u0f39\u0f3b\7\u0096\2\2\u0f3a\u0f3c\5\u0164\u00b3\2\u0f3b\u0f3a\3"+
		"\2\2\2\u0f3c\u0f3d\3\2\2\2\u0f3d\u0f3b\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e"+
		"\u0f40\3\2\2\2\u0f3f\u0f34\3\2\2\2\u0f40\u0f41\3\2\2\2\u0f41\u0f3f\3\2"+
		"\2\2\u0f41\u0f42\3\2\2\2\u0f42\u0f49\3\2\2\2\u0f43\u0f45\7\60\2\2\u0f44"+
		"\u0f46\5\u0164\u00b3\2\u0f45\u0f44\3\2\2\2\u0f46\u0f47\3\2\2\2\u0f47\u0f45"+
		"\3\2\2\2\u0f47\u0f48\3\2\2\2\u0f48\u0f4a\3\2\2\2\u0f49\u0f43\3\2\2\2\u0f49"+
		"\u0f4a\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b\u0f4c\7\u0134\2\2\u0f4c\u0f4d"+
		"\7\24\2\2\u0f4d\u0149\3\2\2\2\u0f4e\u0f4f\7B\2\2\u0f4f\u0f50\5\u0222\u0112"+
		"\2\u0f50\u0f52\7\u0096\2\2\u0f51\u0f53\5\u0164\u00b3\2\u0f52\u0f51\3\2"+
		"\2\2\u0f53\u0f54\3\2\2\2\u0f54\u0f52\3\2\2\2\u0f54\u0f55\3\2\2\2\u0f55"+
		"\u0f60\3\2\2\2\u0f56\u0f57\7\61\2\2\u0f57\u0f58\5\u0222\u0112\2\u0f58"+
		"\u0f5a\7\u0096\2\2\u0f59\u0f5b\5\u0164\u00b3\2\u0f5a\u0f59\3\2\2\2\u0f5b"+
		"\u0f5c\3\2\2\2\u0f5c\u0f5a\3\2\2\2\u0f5c\u0f5d\3\2\2\2\u0f5d\u0f5f\3\2"+
		"\2\2\u0f5e\u0f56\3\2\2\2\u0f5f\u0f62\3\2\2\2\u0f60\u0f5e\3\2\2\2\u0f60"+
		"\u0f61\3\2\2\2\u0f61\u0f69\3\2\2\2\u0f62\u0f60\3\2\2\2\u0f63\u0f65\7\60"+
		"\2\2\u0f64\u0f66\5\u0164\u00b3\2\u0f65\u0f64\3\2\2\2\u0f66\u0f67\3\2\2"+
		"\2\u0f67\u0f65\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68\u0f6a\3\2\2\2\u0f69\u0f63"+
		"\3\2\2\2\u0f69\u0f6a\3\2\2\2\u0f6a\u0f6b\3\2\2\2\u0f6b\u0f6c\7\u0134\2"+
		"\2\u0f6c\u0f6d\7B\2\2\u0f6d\u014b\3\2\2\2\u0f6e\u0f6f\7M\2\2\u0f6f\u0f70"+
		"\5\u01de\u00f0\2\u0f70\u014d\3\2\2\2\u0f71\u0f72\7S\2\2\u0f72\u0f73\5"+
		"\u01de\u00f0\2\u0f73\u014f\3\2\2\2\u0f74\u0f75\5\u01de\u00f0\2\u0f75\u0f76"+
		"\7\u03bc\2\2\u0f76\u0f78\3\2\2\2\u0f77\u0f74\3\2\2\2\u0f77\u0f78\3\2\2"+
		"\2\u0f78\u0f79\3\2\2\2\u0f79\u0f7b\7[\2\2\u0f7a\u0f7c\5\u0164\u00b3\2"+
		"\u0f7b\u0f7a\3\2\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d\u0f7b\3\2\2\2\u0f7d\u0f7e"+
		"\3\2\2\2\u0f7e\u0f7f\3\2\2\2\u0f7f\u0f80\7\u0134\2\2\u0f80\u0f82\7[\2"+
		"\2\u0f81\u0f83\5\u01de\u00f0\2\u0f82\u0f81\3\2\2\2\u0f82\u0f83\3\2\2\2"+
		"\u0f83\u0151\3\2\2\2\u0f84\u0f85\5\u01de\u00f0\2\u0f85\u0f86\7\u03bc\2"+
		"\2\u0f86\u0f88\3\2\2\2\u0f87\u0f84\3\2\2\2\u0f87\u0f88\3\2\2\2\u0f88\u0f89"+
		"\3\2\2\2\u0f89\u0f8b\7{\2\2\u0f8a\u0f8c\5\u0164\u00b3\2\u0f8b\u0f8a\3"+
		"\2\2\2\u0f8c\u0f8d\3\2\2\2\u0f8d\u0f8b\3\2\2\2\u0f8d\u0f8e\3\2\2\2\u0f8e"+
		"\u0f8f\3\2\2\2\u0f8f\u0f90\7\u0211\2\2\u0f90\u0f91\5\u0222\u0112\2\u0f91"+
		"\u0f92\7\u0134\2\2\u0f92\u0f94\7{\2\2\u0f93\u0f95\5\u01de\u00f0\2\u0f94"+
		"\u0f93\3\2\2\2\u0f94\u0f95\3\2\2\2\u0f95\u0153\3\2\2\2\u0f96\u0f97\7\177"+
		"\2\2\u0f97\u0f98\5\u0222\u0112\2\u0f98\u0155\3\2\2\2\u0f99\u0f9a\5\u01de"+
		"\u00f0\2\u0f9a\u0f9b\7\u03bc\2\2\u0f9b\u0f9d\3\2\2\2\u0f9c\u0f99\3\2\2"+
		"\2\u0f9c\u0f9d\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0f9f\7\u00a7\2\2\u0f9f"+
		"\u0fa0\5\u0222\u0112\2\u0fa0\u0fa2\7\u012e\2\2\u0fa1\u0fa3\5\u0164\u00b3"+
		"\2\u0fa2\u0fa1\3\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4\u0fa2\3\2\2\2\u0fa4\u0fa5"+
		"\3\2\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6\u0fa7\7\u0134\2\2\u0fa7\u0fa9\7\u00a7"+
		"\2\2\u0fa8\u0faa\5\u01de\u00f0\2\u0fa9\u0fa8\3\2\2\2\u0fa9\u0faa\3\2\2"+
		"\2\u0faa\u0157\3\2\2\2\u0fab\u0fac\7\u0110\2\2\u0fac\u0fbb\5\u01de\u00f0"+
		"\2\u0fad\u0fb2\78\2\2\u0fae\u0fb0\7\u019c\2\2\u0faf\u0fae\3\2\2\2\u0faf"+
		"\u0fb0\3\2\2\2\u0fb0\u0fb1\3\2\2\2\u0fb1\u0fb3\7<\2\2\u0fb2\u0faf\3\2"+
		"\2\2\u0fb2\u0fb3\3\2\2\2\u0fb3\u0fb4\3\2\2\2\u0fb4\u0fb5\5\u01de\u00f0"+
		"\2\u0fb5\u0fb6\7K\2\2\u0fb6\u0fb7\5\u01fe\u0100\2\u0fb7\u0fbb\3\2\2\2"+
		"\u0fb8\u0fb9\7\u01a7\2\2\u0fb9\u0fbb\5\u01de\u00f0\2\u0fba\u0fab\3\2\2"+
		"\2\u0fba\u0fad\3\2\2\2\u0fba\u0fb8\3\2\2\2\u0fbb\u0159\3\2\2\2\u0fbc\u0fbd"+
		"\7%\2\2\u0fbd\u0fbe\5\u01fe\u0100\2\u0fbe\u0fc1\5\u01f2\u00fa\2\u0fbf"+
		"\u0fc0\7&\2\2\u0fc0\u0fc2\5\u020e\u0108\2\u0fc1\u0fbf\3\2\2\2\u0fc1\u0fc2"+
		"\3\2\2\2\u0fc2\u015b\3\2\2\2\u0fc3\u0fc4\7%\2\2\u0fc4\u0fc5\5\u01de\u00f0"+
		"\2\u0fc5\u0fc6\7\33\2\2\u0fc6\u0fcd\79\2\2\u0fc7\u0fce\5\u01e4\u00f3\2"+
		"\u0fc8\u0fca\7\u008c\2\2\u0fc9\u0fcb\7\u0217\2\2\u0fca\u0fc9\3\2\2\2\u0fca"+
		"\u0fcb\3\2\2\2\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fce\7\u03c0\2\2\u0fcd\u0fc7"+
		"\3\2\2\2\u0fcd\u0fc8\3\2\2\2\u0fce\u015d\3\2\2\2\u0fcf\u0fd0\7%\2\2\u0fd0"+
		"\u0fd1\5\u01de\u00f0\2\u0fd1\u0fd2\7\"\2\2\u0fd2\u0fd3\79\2\2\u0fd3\u0fd4"+
		"\5\u00aaV\2\u0fd4\u015f\3\2\2\2\u0fd5\u0fd6\7%\2\2\u0fd6\u0fd7\t;\2\2"+
		"\u0fd7\u0fd8\7\u0155\2\2\u0fd8\u0fd9\79\2\2\u0fd9\u0fde\5\u0162\u00b2"+
		"\2\u0fda\u0fdb\7\u03b3\2\2\u0fdb\u0fdd\5\u0162\u00b2\2\u0fdc\u0fda\3\2"+
		"\2\2\u0fdd\u0fe0\3\2\2\2\u0fde\u0fdc\3\2\2\2\u0fde\u0fdf\3\2\2\2\u0fdf"+
		"\u0fe1\3\2\2\2\u0fe0\u0fde\3\2\2\2\u0fe1\u0fe2\5\u0144\u00a3\2\u0fe2\u0161"+
		"\3\2\2\2\u0fe3\u0fef\5\u01e4\u00f3\2\u0fe4\u0fe6\7\u008c\2\2\u0fe5\u0fe7"+
		"\7\u0217\2\2\u0fe6\u0fe5\3\2\2\2\u0fe6\u0fe7\3\2\2\2\u0fe7\u0fe8\3\2\2"+
		"\2\u0fe8\u0fef\7\u03c0\2\2\u0fe9\u0fef\5\u01de\u00f0\2\u0fea\u0fef\7\u008d"+
		"\2\2\u0feb\u0fec\7d\2\2\u0fec\u0fef\7\u014e\2\2\u0fed\u0fef\7\u008b\2"+
		"\2\u0fee\u0fe3\3\2\2\2\u0fee\u0fe4\3\2\2\2\u0fee\u0fe9\3\2\2\2\u0fee\u0fea"+
		"\3\2\2\2\u0fee\u0feb\3\2\2\2\u0fee\u0fed\3\2\2\2\u0fef\u0163\3\2\2\2\u0ff0"+
		"\u0ff3\5\24\13\2\u0ff1\u0ff3\5\6\4\2\u0ff2\u0ff0\3\2\2\2\u0ff2\u0ff1\3"+
		"\2\2\2\u0ff3\u0ff4\3\2\2\2\u0ff4\u0ff5\7\u03b4\2\2\u0ff5\u0165\3\2\2\2"+
		"\u0ff6\u0ff7\7\t\2\2\u0ff7\u0ff8\7\u0213\2\2\u0ff8\u0ff9\5\u01cc\u00e7"+
		"\2\u0ff9\u1000\5\u0178\u00bd\2\u0ffa\u0ffb\7\u03b3\2\2\u0ffb\u0ffc\5\u01cc"+
		"\u00e7\2\u0ffc\u0ffd\5\u0178\u00bd\2\u0ffd\u0fff\3\2\2\2\u0ffe\u0ffa\3"+
		"\2\2\2\u0fff\u1002\3\2\2\2\u1000\u0ffe\3\2\2\2\u1000\u1001\3\2\2\2\u1001"+
		"\u1030\3\2\2\2\u1002\u1000\3\2\2\2\u1003\u1004\7\t\2\2\u1004\u1006\7\u0213"+
		"\2\2\u1005\u1007\5\u0210\u0109\2\u1006\u1005\3\2\2\2\u1006\u1007\3\2\2"+
		"\2\u1007\u1008\3\2\2\2\u1008\u100d\5\u017a\u00be\2\u1009\u100a\7\u03b3"+
		"\2\2\u100a\u100c\5\u017a\u00be\2\u100b\u1009\3\2\2\2\u100c\u100f\3\2\2"+
		"\2\u100d\u100b\3\2\2\2\u100d\u100e\3\2\2\2\u100e\u101e\3\2\2\2\u100f\u100d"+
		"\3\2\2\2\u1010\u101c\7}\2\2\u1011\u101d\7\u019f\2\2\u1012\u1019\5\u017c"+
		"\u00bf\2\u1013\u1015\7\13\2\2\u1014\u1013\3\2\2\2\u1014\u1015\3\2\2\2"+
		"\u1015\u1016\3\2\2\2\u1016\u1018\5\u017c\u00bf\2\u1017\u1014\3\2\2\2\u1018"+
		"\u101b\3\2\2\2\u1019\u1017\3\2\2\2\u1019\u101a\3\2\2\2\u101a\u101d\3\2"+
		"\2\2\u101b\u1019\3\2\2\2\u101c\u1011\3\2\2\2\u101c\u1012\3\2\2\2\u101d"+
		"\u101f\3\2\2\2\u101e\u1010\3\2\2\2\u101e\u101f\3\2\2\2\u101f\u1026\3\2"+
		"\2\2\u1020\u1022\7\u00a8\2\2\u1021\u1023\5\u017e\u00c0\2\u1022\u1021\3"+
		"\2\2\2\u1023\u1024\3\2\2\2\u1024\u1022\3\2\2\2\u1024\u1025\3\2\2\2\u1025"+
		"\u1027\3\2\2\2\u1026\u1020\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u102c\3\2"+
		"\2\2\u1028\u102b\5\u0178\u00bd\2\u1029\u102b\5\u0180\u00c1\2\u102a\u1028"+
		"\3\2\2\2\u102a\u1029\3\2\2\2\u102b\u102e\3\2\2\2\u102c\u102a\3\2\2\2\u102c"+
		"\u102d\3\2\2\2\u102d\u1030\3\2\2\2\u102e\u102c\3\2\2\2\u102f\u0ff6\3\2"+
		"\2\2\u102f\u1003\3\2\2\2\u1030\u0167\3\2\2\2\u1031\u1032\7\37\2\2\u1032"+
		"\u1033\7\u0213\2\2\u1033\u1038\5\u017a\u00be\2\u1034\u1035\7\u03b3\2\2"+
		"\u1035\u1037\5\u017a\u00be\2\u1036\u1034\3\2\2\2\u1037\u103a\3\2\2\2\u1038"+
		"\u1036\3\2\2\2\u1038\u1039\3\2\2\2\u1039\u1068\3\2\2\2\u103a\u1038\3\2"+
		"\2\2\u103b\u103c\7\37\2\2\u103c\u103e\7\u0213\2\2\u103d\u103f\5\u0212"+
		"\u010a\2\u103e\u103d\3\2\2\2\u103e\u103f\3\2\2\2\u103f\u1040\3\2\2\2\u1040"+
		"\u1045\5\u017a\u00be\2\u1041\u1042\7\u03b3\2\2\u1042\u1044\5\u017a\u00be"+
		"\2\u1043\u1041\3\2\2\2\u1044\u1047\3\2\2\2\u1045\u1043\3\2\2\2\u1045\u1046"+
		"\3\2\2\2\u1046\u1056\3\2\2\2\u1047\u1045\3\2\2\2\u1048\u1054\7}\2\2\u1049"+
		"\u1055\7\u019f\2\2\u104a\u1051\5\u017c\u00bf\2\u104b\u104d\7\13\2\2\u104c"+
		"\u104b\3\2\2\2\u104c\u104d\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u1050\5\u017c"+
		"\u00bf\2\u104f\u104c\3\2\2\2\u1050\u1053\3\2\2\2\u1051\u104f\3\2\2\2\u1051"+
		"\u1052\3\2\2\2\u1052\u1055\3\2\2\2\u1053\u1051\3\2\2\2\u1054\u1049\3\2"+
		"\2\2\u1054\u104a\3\2\2\2\u1055\u1057\3\2\2\2\u1056\u1048\3\2\2\2\u1056"+
		"\u1057\3\2\2\2\u1057\u105e\3\2\2\2\u1058\u105a\7\u00a8\2\2\u1059\u105b"+
		"\5\u017e\u00c0\2\u105a\u1059\3\2\2\2\u105b\u105c\3\2\2\2\u105c\u105a\3"+
		"\2\2\2\u105c\u105d\3\2\2\2\u105d\u105f\3\2\2\2\u105e\u1058\3\2\2\2\u105e"+
		"\u105f\3\2\2\2\u105f\u1064\3\2\2\2\u1060\u1063\5\u0178\u00bd\2\u1061\u1063"+
		"\5\u0180\u00c1\2\u1062\u1060\3\2\2\2\u1062\u1061\3\2\2\2\u1063\u1066\3"+
		"\2\2\2\u1064\u1062\3\2\2\2\u1064\u1065\3\2\2\2\u1065\u1068\3\2\2\2\u1066"+
		"\u1064\3\2\2\2\u1067\u1031\3\2\2\2\u1067\u103b\3\2\2\2\u1068\u0169\3\2"+
		"\2\2\u1069\u106a\7.\2\2\u106a\u106c\7\u0213\2\2\u106b\u106d\5\u0210\u0109"+
		"\2\u106c\u106b\3\2\2\2\u106c\u106d\3\2\2\2\u106d\u106e\3\2\2\2\u106e\u1073"+
		"\5\u01cc\u00e7\2\u106f\u1070\7\u03b3\2\2\u1070\u1072\5\u01cc\u00e7\2\u1071"+
		"\u106f\3\2\2\2\u1072\u1075\3\2\2\2\u1073\u1071\3\2\2\2\u1073\u1074\3\2"+
		"\2\2\u1074\u016b\3\2\2\2\u1075\u1073\3\2\2\2\u1076\u1077\7>\2\2\u1077"+
		"\u107c\5\u0182\u00c2\2\u1078\u1079\7\u03b3\2\2\u1079\u107b\5\u0182\u00c2"+
		"\2\u107a\u1078\3\2\2\2\u107b\u107e\3\2\2\2\u107c\u107a\3\2\2\2\u107c\u107d"+
		"\3\2\2\2\u107d\u107f\3\2\2\2\u107e\u107c\3\2\2\2\u107f\u1081\7g\2\2\u1080"+
		"\u1082\t<\2\2\u1081\u1080\3\2\2\2\u1081\u1082\3\2\2\2\u1082\u1083\3\2"+
		"\2\2\u1083\u1084\5\u0186\u00c4\2\u1084\u1085\7\u0097\2\2\u1085\u108a\5"+
		"\u017a\u00be\2\u1086\u1087\7\u03b3\2\2\u1087\u1089\5\u017a\u00be\2\u1088"+
		"\u1086\3\2\2\2\u1089\u108c\3\2\2\2\u108a\u1088\3\2\2\2\u108a\u108b\3\2"+
		"\2\2\u108b\u109b\3\2\2\2\u108c\u108a\3\2\2\2\u108d\u1099\7}\2\2\u108e"+
		"\u109a\7\u019f\2\2\u108f\u1096\5\u017c\u00bf\2\u1090\u1092\7\13\2\2\u1091"+
		"\u1090\3\2\2\2\u1091\u1092\3\2\2\2\u1092\u1093\3\2\2\2\u1093\u1095\5\u017c"+
		"\u00bf\2\u1094\u1091\3\2\2\2\u1095\u1098\3\2\2\2\u1096\u1094\3\2\2\2\u1096"+
		"\u1097\3\2\2\2\u1097\u109a\3\2\2\2\u1098\u1096\3\2\2\2\u1099\u108e\3\2"+
		"\2\2\u1099\u108f\3\2\2\2\u109a\u109c\3\2\2\2\u109b\u108d\3\2\2\2\u109b"+
		"\u109c\3\2\2\2\u109c\u10a6\3\2\2\2\u109d\u10a3\7\u00a8\2\2\u109e\u109f"+
		"\7>\2\2\u109f\u10a2\7i\2\2\u10a0\u10a2\5\u017e\u00c0\2\u10a1\u109e\3\2"+
		"\2\2\u10a1\u10a0\3\2\2\2\u10a2\u10a5\3\2\2\2\u10a3\u10a1\3\2\2\2\u10a3"+
		"\u10a4\3\2\2\2\u10a4\u10a7\3\2\2\2\u10a5\u10a3\3\2\2\2\u10a6\u109d\3\2"+
		"\2\2\u10a6\u10a7\3\2\2\2\u10a7\u016d\3\2\2\2\u10a8\u10a9\7>\2\2\u10a9"+
		"\u10aa\7\u01be\2\2\u10aa\u10ab\7g\2\2\u10ab\u10ac\5\u01cc\u00e7\2\u10ac"+
		"\u10ad\7\u0097\2\2\u10ad\u10b2\5\u01cc\u00e7\2\u10ae\u10af\7\u03b3\2\2"+
		"\u10af\u10b1\5\u01cc\u00e7\2\u10b0\u10ae\3\2\2\2\u10b1\u10b4\3\2\2\2\u10b2"+
		"\u10b0\3\2\2\2\u10b2\u10b3\3\2\2\2\u10b3\u10b8\3\2\2\2\u10b4\u10b2\3\2"+
		"\2\2\u10b5\u10b6\7\u00a8\2\2\u10b6\u10b7\7>\2\2\u10b7\u10b9\7i\2\2\u10b8"+
		"\u10b5\3\2\2\2\u10b8\u10b9\3\2\2\2\u10b9\u016f\3\2\2\2\u10ba\u10bb\7z"+
		"\2\2\u10bb\u10bc\7\u0213\2\2\u10bc\u10bd\5\u01cc\u00e7\2\u10bd\u10be\7"+
		"\u0097\2\2\u10be\u10bf\5\u01cc\u00e7\2\u10bf\u10c0\7\u03b3\2\2\u10c0\u10c1"+
		"\5\u01cc\u00e7\2\u10c1\u10c2\7\u0097\2\2\u10c2\u10c3\5\u01cc\u00e7\2\u10c3"+
		"\u0171\3\2\2\2\u10c4\u10c5\7\u0080\2\2\u10c5\u10ca\5\u0182\u00c2\2\u10c6"+
		"\u10c7\7\u03b3\2\2\u10c7\u10c9\5\u0182\u00c2\2\u10c8\u10c6\3\2\2\2\u10c9"+
		"\u10cc\3\2\2\2\u10ca\u10c8\3\2\2\2\u10ca\u10cb\3\2\2\2\u10cb\u10cd\3\2"+
		"\2\2\u10cc\u10ca\3\2\2\2\u10cd\u10cf\7g\2\2\u10ce\u10d0\t<\2\2\u10cf\u10ce"+
		"\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u10d2\5\u0186\u00c4"+
		"\2\u10d2\u10d3\7<\2\2\u10d3\u10d8\5\u01cc\u00e7\2\u10d4\u10d5\7\u03b3"+
		"\2\2\u10d5\u10d7\5\u01cc\u00e7\2\u10d6\u10d4\3\2\2\2\u10d7\u10da\3\2\2"+
		"\2\u10d8\u10d6\3\2\2\2\u10d8\u10d9\3\2\2\2\u10d9\u10ed\3\2\2\2\u10da\u10d8"+
		"\3\2\2\2\u10db\u10dc\7\u0080\2\2\u10dc\u10de\7\b\2\2\u10dd\u10df\7\u0237"+
		"\2\2\u10de\u10dd\3\2\2\2\u10de\u10df\3\2\2\2\u10df\u10e0\3\2\2\2\u10e0"+
		"\u10e1\7\u03b3\2\2\u10e1\u10e2\7>\2\2\u10e2\u10e3\7i\2\2\u10e3\u10e4\7"+
		"<\2\2\u10e4\u10e9\5\u01cc\u00e7\2\u10e5\u10e6\7\u03b3\2\2\u10e6\u10e8"+
		"\5\u01cc\u00e7\2\u10e7\u10e5\3\2\2\2\u10e8\u10eb\3\2\2\2\u10e9\u10e7\3"+
		"\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u10ed\3\2\2\2\u10eb\u10e9\3\2\2\2\u10ec"+
		"\u10c4\3\2\2\2\u10ec\u10db\3\2\2\2\u10ed\u0173\3\2\2\2\u10ee\u10ef\7\u0080"+
		"\2\2\u10ef\u10f0\7\u01be\2\2\u10f0\u10f1\7g\2\2\u10f1\u10f2\5\u01cc\u00e7"+
		"\2\u10f2\u10f3\7<\2\2\u10f3\u10f8\5\u01cc\u00e7\2\u10f4\u10f5\7\u03b3"+
		"\2\2\u10f5\u10f7\5\u01cc\u00e7\2\u10f6\u10f4\3\2\2\2\u10f7\u10fa\3\2\2";
	private static final String _serializedATNSegment2 =
		"\2\u10f8\u10f6\3\2\2\2\u10f8\u10f9\3\2\2\2\u10f9\u0175\3\2\2\2\u10fa\u10f8"+
		"\3\2\2\2\u10fb\u10fc\7\u0086\2\2\u10fc\u10ff\7\u01b1\2\2\u10fd\u10fe\7"+
		"9\2\2\u10fe\u1100\5\u01cc\u00e7\2\u10ff\u10fd\3\2\2\2\u10ff\u1100\3\2"+
		"\2\2\u1100\u1101\3\2\2\2\u1101\u1102\7\u03a8\2\2\u1102\u1103\5\u0188\u00c5"+
		"\2\u1103\u0177\3\2\2\2\u1104\u1105\7\u01b1\2\2\u1105\u110c\7\u0141\2\2"+
		"\u1106\u110d\7&\2\2\u1107\u110d\7\u019b\2\2\u1108\u1109\7J\2\2\u1109\u110a"+
		"\5\u01e4\u00f3\2\u110a\u110b\7\u0229\2\2\u110b\u110d\3\2\2\2\u110c\u1106"+
		"\3\2\2\2\u110c\u1107\3\2\2\2\u110c\u1108\3\2\2\2\u110c\u110d\3\2\2\2\u110d"+
		"\u0179\3\2\2\2\u110e\u110f\5\u01cc\u00e7\2\u110f\u1110\7\u015a\2\2\u1110"+
		"\u1111\7\21\2\2\u1111\u1112\7\u01b1\2\2\u1112\u1113\7\u03c0\2\2\u1113"+
		"\u1126\3\2\2\2\u1114\u1115\5\u01cc\u00e7\2\u1115\u1118\7\u015a\2\2\u1116"+
		"\u1117\7\u00a8\2\2\u1117\u1119\5\u01dc\u00ef\2\u1118\u1116\3\2\2\2\u1118"+
		"\u1119\3\2\2\2\u1119\u111a\3\2\2\2\u111a\u111b\7\21\2\2\u111b\u111c\7"+
		"\u03c0\2\2\u111c\u1126\3\2\2\2\u111d\u111e\5\u01cc\u00e7\2\u111e\u111f"+
		"\7\u015a\2\2\u111f\u1120\7\u00a8\2\2\u1120\u1123\5\u01dc\u00ef\2\u1121"+
		"\u1122\7\f\2\2\u1122\u1124\7\u03c0\2\2\u1123\u1121\3\2\2\2\u1123\u1124"+
		"\3\2\2\2\u1124\u1126\3\2\2\2\u1125\u110e\3\2\2\2\u1125\u1114\3\2\2\2\u1125"+
		"\u111d\3\2\2\2\u1126\u017b\3\2\2\2\u1127\u1130\7\u0091\2\2\u1128\u1130"+
		"\7\u021f\2\2\u1129\u112a\7\u010e\2\2\u112a\u1130\7\u03c0\2\2\u112b\u112c"+
		"\7\u0168\2\2\u112c\u1130\7\u03c0\2\2\u112d\u112e\7\u01fe\2\2\u112e\u1130"+
		"\7\u03c0\2\2\u112f\u1127\3\2\2\2\u112f\u1128\3\2\2\2\u112f\u1129\3\2\2"+
		"\2\u112f\u112b\3\2\2\2\u112f\u112d\3\2\2\2\u1130\u017d\3\2\2\2\u1131\u1132"+
		"\7\u018a\2\2\u1132\u113a\5\u01e4\u00f3\2\u1133\u1134\7\u018d\2\2\u1134"+
		"\u113a\5\u01e4\u00f3\2\u1135\u1136\7\u0189\2\2\u1136\u113a\5\u01e4\u00f3"+
		"\2\u1137\u1138\7\u018e\2\2\u1138\u113a\5\u01e4\u00f3\2\u1139\u1131\3\2"+
		"\2\2\u1139\u1133\3\2\2\2\u1139\u1135\3\2\2\2\u1139\u1137\3\2\2\2\u113a"+
		"\u017f\3\2\2\2\u113b\u113c\7\u00f7\2\2\u113c\u113d\t=\2\2\u113d\u0181"+
		"\3\2\2\2\u113e\u1143\5\u0184\u00c3\2\u113f\u1140\7\u03b1\2\2\u1140\u1141"+
		"\5\u01fe\u0100\2\u1141\u1142\7\u03b2\2\2\u1142\u1144\3\2\2\2\u1143\u113f"+
		"\3\2\2\2\u1143\u1144\3\2\2\2\u1144\u0183\3\2\2\2\u1145\u1147\7\b\2\2\u1146"+
		"\u1148\7\u0237\2\2\u1147\u1146\3\2\2\2\u1147\u1148\3\2\2\2\u1148\u1170"+
		"\3\2\2\2\u1149\u114b\7\t\2\2\u114a\u114c\7\u0230\2\2\u114b\u114a\3\2\2"+
		"\2\u114b\u114c\3\2\2\2\u114c\u1170\3\2\2\2\u114d\u1154\7\37\2\2\u114e"+
		"\u114f\7\u0205\2\2\u114f\u1155\7\u022f\2\2\u1150\u1155\7\u0230\2\2\u1151"+
		"\u1155\7\u0219\2\2\u1152\u1155\7\u0213\2\2\u1153\u1155\7\u0204\2\2\u1154"+
		"\u114e\3\2\2\2\u1154\u1150\3\2\2\2\u1154\u1151\3\2\2\2\u1154\u1152\3\2"+
		"\2\2\u1154\u1153\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u1170\3\2\2\2\u1156"+
		"\u1170\7(\2\2\u1157\u1170\7.\2\2\u1158\u1170\7\u013c\2\2\u1159\u1170\7"+
		"\u0231\2\2\u115a\u1170\7\u0232\2\2\u115b\u115c\7>\2\2\u115c\u1170\7i\2"+
		"\2\u115d\u1170\7E\2\2\u115e\u1170\7I\2\2\u115f\u1160\7Z\2\2\u1160\u1170"+
		"\7\u022f\2\2\u1161\u1170\7\u0233\2\2\u1162\u1170\7\u01be\2\2\u1163\u1170"+
		"\7w\2\2\u1164\u1170\7\u0234\2\2\u1165\u1166\7\u01d3\2\2\u1166\u1170\t"+
		">\2\2\u1167\u1170\7\u0085\2\2\u1168\u1169\7\u0088\2\2\u1169\u1170\t?\2"+
		"\2\u116a\u1170\7\u0235\2\2\u116b\u1170\7\u0236\2\2\u116c\u1170\7\u0099"+
		"\2\2\u116d\u1170\7\u00a0\2\2\u116e\u1170\7\u00a1\2\2\u116f\u1145\3\2\2"+
		"\2\u116f\u1149\3\2\2\2\u116f\u114d\3\2\2\2\u116f\u1156\3\2\2\2\u116f\u1157"+
		"\3\2\2\2\u116f\u1158\3\2\2\2\u116f\u1159\3\2\2\2\u116f\u115a\3\2\2\2\u116f"+
		"\u115b\3\2\2\2\u116f\u115d\3\2\2\2\u116f\u115e\3\2\2\2\u116f\u115f\3\2"+
		"\2\2\u116f\u1161\3\2\2\2\u116f\u1162\3\2\2\2\u116f\u1163\3\2\2\2\u116f"+
		"\u1164\3\2\2\2\u116f\u1165\3\2\2\2\u116f\u1167\3\2\2\2\u116f\u1168\3\2"+
		"\2\2\u116f\u116a\3\2\2\2\u116f\u116b\3\2\2\2\u116f\u116c\3\2\2\2\u116f"+
		"\u116d\3\2\2\2\u116f\u116e\3\2\2\2\u1170\u0185\3\2\2\2\u1171\u117f\7\u03a1"+
		"\2\2\u1172\u1173\7\u03a1\2\2\u1173\u1174\7\u03b0\2\2\u1174\u117f\7\u03a1"+
		"\2\2\u1175\u1176\5\u01de\u00f0\2\u1176\u1177\7\u03b0\2\2\u1177\u1178\7"+
		"\u03a1\2\2\u1178\u117f\3\2\2\2\u1179\u117a\5\u01de\u00f0\2\u117a\u117b"+
		"\7\u03b0\2\2\u117b\u117c\5\u01de\u00f0\2\u117c\u117f\3\2\2\2\u117d\u117f"+
		"\5\u01de\u00f0\2\u117e\u1171\3\2\2\2\u117e\u1172\3\2\2\2\u117e\u1175\3"+
		"\2\2\2\u117e\u1179\3\2\2\2\u117e\u117d\3\2\2\2\u117f\u0187\3\2\2\2\u1180"+
		"\u1181\t@\2\2\u1181\u1182\7\u03b1\2\2\u1182\u1183\7\u03c0\2\2\u1183\u1186"+
		"\7\u03b2\2\2\u1184\u1186\7\u03c0\2\2\u1185\u1180\3\2\2\2\u1185\u1184\3"+
		"\2\2\2\u1186\u0189\3\2\2\2\u1187\u1189\7\n\2\2\u1188\u118a\tA\2\2\u1189"+
		"\u1188\3\2\2\2\u1189\u118a\3\2\2\2\u118a\u118b\3\2\2\2\u118b\u118c\7\u0094"+
		"\2\2\u118c\u118d\5\u0200\u0101\2\u118d\u018b\3\2\2\2\u118e\u118f\7\30"+
		"\2\2\u118f\u1190\7\u0094\2\2\u1190\u1194\5\u0200\u0101\2\u1191\u1193\5"+
		"\u0194\u00cb\2\u1192\u1191\3\2\2\2\u1193\u1196\3\2\2\2\u1194\u1192\3\2"+
		"\2\2\u1194\u1195\3\2\2\2\u1195\u018d\3\2\2\2\u1196\u1194\3\2\2\2\u1197"+
		"\u1198\7\u010d\2\2\u1198\u1199\7\u0094\2\2\u1199\u119b\5\u0200\u0101\2"+
		"\u119a\u119c\tB\2\2\u119b\u119a\3\2\2\2\u119b\u119c\3\2\2\2\u119c\u018f"+
		"\3\2\2\2\u119d\u119f\7h\2\2\u119e\u11a0\tA\2\2\u119f\u119e\3\2\2\2\u119f"+
		"\u11a0\3\2\2\2\u11a0\u11a1\3\2\2\2\u11a1\u11a2\7\u0094\2\2\u11a2\u11a3"+
		"\5\u0200\u0101\2\u11a3\u0191\3\2\2\2\u11a4\u11a6\7\u01cb\2\2\u11a5\u11a7"+
		"\tA\2\2\u11a6\u11a5\3\2\2\2\u11a6\u11a7\3\2\2\2\u11a7\u11a8\3\2\2\2\u11a8"+
		"\u11a9\7\u0094\2\2\u11a9\u11ab\5\u0200\u0101\2\u11aa\u11ac\7\u01c0\2\2"+
		"\u11ab\u11aa\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u11ae\3\2\2\2\u11ad\u11af"+
		"\7\u0143\2\2\u11ae\u11ad\3\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11b1\3\2\2"+
		"\2\u11b0\u11b2\7\u0214\2\2\u11b1\u11b0\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2"+
		"\u0193\3\2\2\2\u11b3\u11b4\79\2\2\u11b4\u11bb\7\u0212\2\2\u11b5\u11bb"+
		"\7\u01c0\2\2\u11b6\u11bb\7\u0145\2\2\u11b7\u11bb\7\u018f\2\2\u11b8\u11bb"+
		"\7\u0143\2\2\u11b9\u11bb\7\u010b\2\2\u11ba\u11b3\3\2\2\2\u11ba\u11b5\3"+
		"\2\2\2\u11ba\u11b6\3\2\2\2\u11ba\u11b7\3\2\2\2\u11ba\u11b8\3\2\2\2\u11ba"+
		"\u11b9\3\2\2\2\u11bb\u0195\3\2\2\2\u11bc\u11be\7\37\2\2\u11bd\u11bf\7"+
		"\u00fa\2\2\u11be\u11bd\3\2\2\2\u11be\u11bf\3\2\2\2\u11bf\u11c0\3\2\2\2"+
		"\u11c0\u11c1\7\u0150\2\2\u11c1\u11c2\5\u01de\u00f0\2\u11c2\u11c3\7\u01d6"+
		"\2\2\u11c3\u11c4\tC\2\2\u11c4\u11c5\7\u01eb\2\2\u11c5\u11c6\7\u03c0\2"+
		"\2\u11c6\u0197\3\2\2\2\u11c7\u11c8\7\u0161\2\2\u11c8\u11c9\7\u01b3\2\2"+
		"\u11c9\u11ca\5\u01de\u00f0\2\u11ca\u11cb\7\u01eb\2\2\u11cb\u11cc\7\u03c0"+
		"\2\2\u11cc\u0199\3\2\2\2\u11cd\u11ce\7\u020f\2\2\u11ce\u11cf\7\u01b3\2"+
		"\2\u11cf\u11d0\5\u01de\u00f0\2\u11d0\u019b\3\2\2\2\u11d1\u11d2\7\u0086"+
		"\2\2\u11d2\u11d3\5\u01a0\u00d1\2\u11d3\u11d4\7\u03a8\2\2\u11d4\u11dc\5"+
		"\u0222\u0112\2\u11d5\u11d6\7\u03b3\2\2\u11d6\u11d7\5\u01a0\u00d1\2\u11d7"+
		"\u11d8\7\u03a8\2\2\u11d8\u11d9\5\u0222\u0112\2\u11d9\u11db\3\2\2\2\u11da"+
		"\u11d5\3\2\2\2\u11db\u11de\3\2\2\2\u11dc\u11da\3\2\2\2\u11dc\u11dd\3\2"+
		"\2\2\u11dd\u11f7\3\2\2\2\u11de\u11dc\3\2\2\2\u11df\u11e3\7\u0086\2\2\u11e0"+
		"\u11e1\7\27\2\2\u11e1\u11e4\7\u0086\2\2\u11e2\u11e4\7\u0292\2\2\u11e3"+
		"\u11e0\3\2\2\2\u11e3\u11e2\3\2\2\2\u11e4\u11e7\3\2\2\2\u11e5\u11e8\5\u01d0"+
		"\u00e9\2\u11e6\u11e8\7&\2\2\u11e7\u11e5\3\2\2\2\u11e7\u11e6\3\2\2\2\u11e8"+
		"\u11f7\3\2\2\2\u11e9\u11ea\7\u0086\2\2\u11ea\u11f1\7\u0199\2\2\u11eb\u11ee"+
		"\5\u01d0\u00e9\2\u11ec\u11ed\7\31\2\2\u11ed\u11ef\5\u01d2\u00ea\2\u11ee"+
		"\u11ec\3\2\2\2\u11ee\u11ef\3\2\2\2\u11ef\u11f2\3\2\2\2\u11f0\u11f2\7&"+
		"\2\2\u11f1\u11eb\3\2\2\2\u11f1\u11f0\3\2\2\2\u11f2\u11f7\3\2\2\2\u11f3"+
		"\u11f7\5\u0176\u00bc\2\u11f4\u11f7\5\u0102\u0082\2\u11f5\u11f7\5\u0100"+
		"\u0081\2\u11f6\u11d1\3\2\2\2\u11f6\u11df\3\2\2\2\u11f6\u11e9\3\2\2\2\u11f6"+
		"\u11f3\3\2\2\2\u11f6\u11f4\3\2\2\2\u11f6\u11f5\3\2\2\2\u11f7\u019d\3\2"+
		"\2\2\u11f8\u11f9\7\u0088\2\2\u11f9\u11fa\t\60\2\2\u11fa\u12b9\7\u0173"+
		"\2\2\u11fb\u11fc\7\u0088\2\2\u11fc\u11fd\tD\2\2\u11fd\u1200\7\u013d\2"+
		"\2\u11fe\u11ff\7D\2\2\u11ff\u1201\7\u03c0\2\2\u1200\u11fe\3\2\2\2\u1200"+
		"\u1201\3\2\2\2\u1201\u1204\3\2\2\2\u1202\u1203\7<\2\2\u1203\u1205\5\u01e4"+
		"\u00f3\2\u1204\u1202\3\2\2\2\u1204\u1205\3\2\2\2\u1205\u120d\3\2\2\2\u1206"+
		"\u120a\7V\2\2\u1207\u1208\5\u01e4\u00f3\2\u1208\u1209\7\u03b3\2\2\u1209"+
		"\u120b\3\2\2\2\u120a\u1207\3\2\2\2\u120a\u120b\3\2\2\2\u120b\u120c\3\2"+
		"\2\2\u120c\u120e\5\u01e4\u00f3\2\u120d\u1206\3\2\2\2\u120d\u120e\3\2\2"+
		"\2\u120e\u12b9\3\2\2\2\u120f\u121d\7\u0088\2\2\u1210\u1211\7\27\2\2\u1211"+
		"\u121e\7\u0086\2\2\u1212\u121e\7\u0295\2\2\u1213\u121e\7$\2\2\u1214\u121e"+
		"\7\u0084\2\2\u1215\u1216\7\u0150\2\2\u1216\u121e\7\u01fa\2\2\u1217\u1218"+
		"\7r\2\2\u1218\u121e\7\u01fa\2\2\u1219\u121b\t/\2\2\u121a\u1219\3\2\2\2"+
		"\u121a\u121b\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u121e\tE\2\2\u121d\u1210"+
		"\3\2\2\2\u121d\u1212\3\2\2\2\u121d\u1213\3\2\2\2\u121d\u1214\3\2\2\2\u121d"+
		"\u1215\3\2\2\2\u121d\u1217\3\2\2\2\u121d\u121a\3\2\2\2\u121e\u1220\3\2"+
		"\2\2\u121f\u1221\5\u01a2\u00d2\2\u1220\u121f\3\2\2\2\u1220\u1221\3\2\2"+
		"\2\u1221\u12b9\3\2\2\2\u1222\u1224\7\u0088\2\2\u1223\u1225\7\u014f\2\2"+
		"\u1224\u1223\3\2\2\2\u1224\u1225\3\2\2\2\u1225\u1226\3\2\2\2\u1226\u1227"+
		"\t\"\2\2\u1227\u1228\tF\2\2\u1228\u122b\5\u01c4\u00e3\2\u1229\u122a\t"+
		"F\2\2\u122a\u122c\5\u01de\u00f0\2\u122b\u1229\3\2\2\2\u122b\u122c\3\2"+
		"\2\2\u122c\u122e\3\2\2\2\u122d\u122f\5\u01a2\u00d2\2\u122e\u122d\3\2\2"+
		"\2\u122e\u122f\3\2\2\2\u122f\u12b9\3\2\2\2\u1230\u1231\7\u0088\2\2\u1231"+
		"\u1232\7\37\2\2\u1232\u1234\t\2\2\2\u1233\u1235\5\u0212\u010a\2\u1234"+
		"\u1233\3\2\2\2\u1234\u1235\3\2\2\2\u1235\u1236\3\2\2\2\u1236\u12b9\5\u01de"+
		"\u00f0\2\u1237\u1238\7\u0088\2\2\u1238\u1239\7\37\2\2\u1239\u123a\tG\2"+
		"\2\u123a\u12b9\5\u01c6\u00e4\2\u123b\u123c\7\u0088\2\2\u123c\u123d\7\37"+
		"\2\2\u123d\u123e\7\u0213\2\2\u123e\u12b9\5\u01cc\u00e7\2\u123f\u1240\7"+
		"\u0088\2\2\u1240\u1241\7\u0136\2\2\u1241\u1242\5\u01d4\u00eb\2\u1242\u1243"+
		"\tH\2\2\u1243\u12b9\3\2\2\2\u1244\u1256\7\u0088\2\2\u1245\u1247\7\u01fc"+
		"\2\2\u1246\u1245\3\2\2\2\u1246\u1247\3\2\2\2\u1247\u1248\3\2\2\2\u1248"+
		"\u1257\7\u0137\2\2\u1249\u124a\7\u0174\2\2\u124a\u1257\7\u01fa\2\2\u124b"+
		"\u1257\7\u01b5\2\2\u124c\u1257\7\u0237\2\2\u124d\u124f\7\u014f\2\2\u124e"+
		"\u124d\3\2\2\2\u124e\u124f\3\2\2\2\u124f\u1250\3\2\2\2\u1250\u1257\7\u01bb"+
		"\2\2\u1251\u1257\7\u01bd\2\2\u1252\u1253\7\u01e6\2\2\u1253\u1257\7\u0159"+
		"\2\2\u1254\u1257\7\u00fe\2\2\u1255\u1257\7\u0120\2\2\u1256\u1246\3\2\2"+
		"\2\u1256\u1249\3\2\2\2\u1256\u124b\3\2\2\2\u1256\u124c\3\2\2\2\u1256\u124e"+
		"\3\2\2\2\u1256\u1251\3\2\2\2\u1256\u1252\3\2\2\2\u1256\u1254\3\2\2\2\u1256"+
		"\u1255\3\2\2\2\u1257\u12b9\3\2\2\2\u1258\u1259\7\u0088\2\2\u1259\u125a"+
		"\tI\2\2\u125a\u125e\7V\2\2\u125b\u125c\5\u01e4\u00f3\2\u125c\u125d\7\u03b3"+
		"\2\2\u125d\u125f\3\2\2\2\u125e\u125b\3\2\2\2\u125e\u125f\3\2\2\2\u125f"+
		"\u1260\3\2\2\2\u1260\u12b9\5\u01e4\u00f3\2\u1261\u1262\7\u0088\2\2\u1262"+
		"\u1263\7\u00d8\2\2\u1263\u1264\7\u03b1\2\2\u1264\u1265\7\u03a1\2\2\u1265"+
		"\u1266\7\u03b2\2\2\u1266\u12b9\tI\2\2\u1267\u1270\7\u0088\2\2\u1268\u1271"+
		"\7\u013d\2\2\u1269\u126a\7\u0094\2\2\u126a\u1271\7\u01fa\2\2\u126b\u126d"+
		"\7\u014f\2\2\u126c\u126b\3\2\2\2\u126c\u126d\3\2\2\2\u126d\u126e\3\2\2"+
		"\2\u126e\u1271\7\u022f\2\2\u126f\u1271\7\u020a\2\2\u1270\u1268\3\2\2\2"+
		"\u1270\u1269\3\2\2\2\u1270\u126c\3\2\2\2\u1270\u126f\3\2\2\2\u1271\u1274"+
		"\3\2\2\2\u1272\u1273\tF\2\2\u1273\u1275\5\u01de\u00f0\2\u1274\u1272\3"+
		"\2\2\2\u1274\u1275\3\2\2\2\u1275\u1277\3\2\2\2\u1276\u1278\5\u01a2\u00d2"+
		"\2\u1277\u1276\3\2\2\2\u1277\u1278\3\2\2\2\u1278\u12b9\3\2\2\2\u1279\u127a"+
		"\7\u0088\2\2\u127a\u127b\tJ\2\2\u127b\u127c\7\u0112\2\2\u127c\u12b9\5"+
		"\u01c6\u00e4\2\u127d\u127e\7\u0088\2\2\u127e\u1281\7\u0153\2\2\u127f\u1280"+
		"\79\2\2\u1280\u1282\5\u01cc\u00e7\2\u1281\u127f\3\2\2\2\u1281\u1282\3"+
		"\2\2\2\u1282\u12b9\3\2\2\2\u1283\u1284\7\u0088\2\2\u1284\u1285\tK\2\2"+
		"\u1285\u1286\tF\2\2\u1286\u1289\5\u01c4\u00e3\2\u1287\u1288\tF\2\2\u1288"+
		"\u128a\5\u01de\u00f0\2\u1289\u1287\3\2\2\2\u1289\u128a\3\2\2\2\u128a\u128d"+
		"\3\2\2\2\u128b\u128c\7\u00a6\2\2\u128c\u128e\5\u0222\u0112\2\u128d\u128b"+
		"\3\2\2\2\u128d\u128e\3\2\2\2\u128e\u12b9\3\2\2\2\u128f\u1290\7\u0088\2"+
		"\2\u1290\u1291\7\u01a7\2\2\u1291\u1294\7\u022f\2\2\u1292\u1293\tF\2\2"+
		"\u1293\u1295\5\u01de\u00f0\2\u1294\u1292\3\2\2\2\u1294\u1295\3\2\2\2\u1295"+
		"\u1297\3\2\2\2\u1296\u1298\5\u01a2\u00d2\2\u1297\u1296\3\2\2\2\u1297\u1298"+
		"\3\2\2\2\u1298\u12b9\3\2\2\2\u1299\u129a\7\u0088\2\2\u129a\u129b\7\u01bc"+
		"\2\2\u129b\u12a0\5\u01a4\u00d3\2\u129c\u129d\7\u03b3\2\2\u129d\u129f\5"+
		"\u01a4\u00d3\2\u129e\u129c\3\2\2\2\u129f\u12a2\3\2\2\2\u12a0\u129e\3\2"+
		"\2\2\u12a0\u12a1\3\2\2\2\u12a1\u12a6\3\2\2\2\u12a2\u12a0\3\2\2\2\u12a3"+
		"\u12a4\79\2\2\u12a4\u12a5\7\u01bf\2\2\u12a5\u12a7\5\u01e4\u00f3\2\u12a6"+
		"\u12a3\3\2\2\2\u12a6\u12a7\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u12ac\7V"+
		"\2\2\u12a9\u12aa\5\u01e4\u00f3\2\u12aa\u12ab\7\u03b3\2\2\u12ab\u12ad\3"+
		"\2\2\2\u12ac\u12a9\3\2\2\2\u12ac\u12ad\3\2\2\2\u12ad\u12ae\3\2\2\2\u12ae"+
		"\u12af\5\u01e4\u00f3\2\u12af\u12b9\3\2\2\2\u12b0\u12b1\7\u0088\2\2\u12b1"+
		"\u12b2\7\u01e6\2\2\u12b2\u12b6\7\u01fa\2\2\u12b3\u12b4\79\2\2\u12b4\u12b5"+
		"\7\u010c\2\2\u12b5\u12b7\7\u03c0\2\2\u12b6\u12b3\3\2\2\2\u12b6\u12b7\3"+
		"\2\2\2\u12b7\u12b9\3\2\2\2\u12b8\u11f8\3\2\2\2\u12b8\u11fb\3\2\2\2\u12b8"+
		"\u120f\3\2\2\2\u12b8\u1222\3\2\2\2\u12b8\u1230\3\2\2\2\u12b8\u1237\3\2"+
		"\2\2\u12b8\u123b\3\2\2\2\u12b8\u123f\3\2\2\2\u12b8\u1244\3\2\2\2\u12b8"+
		"\u1258\3\2\2\2\u12b8\u1261\3\2\2\2\u12b8\u1267\3\2\2\2\u12b8\u1279\3\2"+
		"\2\2\u12b8\u127d\3\2\2\2\u12b8\u1283\3\2\2\2\u12b8\u128f\3\2\2\2\u12b8"+
		"\u1299\3\2\2\2\u12b8\u12b0\3\2\2\2\u12b9\u019f\3\2\2\2\u12ba\u12c5\7\u03cb"+
		"\2\2\u12bb\u12c5\7\u03cc\2\2\u12bc\u12bd\7\u03b5\2\2\u12bd\u12bf\7\u03b5"+
		"\2\2\u12be\u12bc\3\2\2\2\u12be\u12bf\3\2\2\2\u12bf\u12c0\3\2\2\2\u12c0"+
		"\u12c2\t/\2\2\u12c1\u12be\3\2\2\2\u12c1\u12c2\3\2\2\2\u12c2\u12c3\3\2"+
		"\2\2\u12c3\u12c5\5\u01de\u00f0\2\u12c4\u12ba\3\2\2\2\u12c4\u12bb\3\2\2"+
		"\2\u12c4\u12c1\3\2\2\2\u12c5\u01a1\3\2\2\2\u12c6\u12c7\7U\2\2\u12c7\u12cb"+
		"\7\u03c0\2\2\u12c8\u12c9\7\u00a6\2\2\u12c9\u12cb\5\u0222\u0112\2\u12ca"+
		"\u12c6\3\2\2\2\u12ca\u12c8\3\2\2\2\u12cb\u01a3\3\2\2\2\u12cc\u12d9\7\b"+
		"\2\2\u12cd\u12ce\7\u0106\2\2\u12ce\u12d9\7\u0164\2\2\u12cf\u12d0\7\u011f"+
		"\2\2\u12d0\u12d9\7\u0203\2\2\u12d1\u12d9\7\u0122\2\2\u12d2\u12d9\7\u0166"+
		"\2\2\u12d3\u12d9\7\u0265\2\2\u12d4\u12d5\7\u01ac\2\2\u12d5\u12d9\7\u0146"+
		"\2\2\u12d6\u12d9\7\u01ed\2\2\u12d7\u12d9\7\u0202\2\2\u12d8\u12cc\3\2\2"+
		"\2\u12d8\u12cd\3\2\2\2\u12d8\u12cf\3\2\2\2\u12d8\u12d1\3\2\2\2\u12d8\u12d2"+
		"\3\2\2\2\u12d8\u12d3\3\2\2\2\u12d8\u12d4\3\2\2\2\u12d8\u12d6\3\2\2\2\u12d8"+
		"\u12d7\3\2\2\2\u12d9\u01a5\3\2\2\2\u12da\u12db\7\u0104\2\2\u12db\u12dc"+
		"\7\u03c0\2\2\u12dc\u01a7\3\2\2\2\u12dd\u12de\7\u0108\2\2\u12de\u12df\7"+
		"E\2\2\u12df\u12e4\5\u01b4\u00db\2\u12e0\u12e1\7\u03b3\2\2\u12e1\u12e3"+
		"\5\u01b4\u00db\2\u12e2\u12e0\3\2\2\2\u12e3\u12e6\3\2\2\2\u12e4\u12e2\3"+
		"\2\2\2\u12e4\u12e5\3\2\2\2\u12e5\u12ee\3\2\2\2\u12e6\u12e4\3\2\2\2\u12e7"+
		"\u12e8\7p\2\2\u12e8\u12eb\7\u03b1\2\2\u12e9\u12ec\5\u01fe\u0100\2\u12ea"+
		"\u12ec\7\b\2\2\u12eb\u12e9\3\2\2\2\u12eb\u12ea\3\2\2\2\u12ec\u12ed\3\2"+
		"\2\2\u12ed\u12ef\7\u03b2\2\2\u12ee\u12e7\3\2\2\2\u12ee\u12ef\3\2\2\2\u12ef"+
		"\u12f0\3\2\2\2\u12f0\u12f1\7D\2\2\u12f1\u12f2\5\u01de\u00f0\2\u12f2\u01a9"+
		"\3\2\2\2\u12f3\u12f5\7\u014c\2\2\u12f4\u12f6\tA\2\2\u12f5\u12f4\3\2\2"+
		"\2\u12f5\u12f6\3\2\2\2\u12f6\u12f7\3\2\2\2\u12f7\u12fc\5\u01b6\u00dc\2"+
		"\u12f8\u12f9\7\u03b3\2\2\u12f9\u12fb\5\u01b6\u00dc\2\u12fa\u12f8\3\2\2"+
		"\2\u12fb\u12fe\3\2\2\2\u12fc\u12fa\3\2\2\2\u12fc\u12fd\3\2\2\2\u12fd\u01ab"+
		"\3\2\2\2\u12fe\u12fc\3\2\2\2\u12ff\u1301\7Q\2\2\u1300\u1302\tL\2\2\u1301"+
		"\u1300\3\2\2\2\u1301\u1302\3\2\2\2\u1302\u1304\3\2\2\2\u1303\u1305\5\u01e4"+
		"\u00f3\2\u1304\u1303\3\2\2\2\u1305\u1306\3\2\2\2\u1306\u1304\3\2\2\2\u1306"+
		"\u1307\3\2\2\2\u1307\u01ad\3\2\2\2\u1308\u1309\7Y\2\2\u1309\u130a\7E\2"+
		"\2\u130a\u130b\7K\2\2\u130b\u130c\7\u0108\2\2\u130c\u1311\5\u01b8\u00dd"+
		"\2\u130d\u130e\7\u03b3\2\2\u130e\u1310\5\u01b8\u00dd\2\u130f\u130d\3\2"+
		"\2\2\u1310\u1313\3\2\2\2\u1311\u130f\3\2\2\2\u1311\u1312\3\2\2\2\u1312"+
		"\u01af\3\2\2\2\u1313\u1311\3\2\2\2\u1314\u1315\7\u01d4\2\2\u1315\u1316"+
		"\7\u01bf\2\2\u1316\u1317\7\u0108\2\2\u1317\u01b1\3\2\2\2\u1318\u1319\7"+
		"\u0235\2\2\u1319\u01b3\3\2\2\2\u131a\u1322\5\u01c4\u00e3\2\u131b\u131d"+
		"\t\23\2\2\u131c\u131b\3\2\2\2\u131c\u131d\3\2\2\2\u131d\u131e\3\2\2\2"+
		"\u131e\u131f\7\u03b1\2\2\u131f\u1320\5\u01fe\u0100\2\u1320\u1321\7\u03b2"+
		"\2\2\u1321\u1323\3\2\2\2\u1322\u131c\3\2\2\2\u1322\u1323\3\2\2\2\u1323"+
		"\u01b5\3\2\2\2\u1324\u1345\7\u0129\2\2\u1325\u1345\7\u0159\2\2\u1326\u1328"+
		"\tM\2\2\u1327\u1326\3\2\2\2\u1327\u1328\3\2\2\2\u1328\u1329\3\2\2\2\u1329"+
		"\u1345\7\u0173\2\2\u132a\u132b\7\u01c5\2\2\u132b\u132d\7\u0173\2\2\u132c"+
		"\u132e\5\u0126\u0094\2\u132d\u132c\3\2\2\2\u132d\u132e\3\2\2\2\u132e\u1345"+
		"\3\2\2\2\u132f\u1345\7\u01a8\2\2\u1330\u1345\7\u0237\2\2\u1331\u1332\7"+
		"\u01bf\2\2\u1332\u1345\7\u0108\2\2\u1333\u1345\7\u01fa\2\2\u1334\u1345"+
		"\7\u0215\2\2\u1335\u1339\7\u022f\2\2\u1336\u1337\7\u00a8\2\2\u1337\u1338"+
		"\7u\2\2\u1338\u133a\7Z\2\2\u1339\u1336\3\2\2\2\u1339\u133a\3\2\2\2\u133a"+
		"\u1345\3\2\2\2\u133b\u133c\7\u022f\2\2\u133c\u1342\5\u0200\u0101\2\u133d"+
		"\u133e\7\u00a8\2\2\u133e\u133f\7u\2\2\u133f\u1343\7Z\2\2\u1340\u1341\7"+
		"9\2\2\u1341\u1343\7\u0142\2\2\u1342\u133d\3\2\2\2\u1342\u1340\3\2\2\2"+
		"\u1342\u1343\3\2\2\2\u1343\u1345\3\2\2\2\u1344\u1324\3\2\2\2\u1344\u1325"+
		"\3\2\2\2\u1344\u1327\3\2\2\2\u1344\u132a\3\2\2\2\u1344\u132f\3\2\2\2\u1344"+
		"\u1330\3\2\2\2\u1344\u1331\3\2\2\2\u1344\u1333\3\2\2\2\u1344\u1334\3\2"+
		"\2\2\u1344\u1335\3\2\2\2\u1344\u133b\3\2\2\2\u1345\u01b7\3\2\2\2\u1346"+
		"\u134e\5\u01c4\u00e3\2\u1347\u1348\7p\2\2\u1348\u134b\7\u03b1\2\2\u1349"+
		"\u134c\5\u01fe\u0100\2\u134a\u134c\7\b\2\2\u134b\u1349\3\2\2\2\u134b\u134a"+
		"\3\2\2\2\u134c\u134d\3\2\2\2\u134d\u134f\7\u03b2\2\2\u134e\u1347\3\2\2"+
		"\2\u134e\u134f\3\2\2\2\u134f\u1357\3\2\2\2\u1350\u1352\t\23\2\2\u1351"+
		"\u1350\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u1353\3\2\2\2\u1353\u1354\7\u03b1"+
		"\2\2\u1354\u1355\5\u01fe\u0100\2\u1355\u1356\7\u03b2\2\2\u1356\u1358\3"+
		"\2\2\2\u1357\u1351\3\2\2\2\u1357\u1358\3\2\2\2\u1358\u135b\3\2\2\2\u1359"+
		"\u135a\7C\2\2\u135a\u135c\7\u016d\2\2\u135b\u1359\3\2\2\2\u135b\u135c"+
		"\3\2\2\2\u135c\u01b9\3\2\2\2\u135d\u135e\tN\2\2\u135e\u1361\5\u01c4\u00e3"+
		"\2\u135f\u1362\5\u01de\u00f0\2\u1360\u1362\7\u03c0\2\2\u1361\u135f\3\2"+
		"\2\2\u1361\u1360\3\2\2\2\u1361\u1362\3\2\2\2\u1362\u01bb\3\2\2\2\u1363"+
		"\u1369\tN\2\2\u1364\u136a\7\u0143\2\2\u1365\u136a\7\u01b0\2\2\u1366\u1367"+
		"\7\u02bd\2\2\u1367\u1368\7\u03a8\2\2\u1368\u136a\tO\2\2\u1369\u1364\3"+
		"\2\2\2\u1369\u1365\3\2\2\2\u1369\u1366\3\2\2\2\u1369\u136a\3\2\2\2\u136a"+
		"\u136b\3\2\2\2\u136b\u136c\5\u01c2\u00e2\2\u136c\u01bd\3\2\2\2\u136d\u136e"+
		"\7\u0157\2\2\u136e\u136f\7\u03c0\2\2\u136f\u01bf\3\2\2\2\u1370\u1371\7"+
		"\u00a2\2\2\u1371\u1372\5\u01de\u00f0\2\u1372\u01c1\3\2\2\2\u1373\u1379"+
		"\5\u00aaV\2\u1374\u1379\5\u009cO\2\u1375\u1379\5\u00a2R\2\u1376\u1379"+
		"\5\u00a8U\2\u1377\u1379\5\u00acW\2\u1378\u1373\3\2\2\2\u1378\u1374\3\2"+
		"\2\2\u1378\u1375\3\2\2\2\u1378\u1376\3\2\2\2\u1378\u1377\3\2\2\2\u1379"+
		"\u137e\3\2\2\2\u137a\u137b\79\2\2\u137b\u137c\7\u011c\2\2\u137c\u137e"+
		"\5\u01de\u00f0\2\u137d\u1378\3\2\2\2\u137d\u137a\3\2\2\2\u137e\u01c3\3"+
		"\2\2\2\u137f\u1383\5\u01de\u00f0\2\u1380\u1384\7\u03c7\2\2\u1381\u1382"+
		"\7\u03b0\2\2\u1382\u1384\5\u01de\u00f0\2\u1383\u1380\3\2\2\2\u1383\u1381"+
		"\3\2\2\2\u1383\u1384\3\2\2\2\u1384\u01c5\3\2\2\2\u1385\u1389\5\u01de\u00f0"+
		"\2\u1386\u138a\7\u03c7\2\2\u1387\u1388\7\u03b0\2\2\u1388\u138a\5\u01de"+
		"\u00f0\2\u1389\u1386\3\2\2\2\u1389\u1387\3\2\2\2\u1389\u138a\3\2\2\2\u138a"+
		"\u01c7\3\2\2\2\u138b\u1390\5\u01de\u00f0\2\u138c\u138e\5\u01e2\u00f2\2"+
		"\u138d\u138f\5\u01e2\u00f2\2\u138e\u138d\3\2\2\2\u138e\u138f\3\2\2\2\u138f"+
		"\u1391\3\2\2\2\u1390\u138c\3\2\2\2\u1390\u1391\3\2\2\2\u1391\u01c9\3\2"+
		"\2\2\u1392\u1397\5\u01de\u00f0\2\u1393\u1394\7\u03b1\2\2\u1394\u1395\5"+
		"\u01e4\u00f3\2\u1395\u1396\7\u03b2\2\2\u1396\u1398\3\2\2\2\u1397\u1393"+
		"\3\2\2\2\u1397\u1398\3\2\2\2\u1398\u139a\3\2\2\2\u1399\u139b\t)\2\2\u139a"+
		"\u1399\3\2\2\2\u139a\u139b\3\2\2\2\u139b\u01cb\3\2\2\2\u139c\u139d\7\u03ca"+
		"\2\2\u139d\u01cd\3\2\2\2\u139e\u139f\tP\2\2\u139f\u01cf\3\2\2\2\u13a0"+
		"\u13a5\7\u00be\2\2\u13a1\u13a5\5\u022e\u0118\2\u13a2\u13a5\7\u03c0\2\2"+
		"\u13a3\u13a5\7\u03bd\2\2\u13a4\u13a0\3\2\2\2\u13a4\u13a1\3\2\2\2\u13a4"+
		"\u13a2\3\2\2\2\u13a4\u13a3\3\2\2\2\u13a5\u01d1\3\2\2\2\u13a6\u13a9\5\u01de"+
		"\u00f0\2\u13a7\u13a9\7\u03c0\2\2\u13a8\u13a6\3\2\2\2\u13a8\u13a7\3\2\2"+
		"\2\u13a9\u01d3\3\2\2\2\u13aa\u13ab\tQ\2\2\u13ab\u01d5\3\2\2\2\u13ac\u13ad"+
		"\5\u01e4\u00f3\2\u13ad\u13ae\7\u03a5\2\2\u13ae\u13af\5\u01e4\u00f3\2\u13af"+
		"\u13b0\7\u03a5\2\2\u13b0\u13b1\5\u01e4\u00f3\2\u13b1\u13b2\7\u03a5\2\2"+
		"\u13b2\u13b3\5\u01e4\u00f3\2\u13b3\u13b4\7\u03a5\2\2\u13b4\u13ba\5\u01e4"+
		"\u00f3\2\u13b5\u13b6\7\u03bc\2\2\u13b6\u13b7\5\u01e4\u00f3\2\u13b7\u13b8"+
		"\7\u03a5\2\2\u13b8\u13b9\5\u01e4\u00f3\2\u13b9\u13bb\3\2\2\2\u13ba\u13b5"+
		"\3\2\2\2\u13bb\u13bc\3\2\2\2\u13bc\u13ba\3\2\2\2\u13bc\u13bd\3\2\2\2\u13bd"+
		"\u01d7\3\2\2\2\u13be\u13c5\5\u01da\u00ee\2\u13bf\u13c0\7\u03b3\2\2\u13c0"+
		"\u13c3\5\u01da\u00ee\2\u13c1\u13c2\7\u03b3\2\2\u13c2\u13c4\5\u01e4\u00f3"+
		"\2\u13c3\u13c1\3\2\2\2\u13c3\u13c4\3\2\2\2\u13c4\u13c6\3\2\2\2\u13c5\u13bf"+
		"\3\2\2\2\u13c5\u13c6\3\2\2\2\u13c6\u01d9\3\2\2\2\u13c7\u13cf\7\u03c0\2"+
		"\2\u13c8\u13cf\7\u03c5\2\2\u13c9\u13cb\7\u03c2\2\2\u13ca\u13c9\3\2\2\2"+
		"\u13cb\u13cc\3\2\2\2\u13cc\u13ca\3\2\2\2\u13cc\u13cd\3\2\2\2\u13cd\u13cf"+
		"\3\2\2\2\u13ce\u13c7\3\2\2\2\u13ce\u13c8\3\2\2\2\u13ce\u13ca\3\2\2\2\u13cf"+
		"\u01db\3\2\2\2\u13d0\u13d3\5\u01de\u00f0\2\u13d1\u13d3\7\u03c0\2\2\u13d2"+
		"\u13d0\3\2\2\2\u13d2\u13d1\3\2\2\2\u13d3\u01dd\3\2\2\2\u13d4\u13d8\5\u01e0"+
		"\u00f1\2\u13d5\u13d8\7\u03c9\2\2\u13d6\u13d8\7\u03bd\2\2\u13d7\u13d4\3"+
		"\2\2\2\u13d7\u13d5\3\2\2\2\u13d7\u13d6\3\2\2\2\u13d8\u01df\3\2\2\2\u13d9"+
		"\u13e4\7\u03c8\2\2\u13da\u13e4\5\u022e\u0118\2\u13db\u13e4\5\u0230\u0119"+
		"\2\u13dc\u13e4\5\u01d4\u00eb\2\u13dd\u13e4\5\u0232\u011a\2\u13de\u13e4"+
		"\5\u0234\u011b\2\u13df\u13e4\5\u0236\u011c\2\u13e0\u13e4\5\u0238\u011d"+
		"\2\u13e1\u13e4\5\u023a\u011e\2\u13e2\u13e4\5\u01f6\u00fc\2\u13e3\u13d9"+
		"\3\2\2\2\u13e3\u13da\3\2\2\2\u13e3\u13db\3\2\2\2\u13e3\u13dc\3\2\2\2\u13e3"+
		"\u13dd\3\2\2\2\u13e3\u13de\3\2\2\2\u13e3\u13df\3\2\2\2\u13e3\u13e0\3\2"+
		"\2\2\u13e3\u13e1\3\2\2\2\u13e3\u13e2\3\2\2\2\u13e4\u01e1\3\2\2\2\u13e5"+
		"\u13e9\7\u03c7\2\2\u13e6\u13e7\7\u03b0\2\2\u13e7\u13e9\5\u01de\u00f0\2"+
		"\u13e8\u13e5\3\2\2\2\u13e8\u13e6\3\2\2\2\u13e9\u01e3\3\2\2\2\u13ea\u13eb"+
		"\tR\2\2\u13eb\u01e5\3\2\2\2\u13ec\u13ef\7\u03be\2\2\u13ed\u13ef\5\u01e4"+
		"\u00f3\2\u13ee\u13ec\3\2\2\2\u13ee\u13ed\3\2\2\2\u13ef\u01e7\3\2\2\2\u13f0"+
		"\u13f2\7\u03c6\2\2\u13f1\u13f0\3\2\2\2\u13f1\u13f2\3\2\2\2\u13f2\u13f3"+
		"\3\2\2\2\u13f3\u13f6\7\u03c0\2\2\u13f4\u13f6\7\u03bf\2\2\u13f5\u13f1\3"+
		"\2\2\2\u13f5\u13f4\3\2\2\2\u13f6\u13f8\3\2\2\2\u13f7\u13f9\7\u03c0\2\2"+
		"\u13f8\u13f7\3\2\2\2\u13f9\u13fa\3\2\2\2\u13fa\u13f8\3\2\2\2\u13fa\u13fb"+
		"\3\2\2\2\u13fb\u1408\3\2\2\2\u13fc\u13fe\7\u03c6\2\2\u13fd\u13fc\3\2\2"+
		"\2\u13fd\u13fe\3\2\2\2\u13fe\u13ff\3\2\2\2\u13ff\u1402\7\u03c0\2\2\u1400"+
		"\u1402\7\u03bf\2\2\u1401\u13fd\3\2\2\2\u1401\u1400\3\2\2\2\u1402\u1405"+
		"\3\2\2\2\u1403\u1404\7\31\2\2\u1404\u1406\5\u01d2\u00ea\2\u1405\u1403"+
		"\3\2\2\2\u1405\u1406\3\2\2\2\u1406\u1408\3\2\2\2\u1407\u13f5\3\2\2\2\u1407"+
		"\u1401\3\2\2\2\u1408\u01e9\3\2\2\2\u1409\u140a\tS\2\2\u140a\u01eb\3\2"+
		"\2\2\u140b\u140d\7\u03c6\2\2\u140c\u140b\3\2\2\2\u140c\u140d\3\2\2\2\u140d"+
		"\u140e\3\2\2\2\u140e\u140f\7\u03c2\2\2\u140f\u01ed\3\2\2\2\u1410\u1413"+
		"\7c\2\2\u1411\u1413\tT\2\2\u1412\u1410\3\2\2\2\u1412\u1411\3\2\2\2\u1413"+
		"\u01ef\3\2\2\2\u1414\u141d\5\u01e8\u00f5\2\u1415\u141d\5\u01e4\u00f3\2"+
		"\u1416\u141d\5\u01ec\u00f7\2\u1417\u141d\5\u01ea\u00f6\2\u1418\u141d\7"+
		"\u03c3\2\2\u1419\u141d\7\u03c5\2\2\u141a\u141d\7c\2\2\u141b\u141d\tT\2"+
		"\2\u141c\u1414\3\2\2\2\u141c\u1415\3\2\2\2\u141c\u1416\3\2\2\2\u141c\u1417"+
		"\3\2\2\2\u141c\u1418\3\2\2\2\u141c\u1419\3\2\2\2\u141c\u141a\3\2\2\2\u141c"+
		"\u141b\3\2\2\2\u141d\u01f1\3\2\2\2\u141e\u1420\tU\2\2\u141f\u1421\5\u01f8"+
		"\u00fd\2\u1420\u141f\3\2\2\2\u1420\u1421\3\2\2\2\u1421\u1423\3\2\2\2\u1422"+
		"\u1424\7\u00be\2\2\u1423\u1422\3\2\2\2\u1423\u1424\3\2\2\2\u1424\u1428"+
		"\3\2\2\2\u1425\u1426\7\27\2\2\u1426\u1427\7\u0086\2\2\u1427\u1429\5\u01d0"+
		"\u00e9\2\u1428\u1425\3\2\2\2\u1428\u1429\3\2\2\2\u1429\u142c\3\2\2\2\u142a"+
		"\u142b\7\31\2\2\u142b\u142d\5\u01d2\u00ea\2\u142c\u142a\3\2\2\2\u142c"+
		"\u142d\3\2\2\2\u142d\u146a\3\2\2\2\u142e\u1430\tV\2\2\u142f\u1431\5\u01f8"+
		"\u00fd\2\u1430\u142f\3\2\2\2\u1430\u1431\3\2\2\2\u1431\u1433\3\2\2\2\u1432"+
		"\u1434\7\u009f\2\2\u1433\u1432\3\2\2\2\u1433\u1434\3\2\2\2\u1434\u1436"+
		"\3\2\2\2\u1435\u1437\7\u00ab\2\2\u1436\u1435\3\2\2\2\u1436\u1437\3\2\2"+
		"\2\u1437\u146a\3\2\2\2\u1438\u143a\tW\2\2\u1439\u143b\5\u01fa\u00fe\2"+
		"\u143a\u1439\3\2\2\2\u143a\u143b\3\2\2\2\u143b\u143d\3\2\2\2\u143c\u143e"+
		"\7\u009f\2\2\u143d\u143c\3\2\2\2\u143d\u143e\3\2\2\2\u143e\u1440\3\2\2"+
		"\2\u143f\u1441\7\u00ab\2\2\u1440\u143f\3\2\2\2\u1440\u1441\3\2\2\2\u1441"+
		"\u146a\3\2\2\2\u1442\u1444\tX\2\2\u1443\u1445\5\u01fc\u00ff\2\u1444\u1443"+
		"\3\2\2\2\u1444\u1445\3\2\2\2\u1445\u1447\3\2\2\2\u1446\u1448\7\u009f\2"+
		"\2\u1447\u1446\3\2\2\2\u1447\u1448\3\2\2\2\u1448\u144a\3\2\2\2\u1449\u144b"+
		"\7\u00ab\2\2\u144a\u1449\3\2\2\2\u144a\u144b\3\2\2\2\u144b\u146a\3\2\2"+
		"\2\u144c\u146a\tY\2\2\u144d\u144f\tZ\2\2\u144e\u1450\5\u01f8\u00fd\2\u144f"+
		"\u144e\3\2\2\2\u144f\u1450\3\2\2\2\u1450\u146a\3\2\2\2\u1451\u1452\t["+
		"\2\2\u1452\u1453\7\u03b1\2\2\u1453\u1458\7\u03c0\2\2\u1454\u1455\7\u03b3"+
		"\2\2\u1455\u1457\7\u03c0\2\2\u1456\u1454\3\2\2\2\u1457\u145a\3\2\2\2\u1458"+
		"\u1456\3\2\2\2\u1458\u1459\3\2\2\2\u1459\u145b\3\2\2\2\u145a\u1458\3\2"+
		"\2\2\u145b\u145d\7\u03b2\2\2\u145c\u145e\7\u00be\2\2\u145d\u145c\3\2\2"+
		"\2\u145d\u145e\3\2\2\2\u145e\u1462\3\2\2\2\u145f\u1460\7\27\2\2\u1460"+
		"\u1461\7\u0086\2\2\u1461\u1463\5\u01d0\u00e9\2\u1462\u145f\3\2\2\2\u1462"+
		"\u1463\3\2\2\2\u1463\u1466\3\2\2\2\u1464\u1465\7\31\2\2\u1465\u1467\5"+
		"\u01d2\u00ea\2\u1466\u1464\3\2\2\2\u1466\u1467\3\2\2\2\u1467\u146a\3\2"+
		"\2\2\u1468\u146a\5\u01f6\u00fc\2\u1469\u141e\3\2\2\2\u1469\u142e\3\2\2"+
		"\2\u1469\u1438\3\2\2\2\u1469\u1442\3\2\2\2\u1469\u144c\3\2\2\2\u1469\u144d"+
		"\3\2\2\2\u1469\u1451\3\2\2\2\u1469\u1468\3\2\2\2\u146a\u01f3\3\2\2\2\u146b"+
		"\u146d\t\\\2\2\u146c\u146e\5\u01f8\u00fd\2\u146d\u146c\3\2\2\2\u146d\u146e"+
		"\3\2\2\2\u146e\u1484\3\2\2\2\u146f\u1471\7\u00bc\2\2\u1470\u1472\5\u01f8"+
		"\u00fd\2\u1471\u1470\3\2\2\2\u1471\u1472\3\2\2\2\u1472\u1476\3\2\2\2\u1473"+
		"\u1474\7\27\2\2\u1474\u1475\7\u0086\2\2\u1475\u1477\5\u01d0\u00e9\2\u1476"+
		"\u1473\3\2\2\2\u1476\u1477\3\2\2\2\u1477\u1484\3\2\2\2\u1478\u1484\7\u00b7"+
		"\2\2\u1479\u1484\7\u00ba\2\2\u147a\u1484\7\u00b8\2\2\u147b\u147d\7\u00b5"+
		"\2\2\u147c\u147e\5\u01fa\u00fe\2\u147d\u147c\3\2\2\2\u147d\u147e\3\2\2"+
		"\2\u147e\u1484\3\2\2\2\u147f\u1481\t]\2\2\u1480\u1482\7\u00b0\2\2\u1481"+
		"\u1480\3\2\2\2\u1481\u1482\3\2\2\2\u1482\u1484\3\2\2\2\u1483\u146b\3\2"+
		"\2\2\u1483\u146f\3\2\2\2\u1483\u1478\3\2\2\2\u1483\u1479\3\2\2\2\u1483"+
		"\u147a\3\2\2\2\u1483\u147b\3\2\2\2\u1483\u147f\3\2\2\2\u1484\u01f5\3\2"+
		"\2\2\u1485\u1486\t^\2\2\u1486\u01f7\3\2\2\2\u1487\u1488\7\u03b1\2\2\u1488"+
		"\u1489\5\u01e4\u00f3\2\u1489\u148a\7\u03b2\2\2\u148a\u01f9\3\2\2\2\u148b"+
		"\u148c\7\u03b1\2\2\u148c\u148d\5\u01e4\u00f3\2\u148d\u148e\7\u03b3\2\2"+
		"\u148e\u148f\5\u01e4\u00f3\2\u148f\u1490\7\u03b2\2\2\u1490\u01fb\3\2\2"+
		"\2\u1491\u1492\7\u03b1\2\2\u1492\u1495\5\u01e4\u00f3\2\u1493\u1494\7\u03b3"+
		"\2\2\u1494\u1496\5\u01e4\u00f3\2\u1495\u1493\3\2\2\2\u1495\u1496\3\2\2"+
		"\2\u1496\u1497\3\2\2\2\u1497\u1498\7\u03b2\2\2\u1498\u01fd\3\2\2\2\u1499"+
		"\u149e\5\u01de\u00f0\2\u149a\u149b\7\u03b3\2\2\u149b\u149d\5\u01de\u00f0"+
		"\2\u149c\u149a\3\2\2\2\u149d\u14a0\3\2\2\2\u149e\u149c\3\2\2\2\u149e\u149f"+
		"\3\2\2\2\u149f\u01ff\3\2\2\2\u14a0\u149e\3\2\2\2\u14a1\u14a6\5\u01c4\u00e3"+
		"\2\u14a2\u14a3\7\u03b3\2\2\u14a3\u14a5\5\u01c4\u00e3\2\u14a4\u14a2\3\2"+
		"\2\2\u14a5\u14a8\3\2\2\2\u14a6\u14a4\3\2\2\2\u14a6\u14a7\3\2\2\2\u14a7"+
		"\u0201\3\2\2\2\u14a8\u14a6\3\2\2\2\u14a9\u14aa\7\u03b1\2\2\u14aa\u14ab"+
		"\5\u01c4\u00e3\2\u14ab\u14ac\7\u03b3\2\2\u14ac\u14ad\5\u01c4\u00e3\2\u14ad"+
		"\u14b7\7\u03b2\2\2\u14ae\u14af\7\u03b3\2\2\u14af\u14b0\7\u03b1\2\2\u14b0"+
		"\u14b1\5\u01c4\u00e3\2\u14b1\u14b2\7\u03b3\2\2\u14b2\u14b3\5\u01c4\u00e3"+
		"\2\u14b3\u14b4\7\u03b2\2\2\u14b4\u14b6\3\2\2\2\u14b5\u14ae\3\2\2\2\u14b6"+
		"\u14b9\3\2\2\2\u14b7\u14b5\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u0203\3\2"+
		"\2\2\u14b9\u14b7\3\2\2\2\u14ba\u14bb\7\u03b1\2\2\u14bb\u14c0\5\u01ca\u00e6"+
		"\2\u14bc\u14bd\7\u03b3\2\2\u14bd\u14bf\5\u01ca\u00e6\2\u14be\u14bc\3\2"+
		"\2\2\u14bf\u14c2\3\2\2\2\u14c0\u14be\3\2\2\2\u14c0\u14c1\3\2\2\2\u14c1"+
		"\u14c3\3\2\2\2\u14c2\u14c0\3\2\2\2\u14c3\u14c4\7\u03b2\2\2\u14c4\u0205"+
		"\3\2\2\2\u14c5\u14ca\5\u0222\u0112\2\u14c6\u14c7\7\u03b3\2\2\u14c7\u14c9"+
		"\5\u0222\u0112\2\u14c8\u14c6\3\2\2\2\u14c9\u14cc\3\2\2\2\u14ca\u14c8\3"+
		"\2\2\2\u14ca\u14cb\3\2\2\2\u14cb\u0207\3\2\2\2\u14cc\u14ca\3\2\2\2\u14cd"+
		"\u14d2\5\u01f0\u00f9\2\u14ce\u14cf\7\u03b3\2\2\u14cf\u14d1\5\u01f0\u00f9"+
		"\2\u14d0\u14ce\3\2\2\2\u14d1\u14d4\3\2\2\2\u14d2\u14d0\3\2\2\2\u14d2\u14d3"+
		"\3\2\2\2\u14d3\u0209\3\2\2\2\u14d4\u14d2\3\2\2\2\u14d5\u14da\7\u03c0\2"+
		"\2\u14d6\u14d7\7\u03b3\2\2\u14d7\u14d9\7\u03c0\2\2\u14d8\u14d6\3\2\2\2"+
		"\u14d9\u14dc\3\2\2\2\u14da\u14d8\3\2\2\2\u14da\u14db\3\2\2\2\u14db\u020b"+
		"\3\2\2\2\u14dc\u14da\3\2\2\2\u14dd\u14e2\7\u03cb\2\2\u14de\u14df\7\u03b3"+
		"\2\2\u14df\u14e1\7\u03cb\2\2\u14e0\u14de\3\2\2\2\u14e1\u14e4\3\2\2\2\u14e2"+
		"\u14e0\3\2\2\2\u14e2\u14e3\3\2\2\2\u14e3\u020d\3\2\2\2\u14e4\u14e2\3\2"+
		"\2\2\u14e5\u14e8\7f\2\2\u14e6\u14e8\5\u01f0\u00f9\2\u14e7\u14e5\3\2\2"+
		"\2\u14e7\u14e6\3\2\2\2\u14e8\u020f\3\2\2\2\u14e9\u14ea\7B\2\2\u14ea\u14eb"+
		"\7\64\2\2\u14eb\u0211\3\2\2\2\u14ec\u14ed\7B\2\2\u14ed\u14ee\7d\2\2\u14ee"+
		"\u14ef\7\64\2\2\u14ef\u0213\3\2\2\2\u14f0\u1504\5\u0216\u010c\2\u14f1"+
		"\u1504\5\u021a\u010e\2\u14f2\u14f3\5\u021c\u010f\2\u14f3\u14f5\7\u03b1"+
		"\2\2\u14f4\u14f6\5\u021e\u0110\2\u14f5\u14f4\3\2\2\2\u14f5\u14f6\3\2\2"+
		"\2\u14f6\u14f7\3\2\2\2\u14f7\u14f8\7\u03b2\2\2\u14f8\u1504\3\2\2\2\u14f9"+
		"\u14fb\5\u01de\u00f0\2\u14fa\u14fc\5\u01e2\u00f2\2\u14fb\u14fa\3\2\2\2"+
		"\u14fb\u14fc\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd\u14ff\7\u03b1\2\2\u14fe"+
		"\u1500\5\u021e\u0110\2\u14ff\u14fe\3\2\2\2\u14ff\u1500\3\2\2\2\u1500\u1501"+
		"\3\2\2\2\u1501\u1502\7\u03b2\2\2\u1502\u1504\3\2\2\2\u1503\u14f0\3\2\2"+
		"\2\u1503\u14f1\3\2\2\2\u1503\u14f2\3\2\2\2\u1503\u14f9\3\2\2\2\u1504\u0215"+
		"\3\2\2\2\u1505\u15ab\t_\2\2\u1506\u1507\7\36\2\2\u1507\u1508\7\u03b1\2"+
		"\2\u1508\u1509\5\u0222\u0112\2\u1509\u150a\7\u03b3\2\2\u150a\u150b\5\u01f4"+
		"\u00fb\2\u150b\u150c\7\u03b2\2\2\u150c\u15ab\3\2\2\2\u150d\u150e\7\36"+
		"\2\2\u150e\u150f\7\u03b1\2\2\u150f\u1510\5\u0222\u0112\2\u1510\u1511\7"+
		"\u00a3\2\2\u1511\u1512\5\u01d0\u00e9\2\u1512\u1513\7\u03b2\2\2\u1513\u15ab"+
		"\3\2\2\2\u1514\u1515\7\25\2\2\u1515\u1516\7\u03b1\2\2\u1516\u1517\5\u0222"+
		"\u0112\2\u1517\u1518\7\f\2\2\u1518\u1519\5\u01f4\u00fb\2\u1519\u151a\7"+
		"\u03b2\2\2\u151a\u15ab\3\2\2\2\u151b\u151c\7\u00a4\2\2\u151c\u151d\7\u03b1"+
		"\2\2\u151d\u151e\5\u01c8\u00e5\2\u151e\u151f\7\u03b2\2\2\u151f\u15ab\3"+
		"\2\2\2\u1520\u1521\7\24\2\2\u1521\u1527\5\u0222\u0112\2\u1522\u1523\7"+
		"\u00a5\2\2\u1523\u1524\5\u0220\u0111\2\u1524\u1525\7\u0096\2\2\u1525\u1526"+
		"\5\u0220\u0111\2\u1526\u1528\3\2\2\2\u1527\u1522\3\2\2\2\u1528\u1529\3"+
		"\2\2\2\u1529\u1527\3\2\2\2\u1529\u152a\3\2\2\2\u152a\u152d\3\2\2\2\u152b"+
		"\u152c\7\60\2\2\u152c\u152e\5\u0220\u0111\2\u152d\u152b\3\2\2\2\u152d"+
		"\u152e\3\2\2\2\u152e\u152f\3\2\2\2\u152f\u1530\7\u0134\2\2\u1530\u15ab"+
		"\3\2\2\2\u1531\u1537\7\24\2\2\u1532\u1533\7\u00a5\2\2\u1533\u1534\5\u0220"+
		"\u0111\2\u1534\u1535\7\u0096\2\2\u1535\u1536\5\u0220\u0111\2\u1536\u1538"+
		"\3\2\2\2\u1537\u1532\3\2\2\2\u1538\u1539\3\2\2\2\u1539\u1537\3\2\2\2\u1539"+
		"\u153a\3\2\2\2\u153a\u153d\3\2\2\2\u153b\u153c\7\60\2\2\u153c\u153e\5"+
		"\u0220\u0111\2\u153d\u153b\3\2\2\2\u153d\u153e\3\2\2\2\u153e\u153f\3\2"+
		"\2\2\u153f\u1540\7\u0134\2\2\u1540\u15ab\3\2\2\2\u1541\u1542\7\u00bc\2"+
		"\2\u1542\u1543\7\u03b1\2\2\u1543\u1546\5\u021e\u0110\2\u1544\u1545\7\u00a3"+
		"\2\2\u1545\u1547\5\u01d0\u00e9\2\u1546\u1544\3\2\2\2\u1546\u1547\3\2\2"+
		"\2\u1547\u1548\3\2\2\2\u1548\u1549\7\u03b2\2\2\u1549\u15ab\3\2\2\2\u154a"+
		"\u154b\7\u00ef\2\2\u154b\u154e\7\u03b1\2\2\u154c\u154f\5\u01e8\u00f5\2"+
		"\u154d\u154f\5\u0222\u0112\2\u154e\u154c\3\2\2\2\u154e\u154d\3\2\2\2\u154f"+
		"\u1550\3\2\2\2\u1550\u1553\7D\2\2\u1551\u1554\5\u01e8\u00f5\2\u1552\u1554"+
		"\5\u0222\u0112\2\u1553\u1551\3\2\2\2\u1553\u1552\3\2\2\2\u1554\u1555\3"+
		"\2\2\2\u1555\u1556\7\u03b2\2\2\u1556\u15ab\3\2\2\2\u1557\u1558\t`\2\2"+
		"\u1558\u155b\7\u03b1\2\2\u1559\u155c\5\u01e8\u00f5\2\u155a\u155c\5\u0222"+
		"\u0112\2\u155b\u1559\3\2\2\2\u155b\u155a\3\2\2\2\u155c\u155d\3\2\2\2\u155d"+
		"\u1560\7<\2\2\u155e\u1561\5\u01e4\u00f3\2\u155f\u1561\5\u0222\u0112\2"+
		"\u1560\u155e\3\2\2\2\u1560\u155f\3\2\2\2\u1561\u1567\3\2\2\2\u1562\u1565"+
		"\79\2\2\u1563\u1566\5\u01e4\u00f3\2\u1564\u1566\5\u0222\u0112\2\u1565"+
		"\u1563\3\2\2\2\u1565\u1564\3\2\2\2\u1566\u1568\3\2\2\2\u1567\u1562\3\2"+
		"\2\2\u1567\u1568\3\2\2\2\u1568\u1569\3\2\2\2\u1569\u156a\7\u03b2\2\2\u156a"+
		"\u15ab\3\2\2\2\u156b\u156c\7\u00f3\2\2\u156c\u156d\7\u03b1\2\2\u156d\u1570"+
		"\ta\2\2\u156e\u1571\5\u01e8\u00f5\2\u156f\u1571\5\u0222\u0112\2\u1570"+
		"\u156e\3\2\2\2\u1570\u156f\3\2\2\2\u1570\u1571\3\2\2\2\u1571\u1572\3\2"+
		"\2\2\u1572\u1575\7<\2\2\u1573\u1576\5\u01e8\u00f5\2\u1574\u1576\5\u0222"+
		"\u0112\2\u1575\u1573\3\2\2\2\u1575\u1574\3\2\2\2\u1576\u1577\3\2\2\2\u1577"+
		"\u1578\7\u03b2\2\2\u1578\u15ab\3\2\2\2\u1579\u157a\7\u00f3\2\2\u157a\u157d"+
		"\7\u03b1\2\2\u157b\u157e\5\u01e8\u00f5\2\u157c\u157e\5\u0222\u0112\2\u157d"+
		"\u157b\3\2\2\2\u157d\u157c\3\2\2\2\u157e\u157f\3\2\2\2\u157f\u1582\7<"+
		"\2\2\u1580\u1583\5\u01e8\u00f5\2\u1581\u1583\5\u0222\u0112\2\u1582\u1580"+
		"\3\2\2\2\u1582\u1581\3\2\2\2\u1583\u1584\3\2\2\2\u1584\u1585\7\u03b2\2"+
		"\2\u1585\u15ab\3\2\2\2\u1586\u1587\7\u0393\2\2\u1587\u158a\7\u03b1\2\2"+
		"\u1588\u158b\5\u01e8\u00f5\2\u1589\u158b\5\u0222\u0112\2\u158a\u1588\3"+
		"\2\2\2\u158a\u1589\3\2\2\2\u158b\u1592\3\2\2\2\u158c\u158d\7\f\2\2\u158d"+
		"\u158e\tb\2\2\u158e\u158f\7\u03b1\2\2\u158f\u1590\5\u01e4\u00f3\2\u1590"+
		"\u1591\7\u03b2\2\2\u1591\u1593\3\2\2\2\u1592\u158c\3\2\2\2\u1592\u1593"+
		"\3\2\2\2\u1593\u1595\3\2\2\2\u1594\u1596\5\u0218\u010d\2\u1595\u1594\3"+
		"\2\2\2\u1595\u1596\3\2\2\2\u1596\u1597\3\2\2\2\u1597\u1598\7\u03b2\2\2"+
		"\u1598\u15ab\3\2\2\2\u1599\u159a\7\u00ec\2\2\u159a\u159b\7\u03b1\2\2\u159b"+
		"\u159c\5<\37\2\u159c\u159f\7<\2\2\u159d\u15a0\5\u01e8\u00f5\2\u159e\u15a0"+
		"\5\u0222\u0112\2\u159f\u159d\3\2\2\2\u159f\u159e\3\2\2\2\u15a0\u15a1\3"+
		"\2\2\2\u15a1\u15a2\7\u03b2\2\2\u15a2\u15ab\3\2\2\2\u15a3\u15a4\7\u02cc"+
		"\2\2\u15a4\u15a5\7\u03b1\2\2\u15a5\u15a6\tc\2\2\u15a6\u15a7\7\u03b3\2"+
		"\2\u15a7\u15a8\5\u01e8\u00f5\2\u15a8\u15a9\7\u03b2\2\2\u15a9\u15ab\3\2"+
		"\2\2\u15aa\u1505\3\2\2\2\u15aa\u1506\3\2\2\2\u15aa\u150d\3\2\2\2\u15aa"+
		"\u1514\3\2\2\2\u15aa\u151b\3\2\2\2\u15aa\u1520\3\2\2\2\u15aa\u1531\3\2"+
		"\2\2\u15aa\u1541\3\2\2\2\u15aa\u154a\3\2\2\2\u15aa\u1557\3\2\2\2\u15aa"+
		"\u156b\3\2\2\2\u15aa\u1579\3\2\2\2\u15aa\u1586\3\2\2\2\u15aa\u1599\3\2"+
		"\2\2\u15aa\u15a3\3\2\2\2\u15ab\u0217\3\2\2\2\u15ac\u15ad\7\u016f\2\2\u15ad"+
		"\u15af\5\u01e4\u00f3\2\u15ae\u15b0\td\2\2\u15af\u15ae\3\2\2\2\u15af\u15b0"+
		"\3\2\2\2\u15b0\u15b8\3\2\2\2\u15b1\u15b2\7\u03b3\2\2\u15b2\u15b4\5\u01e4"+
		"\u00f3\2\u15b3\u15b5\td\2\2\u15b4\u15b3\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5"+
		"\u15b7\3\2\2\2\u15b6\u15b1\3\2\2\2\u15b7\u15ba\3\2\2\2\u15b8\u15b6\3\2"+
		"\2\2\u15b8\u15b9\3\2\2\2\u15b9\u15c1\3\2\2\2\u15ba\u15b8\3\2\2\2\u15bb"+
		"\u15bc\7\u016f\2\2\u15bc\u15bd\5\u01e4\u00f3\2\u15bd\u15be\7\u03a5\2\2"+
		"\u15be\u15bf\5\u01e4\u00f3\2\u15bf\u15c1\3\2\2\2\u15c0\u15ac\3\2\2\2\u15c0"+
		"\u15bb\3\2\2\2\u15c1\u0219\3\2\2\2\u15c2\u15c3\te\2\2\u15c3\u15c5\7\u03b1"+
		"\2\2\u15c4\u15c6\t%\2\2\u15c5\u15c4\3\2\2\2\u15c5\u15c6\3\2\2\2\u15c6"+
		"\u15c7\3\2\2\2\u15c7\u15c8\5\u0220\u0111\2\u15c8\u15c9\7\u03b2\2\2\u15c9"+
		"\u15fb\3\2\2\2\u15ca\u15cb\7\u00d8\2\2\u15cb\u15d1\7\u03b1\2\2\u15cc\u15d2"+
		"\7\u03a1\2\2\u15cd\u15cf\7\b\2\2\u15ce\u15cd\3\2\2\2\u15ce\u15cf\3\2\2"+
		"\2\u15cf\u15d0\3\2\2\2\u15d0\u15d2\5\u0220\u0111\2\u15d1\u15cc\3\2\2\2"+
		"\u15d1\u15ce\3\2\2\2\u15d2\u15d3\3\2\2\2\u15d3\u15fb\7\u03b2\2\2\u15d4"+
		"\u15d5\7\u00d8\2\2\u15d5\u15d6\7\u03b1\2\2\u15d6\u15d7\7,\2\2\u15d7\u15d8"+
		"\5\u021e\u0110\2\u15d8\u15d9\7\u03b2\2\2\u15d9\u15fb\3\2\2\2\u15da\u15db"+
		"\tf\2\2\u15db\u15dd\7\u03b1\2\2\u15dc\u15de\7\b\2\2\u15dd\u15dc\3\2\2"+
		"\2\u15dd\u15de\3\2\2\2\u15de\u15df\3\2\2\2\u15df\u15e0\5\u0220\u0111\2"+
		"\u15e0\u15e1\7\u03b2\2\2\u15e1\u15fb\3\2\2\2\u15e2\u15e3\7\u00d9\2\2\u15e3"+
		"\u15e5\7\u03b1\2\2\u15e4\u15e6\7,\2\2\u15e5\u15e4\3\2\2\2\u15e5\u15e6"+
		"\3\2\2\2\u15e6\u15e7\3\2\2\2\u15e7\u15f2\5\u021e\u0110\2\u15e8\u15e9\7"+
		"l\2\2\u15e9\u15ea\7\21\2\2\u15ea\u15ef\5\u00c6d\2\u15eb\u15ec\7\u03b3"+
		"\2\2\u15ec\u15ee\5\u00c6d\2\u15ed\u15eb\3\2\2\2\u15ee\u15f1\3\2\2\2\u15ef"+
		"\u15ed\3\2\2\2\u15ef\u15f0\3\2\2\2\u15f0\u15f3\3\2\2\2\u15f1\u15ef\3\2"+
		"\2\2\u15f2\u15e8\3\2\2\2\u15f2\u15f3\3\2\2\2\u15f3\u15f6\3\2\2\2\u15f4"+
		"\u15f5\7\u0087\2\2\u15f5\u15f7\7\u03c0\2\2\u15f6\u15f4\3\2\2\2\u15f6\u15f7"+
		"\3\2\2\2\u15f7\u15f8\3\2\2\2\u15f8\u15f9\7\u03b2\2\2\u15f9\u15fb\3\2\2"+
		"\2\u15fa\u15c2\3\2\2\2\u15fa\u15ca\3\2\2\2\u15fa\u15d4\3\2\2\2\u15fa\u15da"+
		"\3\2\2\2\u15fa\u15e2\3\2\2\2\u15fb\u021b\3\2\2\2\u15fc\u1613\5\u023a\u011e"+
		"\2\u15fd\u1613\7\u0239\2\2\u15fe\u1613\7\u00e8\2\2\u15ff\u1613\7\u00e4"+
		"\2\2\u1600\u1613\7\u00e5\2\2\u1601\u1613\7\u00e6\2\2\u1602\u1613\7\u00e9"+
		"\2\2\u1603\u1613\7\u00ea\2\2\u1604\u1613\7\u00eb\2\2\u1605\u1613\7B\2"+
		"\2\u1606\u1613\7\u00e7\2\2\u1607\u1613\7\u00ed\2\2\u1608\u1613\7\u0191"+
		"\2\2\u1609\u1613\7\u00ee\2\2\u160a\u1613\7|\2\2\u160b\u1613\7\u00f0\2"+
		"\2\u160c\u1613\7\u00f1\2\2\u160d\u1613\7\u00f2\2\2\u160e\u1613\7\u00f3"+
		"\2\2\u160f\u1613\7\u00f4\2\2\u1610\u1613\7\u00f5\2\2\u1611\u1613\7\u00f6"+
		"\2\2\u1612\u15fc\3\2\2\2\u1612\u15fd\3\2\2\2\u1612\u15fe\3\2\2\2\u1612"+
		"\u15ff\3\2\2\2\u1612\u1600\3\2\2\2\u1612\u1601\3\2\2\2\u1612\u1602\3\2"+
		"\2\2\u1612\u1603\3\2\2\2\u1612\u1604\3\2\2\2\u1612\u1605\3\2\2\2\u1612"+
		"\u1606\3\2\2\2\u1612\u1607\3\2\2\2\u1612\u1608\3\2\2\2\u1612\u1609\3\2"+
		"\2\2\u1612\u160a\3\2\2\2\u1612\u160b\3\2\2\2\u1612\u160c\3\2\2\2\u1612"+
		"\u160d\3\2\2\2\u1612\u160e\3\2\2\2\u1612\u160f\3\2\2\2\u1612\u1610\3\2"+
		"\2\2\u1612\u1611\3\2\2\2\u1613\u021d\3\2\2\2\u1614\u1619\5\u01f0\u00f9"+
		"\2\u1615\u1619\5\u01c8\u00e5\2\u1616\u1619\5\u0214\u010b\2\u1617\u1619"+
		"\5\u0222\u0112\2\u1618\u1614\3\2\2\2\u1618\u1615\3\2\2\2\u1618\u1616\3"+
		"\2\2\2\u1618\u1617\3\2\2\2\u1619\u1623\3\2\2\2\u161a\u161f\7\u03b3\2\2"+
		"\u161b\u1620\5\u01f0\u00f9\2\u161c\u1620\5\u01c8\u00e5\2\u161d\u1620\5"+
		"\u0214\u010b\2\u161e\u1620\5\u0222\u0112\2\u161f\u161b\3\2\2\2\u161f\u161c"+
		"\3\2\2\2\u161f\u161d\3\2\2\2\u161f\u161e\3\2\2\2\u1620\u1622\3\2\2\2\u1621"+
		"\u161a\3\2\2\2\u1622\u1625\3\2\2\2\u1623\u1621\3\2\2\2\u1623\u1624\3\2"+
		"\2\2\u1624\u021f\3\2\2\2\u1625\u1623\3\2\2\2\u1626\u162b\5\u01f0\u00f9"+
		"\2\u1627\u162b\5\u01c8\u00e5\2\u1628\u162b\5\u0214\u010b\2\u1629\u162b"+
		"\5\u0222\u0112\2\u162a\u1626\3\2\2\2\u162a\u1627\3\2\2\2\u162a\u1628\3"+
		"\2\2\2\u162a\u1629\3\2\2\2\u162b\u0221\3\2\2\2\u162c\u162d\b\u0112\1\2"+
		"\u162d\u162e\7d\2\2\u162e\u163a\5\u0222\u0112\6\u162f\u1630\7\u03ab\2"+
		"\2\u1630\u163a\5\u0222\u0112\5\u1631\u1632\5\u0224\u0113\2\u1632\u1634"+
		"\7L\2\2\u1633\u1635\7d\2\2\u1634\u1633\3\2\2\2\u1634\u1635\3\2\2\2\u1635"+
		"\u1636\3\2\2\2\u1636\u1637\tg\2\2\u1637\u163a\3\2\2\2\u1638\u163a\5\u0224"+
		"\u0113\2\u1639\u162c\3\2\2\2\u1639\u162f\3\2\2\2\u1639\u1631\3\2\2\2\u1639"+
		"\u1638\3\2\2\2\u163a\u164e\3\2\2\2\u163b\u163c\f\13\2\2\u163c\u163d\7"+
		"k\2\2\u163d\u164d\5\u0222\u0112\f\u163e\u163f\f\n\2\2\u163f\u1640\7\u03ad"+
		"\2\2\u1640\u1641\7\u03ad\2\2\u1641\u164d\5\u0222\u0112\13\u1642\u1643"+
		"\f\t\2\2\u1643\u1644\7\u00aa\2\2\u1644\u164d\5\u0222\u0112\n\u1645\u1646"+
		"\f\b\2\2\u1646\u1647\7\13\2\2\u1647\u164d\5\u0222\u0112\t\u1648\u1649"+
		"\f\7\2\2\u1649\u164a\7\u03ae\2\2\u164a\u164b\7\u03ae\2\2\u164b\u164d\5"+
		"\u0222\u0112\b\u164c\u163b\3\2\2\2\u164c\u163e\3\2\2\2\u164c\u1642\3\2"+
		"\2\2\u164c\u1645\3\2\2\2\u164c\u1648\3\2\2\2\u164d\u1650\3\2\2\2\u164e"+
		"\u164c\3\2\2\2\u164e\u164f\3\2\2\2\u164f\u0223\3\2\2\2\u1650\u164e\3\2"+
		"\2\2\u1651\u1652\b\u0113\1\2\u1652\u1653\5\u0228\u0115\2\u1653\u1669\3"+
		"\2\2\2\u1654\u1655\f\7\2\2\u1655\u1656\7L\2\2\u1656\u1668\5\u01ee\u00f8"+
		"\2\u1657\u1658\f\6\2\2\u1658\u1659\7\u03aa\2\2\u1659\u165a\7\u03a8\2\2"+
		"\u165a\u165b\7\u03a9\2\2\u165b\u1668\5\u0228\u0115\2\u165c\u165d\f\5\2"+
		"\2\u165d\u165e\5\u0226\u0114\2\u165e\u165f\5\u0228\u0115\2\u165f\u1668"+
		"\3\2\2\2\u1660\u1661\f\4\2\2\u1661\u1662\5\u0226\u0114\2\u1662\u1663\t"+
		"h\2\2\u1663\u1664\7\u03b1\2\2\u1664\u1665\5\u00d2j\2\u1665\u1666\7\u03b2"+
		"\2\2\u1666\u1668\3\2\2\2\u1667\u1654\3\2\2\2\u1667\u1657\3\2\2\2\u1667"+
		"\u165c\3\2\2\2\u1667\u1660\3\2\2\2\u1668\u166b\3\2\2\2\u1669\u1667\3\2"+
		"\2\2\u1669\u166a\3\2\2\2\u166a\u0225\3\2\2\2\u166b\u1669\3\2\2\2\u166c"+
		"\u1678\7\u03a8\2\2\u166d\u166e\7\u03a9\2\2\u166e\u1678\7\u03a8\2\2\u166f"+
		"\u1678\7\u03a9\2\2\u1670\u1671\7\u03aa\2\2\u1671\u1678\7\u03a8\2\2\u1672"+
		"\u1678\7\u03aa\2\2\u1673\u1674\7\u03aa\2\2\u1674\u1678\7\u03a9\2\2\u1675"+
		"\u1676\7\u03ab\2\2\u1676\u1678\7\u03a8\2\2\u1677\u166c\3\2\2\2\u1677\u166d"+
		"\3\2\2\2\u1677\u166f\3\2\2\2\u1677\u1670\3\2\2\2\u1677\u1672\3\2\2\2\u1677"+
		"\u1673\3\2\2\2\u1677\u1675\3\2\2\2\u1678\u0227\3\2\2\2\u1679\u167b\5\u022a"+
		"\u0116\2\u167a\u167c\7d\2\2\u167b\u167a\3\2\2\2\u167b\u167c\3\2\2\2\u167c"+
		"\u167d\3\2\2\2\u167d\u167e\7D\2\2\u167e\u167f\7\u03b1\2\2\u167f\u1680"+
		"\5\u00d2j\2\u1680\u1681\7\u03b2\2\2\u1681\u16ac\3\2\2\2\u1682\u1684\5"+
		"\u022a\u0116\2\u1683\u1685\7d\2\2\u1684\u1683\3\2\2\2\u1684\u1685\3\2"+
		"\2\2\u1685\u1686\3\2\2\2\u1686\u1687\7D\2\2\u1687\u1688\7\u03b1\2\2\u1688"+
		"\u1689\5\u0206\u0104\2\u1689\u168a\7\u03b2\2\2\u168a\u16ac\3\2\2\2\u168b"+
		"\u168d\5\u022a\u0116\2\u168c\u168e\7d\2\2\u168d\u168c\3\2\2\2\u168d\u168e"+
		"\3\2\2\2\u168e\u168f\3\2\2\2\u168f\u1690\7\17\2\2\u1690\u1691\5\u022a"+
		"\u0116\2\u1691\u1692\7\13\2\2\u1692\u1693\5\u0228\u0115\2\u1693\u16ac"+
		"\3\2\2\2\u1694\u1695\5\u022a\u0116\2\u1695\u1696\7\u01ec\2\2\u1696\u1697"+
		"\7U\2\2\u1697\u1698\5\u022a\u0116\2\u1698\u16ac\3\2\2\2\u1699\u169b\5"+
		"\u022a\u0116\2\u169a\u169c\7d\2\2\u169b\u169a\3\2\2\2\u169b\u169c\3\2"+
		"\2\2\u169c\u169d\3\2\2\2\u169d\u169e\7U\2\2\u169e\u16a1\5\u022c\u0117"+
		"\2\u169f\u16a0\7\u013a\2\2\u16a0\u16a2\5\u022c\u0117\2\u16a1\u169f\3\2"+
		"\2\2\u16a1\u16a2\3\2\2\2\u16a2\u16ac\3\2\2\2\u16a3\u16a5\5\u022a\u0116"+
		"\2\u16a4\u16a6\7d\2\2\u16a5\u16a4\3\2\2\2\u16a5\u16a6\3\2\2\2\u16a6\u16a7"+
		"\3\2\2\2\u16a7\u16a8\7x\2\2\u16a8\u16a9\5\u022a\u0116\2\u16a9\u16ac\3"+
		"\2\2\2\u16aa\u16ac\5\u022a\u0116\2\u16ab\u1679\3\2\2\2\u16ab\u1682\3\2"+
		"\2\2\u16ab\u168b\3\2\2\2\u16ab\u1694\3\2\2\2\u16ab\u1699\3\2\2\2\u16ab"+
		"\u16a3\3\2\2\2\u16ab\u16aa\3\2\2\2\u16ac\u0229\3\2\2\2\u16ad\u16ae\b\u0116"+
		"\1\2\u16ae\u16af\5\u022c\u0117\2\u16af\u16d8\3\2\2\2\u16b0\u16b1\f\17"+
		"\2\2\u16b1\u16b2\7\u03ad\2\2\u16b2\u16d7\5\u022a\u0116\20\u16b3\u16b4"+
		"\f\16\2\2\u16b4\u16b5\7\u03ae\2\2\u16b5\u16d7\5\u022a\u0116\17\u16b6\u16b7"+
		"\f\r\2\2\u16b7\u16b8\7\u03aa\2\2\u16b8\u16b9\7\u03aa\2\2\u16b9\u16d7\5"+
		"\u022a\u0116\16\u16ba\u16bb\f\f\2\2\u16bb\u16bc\7\u03a9\2\2\u16bc\u16bd"+
		"\7\u03a9\2\2\u16bd\u16d7\5\u022a\u0116\r\u16be\u16bf\f\13\2\2\u16bf\u16c0"+
		"\7\u03a4\2\2\u16c0\u16d7\5\u022a\u0116\f\u16c1\u16c2\f\n\2\2\u16c2\u16c3"+
		"\7\u03a5\2\2\u16c3\u16d7\5\u022a\u0116\13\u16c4\u16c5\f\t\2\2\u16c5\u16c6"+
		"\7\u03a1\2\2\u16c6\u16d7\5\u022a\u0116\n\u16c7\u16c8\f\b\2\2\u16c8\u16c9"+
		"\7\u03a2\2\2\u16c9\u16d7\5\u022a\u0116\t\u16ca\u16cb\f\7\2\2\u16cb\u16cc"+
		"\7\u03a6\2\2\u16cc\u16d7\5\u022a\u0116\b\u16cd\u16ce\f\6\2\2\u16ce\u16cf"+
		"\7\u03a7\2\2\u16cf\u16d7\5\u022a\u0116\7\u16d0\u16d1\f\5\2\2\u16d1\u16d2"+
		"\7\u03a3\2\2\u16d2\u16d7\5\u022a\u0116\6\u16d3\u16d4\f\4\2\2\u16d4\u16d5"+
		"\7\u03af\2\2\u16d5\u16d7\5\u022a\u0116\5\u16d6\u16b0\3\2\2\2\u16d6\u16b3"+
		"\3\2\2\2\u16d6\u16b6\3\2\2\2\u16d6\u16ba\3\2\2\2\u16d6\u16be\3\2\2\2\u16d6"+
		"\u16c1\3\2\2\2\u16d6\u16c4\3\2\2\2\u16d6\u16c7\3\2\2\2\u16d6\u16ca\3\2"+
		"\2\2\u16d6\u16cd\3\2\2\2\u16d6\u16d0\3\2\2\2\u16d6\u16d3\3\2\2\2\u16d7"+
		"\u16da\3\2\2\2\u16d8\u16d6\3\2\2\2\u16d8\u16d9\3\2\2\2\u16d9\u022b\3\2"+
		"\2\2\u16da\u16d8\3\2\2\2\u16db\u16dc\b\u0117\1\2\u16dc\u1701\7&\2\2\u16dd"+
		"\u1701\5\u01f0\u00f9\2\u16de\u1701\5\u01c8\u00e5\2\u16df\u1701\5\u0214"+
		"\u010b\2\u16e0\u1701\5\u01ce\u00e8\2\u16e1\u16e2\7\u03a4\2\2\u16e2\u1701"+
		"\5\u022c\u0117\f\u16e3\u16e4\7\u03a5\2\2\u16e4\u1701\5\u022c\u0117\13"+
		"\u16e5\u16e6\7\u03ac\2\2\u16e6\u1701\5\u022c\u0117\n\u16e7\u16e8\7\u03ab"+
		"\2\2\u16e8\u1701\5\u022c\u0117\t\u16e9\u16ea\7\u00be\2\2\u16ea\u1701\5"+
		"\u022c\u0117\b\u16eb\u16ec\7\u03b1\2\2\u16ec\u16ed\5\u0206\u0104\2\u16ed"+
		"\u16ee\7\u03b2\2\2\u16ee\u1701\3\2\2\2\u16ef\u16f0\7\u01da\2\2\u16f0\u16f1"+
		"\7\u03b1\2\2\u16f1\u16f2\5\u0222\u0112\2\u16f2\u16f3\7\u03b3\2\2\u16f3"+
		"\u16f4\5\u0206\u0104\2\u16f4\u16f5\7\u03b2\2\2\u16f5\u1701\3\2\2\2\u16f6"+
		"\u16f7\7\u03b1\2\2\u16f7\u16f8\5\u00d2j\2\u16f8\u16f9\7\u03b2\2\2\u16f9"+
		"\u1701\3\2\2\2\u16fa\u16fb\7\64\2\2\u16fb\u16fc\7\u03b1\2\2\u16fc\u16fd"+
		"\5\u00d2j\2\u16fd\u16fe\7\u03b2\2\2\u16fe\u1701\3\2\2\2\u16ff\u1701\5"+
		":\36\2\u1700\u16db\3\2\2\2\u1700\u16dd\3\2\2\2\u1700\u16de\3\2\2\2\u1700"+
		"\u16df\3\2\2\2\u1700\u16e0\3\2\2\2\u1700\u16e1\3\2\2\2\u1700\u16e3\3\2"+
		"\2\2\u1700\u16e5\3\2\2\2\u1700\u16e7\3\2\2\2\u1700\u16e9\3\2\2\2\u1700"+
		"\u16eb\3\2\2\2\u1700\u16ef\3\2\2\2\u1700\u16f6\3\2\2\2\u1700\u16fa\3\2"+
		"\2\2\u1700\u16ff\3\2\2\2\u1701\u170b\3\2\2\2\u1702\u1703\f\r\2\2\u1703"+
		"\u1704\7\u03ad\2\2\u1704\u1705\7\u03ad\2\2\u1705\u170a\5\u022c\u0117\16"+
		"\u1706\u1707\f\17\2\2\u1707\u1708\7\31\2\2\u1708\u170a\5\u01d2\u00ea\2"+
		"\u1709\u1702\3\2\2\2\u1709\u1706\3\2\2\2\u170a\u170d\3\2\2\2\u170b\u1709"+
		"\3\2\2\2\u170b\u170c\3\2\2\2\u170c\u022d\3\2\2\2\u170d\u170b\3\2\2\2\u170e"+
		"\u170f\ti\2\2\u170f\u022f\3\2\2\2\u1710\u1711\tj\2\2\u1711\u0231\3\2\2"+
		"\2\u1712\u1713\tk\2\2\u1713\u0233\3\2\2\2\u1714\u1715\tl\2\2\u1715\u0235"+
		"\3\2\2\2\u1716\u1717\tm\2\2\u1717\u0237\3\2\2\2\u1718\u1719\tn\2\2\u1719"+
		"\u0239\3\2\2\2\u171a\u171b\to\2\2\u171b\u023b\3\2\2\2\u0359\u023d\u0241"+
		"\u0248\u024d\u024f\u0255\u0258\u025b\u0264\u028b\u0297\u02a2\u02b3\u02b8"+
		"\u02c4\u02df\u02e5\u02ea\u02f0\u02f5\u02f9\u0302\u0305\u030c\u0310\u0317"+
		"\u031a\u031f\u0327\u032c\u0331\u0334\u033f\u0342\u0346\u0349\u034d\u0350"+
		"\u0354\u0357\u035a\u035e\u0361\u0365\u036b\u0371\u0377\u037e\u0385\u038b"+
		"\u0391\u039a\u03ad\u03b4\u03b8\u03c2\u03c6\u03ca\u03ce\u03d2\u03d7\u03da"+
		"\u03dd\u03e0\u03e3\u03e9\u03ed\u03f3\u03f8\u03fb\u03fe\u0400\u040b\u040f"+
		"\u0412\u0420\u0423\u0427\u042a\u042e\u0431\u0435\u0438\u043c\u043f\u0442"+
		"\u0446\u0449\u044d\u0453\u0460\u0467\u046c\u046f\u0474\u047c\u0482\u0486"+
		"\u0489\u048e\u0492\u0496\u0499\u04a1\u04a3\u04aa\u04b0\u04b8\u04bb\u04c2"+
		"\u04c5\u04c7\u04cd\u04d2\u04e3\u04ea\u04f3\u0501\u050e\u0513\u0523\u052b"+
		"\u0535\u053b\u0543\u0548\u0551\u0555\u0557\u055c\u0562\u0567\u0569\u056d"+
		"\u0570\u0573\u0579\u057e\u0580\u0585\u058f\u0596\u059a\u05a2\u05aa\u05b2"+
		"\u05b6\u05b9\u05bf\u05c4\u05c7\u05cd\u05d0\u05d4\u05d9\u05de\u05e2\u05e7"+
		"\u05ea\u05ef\u05f3\u05f7\u05fc\u0601\u0606\u060c\u0611\u0616\u061c\u0621"+
		"\u0626\u062b\u0630\u0635\u063a\u063f\u0644\u0649\u064e\u0655\u0659\u0661"+
		"\u0666\u066d\u0674\u0676\u067e\u0683\u0690\u0692\u0695\u069d\u06a3\u06a9"+
		"\u06b3\u06b8\u06bf\u06c1\u06c4\u06c8\u06cb\u06cf\u06d2\u06d7\u06da\u06df"+
		"\u06e2\u06e6\u06e9\u06ed\u06f0\u06f4\u06f7\u06fb\u06fe\u0705\u0708\u070d"+
		"\u0711\u0714\u0718\u071b\u0720\u0723\u0728\u072b\u072f\u0732\u0736\u0739"+
		"\u073d\u0740\u0744\u0747\u074c\u0751\u075b\u075f\u0766\u076b\u076e\u0773"+
		"\u077a\u077e\u0782\u078a\u079d\u07a0\u07a3\u07a7\u07b1\u07be\u07c5\u07c8"+
		"\u07d1\u07d7\u07e3\u07e6\u07ea\u07f2\u07f5\u07fa\u0802\u0808\u080c\u0811"+
		"\u0818\u081c\u0827\u082f\u0832\u0838\u083e\u0840\u0845\u084b\u0851\u0853"+
		"\u0857\u085a\u085d\u0863\u0869\u086c\u0872\u0878\u087a\u087f\u0886\u088b"+
		"\u0893\u0897\u089f\u08a3\u08a8\u08af\u08b3\u08c6\u08d3\u08d6\u08df\u08f2"+
		"\u08f9\u0900\u090f\u091c\u0922\u0928\u092e\u0934\u093a\u0940\u0945\u094c"+
		"\u0953\u095a\u095d\u0961\u0964\u0971\u0978\u097f\u0985\u0989\u098d\u0994"+
		"\u0997\u099c\u09a3\u09aa\u09ae\u09bc\u09c1\u09ca\u09cd\u09d1\u09da\u09de"+
		"\u09e1\u09e4\u09ec\u09f2\u09fb\u09fe\u0a09\u0a0c\u0a11\u0a14\u0a19\u0a23"+
		"\u0a28\u0a2e\u0a31\u0a36\u0a3b\u0a3d\u0a43\u0a48\u0a4a\u0a50\u0a58\u0a5d"+
		"\u0a65\u0a68\u0a6d\u0a70\u0a75\u0a7d\u0a85\u0a8b\u0a93\u0a98\u0aa0\u0aa3"+
		"\u0aa7\u0aaa\u0ab2\u0ab8\u0ac1\u0ac4\u0acd\u0ad6\u0adc\u0ae0\u0ae4\u0ae6"+
		"\u0ae9\u0aec\u0af4\u0afa\u0afe\u0b01\u0b04\u0b07\u0b0f\u0b11\u0b15\u0b23"+
		"\u0b26\u0b2e\u0b32\u0b35\u0b38\u0b41\u0b45\u0b48\u0b4c\u0b50\u0b53\u0b56"+
		"\u0b5b\u0b61\u0b65\u0b6f\u0b75\u0b79\u0b7f\u0b83\u0b89\u0b8c\u0b98\u0b9c"+
		"\u0ba0\u0ba8\u0bac\u0bb4\u0bb7\u0bbb\u0bbe\u0bc6\u0bcb\u0bce\u0bd1\u0bd5"+
		"\u0bd8\u0be1\u0be6\u0bef\u0bf4\u0bfb\u0c02\u0c0a\u0c0f\u0c17\u0c1a\u0c1d"+
		"\u0c24\u0c27\u0c2e\u0c31\u0c39\u0c43\u0c45\u0c4c\u0c57\u0c5d\u0c61\u0c6c"+
		"\u0c71\u0c73\u0c77\u0c83\u0c8d\u0c93\u0c98\u0c9b\u0c9e\u0ca1\u0ca7\u0cac"+
		"\u0caf\u0cb2\u0cb6\u0cbc\u0cc0\u0cca\u0cce\u0cd4\u0cdd\u0ce0\u0ce4\u0ce7"+
		"\u0ceb\u0cef\u0cf2\u0cf4\u0cf9\u0cfe\u0d02\u0d0e\u0d14\u0d17\u0d1c\u0d21"+
		"\u0d23\u0d29\u0d2e\u0d30\u0d32\u0d38\u0d41\u0d46\u0d48\u0d4c\u0d50\u0d56"+
		"\u0d5d\u0d66\u0d69\u0d6d\u0d71\u0d75\u0d78\u0d7b\u0d7e\u0d82\u0d86\u0d89"+
		"\u0d8c\u0d8f\u0d96\u0d9a\u0da9\u0db6\u0dbe\u0dc8\u0dcc\u0dcf\u0dd3\u0dd6"+
		"\u0dd9\u0de2\u0deb\u0df5\u0df9\u0e03\u0e12\u0e15\u0e1e\u0e21\u0e25\u0e2a"+
		"\u0e2e\u0e37\u0e3a\u0e59\u0e5c\u0e5f\u0e95\u0eab\u0eb9\u0ec0\u0ec4\u0eca"+
		"\u0ed2\u0ed4\u0edf\u0ee9\u0ef4\u0efc\u0f01\u0f09\u0f11\u0f19\u0f21\u0f27"+
		"\u0f29\u0f2d\u0f32\u0f37\u0f3d\u0f41\u0f47\u0f49\u0f54\u0f5c\u0f60\u0f67"+
		"\u0f69\u0f77\u0f7d\u0f82\u0f87\u0f8d\u0f94\u0f9c\u0fa4\u0fa9\u0faf\u0fb2"+
		"\u0fba\u0fc1\u0fca\u0fcd\u0fde\u0fe6\u0fee\u0ff2\u1000\u1006\u100d\u1014"+
		"\u1019\u101c\u101e\u1024\u1026\u102a\u102c\u102f\u1038\u103e\u1045\u104c"+
		"\u1051\u1054\u1056\u105c\u105e\u1062\u1064\u1067\u106c\u1073\u107c\u1081"+
		"\u108a\u1091\u1096\u1099\u109b\u10a1\u10a3\u10a6\u10b2\u10b8\u10ca\u10cf"+
		"\u10d8\u10de\u10e9\u10ec\u10f8\u10ff\u110c\u1118\u1123\u1125\u112f\u1139"+
		"\u1143\u1147\u114b\u1154\u116f\u117e\u1185\u1189\u1194\u119b\u119f\u11a6"+
		"\u11ab\u11ae\u11b1\u11ba\u11be\u11dc\u11e3\u11e7\u11ee\u11f1\u11f6\u1200"+
		"\u1204\u120a\u120d\u121a\u121d\u1220\u1224\u122b\u122e\u1234\u1246\u124e"+
		"\u1256\u125e\u126c\u1270\u1274\u1277\u1281\u1289\u128d\u1294\u1297\u12a0"+
		"\u12a6\u12ac\u12b6\u12b8\u12be\u12c1\u12c4\u12ca\u12d8\u12e4\u12eb\u12ee"+
		"\u12f5\u12fc\u1301\u1306\u1311\u131c\u1322\u1327\u132d\u1339\u1342\u1344"+
		"\u134b\u134e\u1351\u1357\u135b\u1361\u1369\u1378\u137d\u1383\u1389\u138e"+
		"\u1390\u1397\u139a\u13a4\u13a8\u13bc\u13c3\u13c5\u13cc\u13ce\u13d2\u13d7"+
		"\u13e3\u13e8\u13ee\u13f1\u13f5\u13fa\u13fd\u1401\u1405\u1407\u140c\u1412"+
		"\u141c\u1420\u1423\u1428\u142c\u1430\u1433\u1436\u143a\u143d\u1440\u1444"+
		"\u1447\u144a\u144f\u1458\u145d\u1462\u1466\u1469\u146d\u1471\u1476\u147d"+
		"\u1481\u1483\u1495\u149e\u14a6\u14b7\u14c0\u14ca\u14d2\u14da\u14e2\u14e7"+
		"\u14f5\u14fb\u14ff\u1503\u1529\u152d\u1539\u153d\u1546\u154e\u1553\u155b"+
		"\u1560\u1565\u1567\u1570\u1575\u157d\u1582\u158a\u1592\u1595\u159f\u15aa"+
		"\u15af\u15b4\u15b8\u15c0\u15c5\u15ce\u15d1\u15dd\u15e5\u15ef\u15f2\u15f6"+
		"\u15fa\u1612\u1618\u161f\u1623\u162a\u1634\u1639\u164c\u164e\u1667\u1669"+
		"\u1677\u167b\u1684\u168d\u169b\u16a1\u16a5\u16ab\u16d6\u16d8\u1700\u1709"+
		"\u170b";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}